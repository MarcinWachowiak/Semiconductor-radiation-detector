
RadiationAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800ff2c  0800ff2c  0001ff2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010044  08010044  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010044  08010044  00020044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801004c  0801004c  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801004c  0801004c  0002004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010050  08010050  00020050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  08010054  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001f0  08010244  000301f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000250  080102a4  00030250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003ba4  240002b0  08010304  000302b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24003e54  08010304  00033e54  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037be2  00000000  00000000  000302de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000533e  00000000  00000000  00067ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001e40  00000000  00000000  0006d200  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c48  00000000  00000000  0006f040  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003e9f1  00000000  00000000  00070c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001dc95  00000000  00000000  000af679  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00187151  00000000  00000000  000cd30e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0025445f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008550  00000000  00000000  002544dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002b0 	.word	0x240002b0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ff14 	.word	0x0800ff14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002b4 	.word	0x240002b4
 80002dc:	0800ff14 	.word	0x0800ff14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f001 f80f 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f867 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 fae1 	bl	8000c54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000692:	f000 fabf 	bl	8000c14 <MX_DMA_Init>
  MX_ETH_Init();
 8000696:	f000 f9cf 	bl	8000a38 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069a:	f000 fa6f 	bl	8000b7c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800069e:	f00e facb 	bl	800ec38 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80006a2:	f000 f94f 	bl	8000944 <MX_ADC1_Init>
  MX_TIM16_Init();
 80006a6:	f000 fa41 	bl	8000b2c <MX_TIM16_Init>
  MX_RTC_Init();
 80006aa:	f000 fa17 	bl	8000adc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  HAL_TIM_Base_Start_IT(&htim16);
 80006ae:	4826      	ldr	r0, [pc, #152]	; (8000748 <main+0xc8>)
 80006b0:	f00a f8dc 	bl	800a86c <HAL_TIM_Base_Start_IT>

  //ADC calibration
  if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET_LINEARITY,ADC_SINGLE_ENDED) && HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED)){
 80006b4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80006bc:	4823      	ldr	r0, [pc, #140]	; (800074c <main+0xcc>)
 80006be:	f002 fd87 	bl	80031d0 <HAL_ADCEx_Calibration_Start>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00a      	beq.n	80006de <main+0x5e>
 80006c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006cc:	2100      	movs	r1, #0
 80006ce:	481f      	ldr	r0, [pc, #124]	; (800074c <main+0xcc>)
 80006d0:	f002 fd7e 	bl	80031d0 <HAL_ADCEx_Calibration_Start>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <main+0x5e>
	  Error_Handler();
 80006da:	f000 fc99 	bl	8001010 <Error_Handler>
  }

  //start ADC DMA
  if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf, ADC_BUF_LEN)){
 80006de:	220a      	movs	r2, #10
 80006e0:	491b      	ldr	r1, [pc, #108]	; (8000750 <main+0xd0>)
 80006e2:	481a      	ldr	r0, [pc, #104]	; (800074c <main+0xcc>)
 80006e4:	f001 fc82 	bl	8001fec <HAL_ADC_Start_DMA>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <main+0x72>
	  Error_Handler();
 80006ee:	f000 fc8f 	bl	8001010 <Error_Handler>
  }

  //init message
  HAL_Delay(1000);
 80006f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f6:	f001 f869 	bl	80017cc <HAL_Delay>
  uint8_t buffer[] = "Radiation Analyzer init!\r\n";
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <main+0xd4>)
 80006fc:	1d3c      	adds	r4, r7, #4
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	c403      	stmia	r4!, {r0, r1}
 800070a:	8022      	strh	r2, [r4, #0]
 800070c:	3402      	adds	r4, #2
 800070e:	0c13      	lsrs	r3, r2, #16
 8000710:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(buffer, sizeof(buffer));
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	211b      	movs	r1, #27
 8000716:	4618      	mov	r0, r3
 8000718:	f00e fb62 	bl	800ede0 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <main+0xd8>)
 8000724:	f005 fe72 	bl	800640c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800072c:	f001 f84e 	bl	80017cc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <main+0xd8>)
 8000738:	f005 fe68 	bl	800640c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800073c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000740:	f001 f844 	bl	80017cc <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000744:	e7ea      	b.n	800071c <main+0x9c>
 8000746:	bf00      	nop
 8000748:	24000528 	.word	0x24000528
 800074c:	24000384 	.word	0x24000384
 8000750:	24000370 	.word	0x24000370
 8000754:	0800ff2c 	.word	0x0800ff2c
 8000758:	58020400 	.word	0x58020400

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b0cc      	sub	sp, #304	; 0x130
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000766:	224c      	movs	r2, #76	; 0x4c
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00e ffc4 	bl	800f6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000774:	2220      	movs	r2, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f00e ffbd 	bl	800f6f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	4618      	mov	r0, r3
 8000784:	23bc      	movs	r3, #188	; 0xbc
 8000786:	461a      	mov	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f00e ffb5 	bl	800f6f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078e:	2002      	movs	r0, #2
 8000790:	f007 f866 	bl	8007860 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	4b66      	ldr	r3, [pc, #408]	; (8000934 <SystemClock_Config+0x1d8>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a65      	ldr	r2, [pc, #404]	; (8000934 <SystemClock_Config+0x1d8>)
 80007a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b63      	ldr	r3, [pc, #396]	; (8000934 <SystemClock_Config+0x1d8>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	4b61      	ldr	r3, [pc, #388]	; (8000938 <SystemClock_Config+0x1dc>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	4a60      	ldr	r2, [pc, #384]	; (8000938 <SystemClock_Config+0x1dc>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007be:	4b5e      	ldr	r3, [pc, #376]	; (8000938 <SystemClock_Config+0x1dc>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	f003 0201 	and.w	r2, r3, #1
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ce:	bf00      	nop
 80007d0:	4b58      	ldr	r3, [pc, #352]	; (8000934 <SystemClock_Config+0x1d8>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007dc:	d1f8      	bne.n	80007d0 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007de:	4b57      	ldr	r3, [pc, #348]	; (800093c <SystemClock_Config+0x1e0>)
 80007e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e2:	f023 0303 	bic.w	r3, r3, #3
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <SystemClock_Config+0x1e0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80007ee:	2329      	movs	r3, #41	; 0x29
 80007f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007fc:	2301      	movs	r3, #1
 80007fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000802:	2301      	movs	r3, #1
 8000804:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 800081a:	2378      	movs	r3, #120	; 0x78
 800081c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 15;
 8000826:	230f      	movs	r3, #15
 8000828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000832:	230c      	movs	r3, #12
 8000834:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000848:	4618      	mov	r0, r3
 800084a:	f007 f853 	bl	80078f4 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000854:	f000 fbdc 	bl	8001010 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	233f      	movs	r3, #63	; 0x3f
 800085a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800086a:	2308      	movs	r3, #8
 800086c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800088e:	2104      	movs	r1, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f007 fc3f 	bl	8008114 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x144>
  {
    Error_Handler();
 800089c:	f000 fbb8 	bl	8001010 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4a26      	ldr	r2, [pc, #152]	; (8000940 <SystemClock_Config+0x1e4>)
 80008a6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2201      	movs	r2, #1
 80008ae:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	2213      	movs	r2, #19
 80008b6:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2202      	movs	r2, #2
 80008be:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2202      	movs	r2, #2
 80008c6:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	2202      	movs	r2, #2
 80008ce:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	22c0      	movs	r2, #192	; 0xc0
 80008d6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	2220      	movs	r2, #32
 80008de:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2200      	movs	r2, #0
 8000902:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4618      	mov	r0, r3
 8000918:	f007 ff80 	bl	800881c <HAL_RCCEx_PeriphCLKConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 8000922:	f000 fb75 	bl	8001010 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000926:	f006 ffd5 	bl	80078d4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800092a:	bf00      	nop
 800092c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58024800 	.word	0x58024800
 8000938:	58000400 	.word	0x58000400
 800093c:	58024400 	.word	0x58024400
 8000940:	004c0002 	.word	0x004c0002

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000968:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800096a:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <MX_ADC1_Init+0xec>)
 800096c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000970:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000974:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000978:	2208      	movs	r2, #8
 800097a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000982:	4b2a      	ldr	r3, [pc, #168]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000984:	2208      	movs	r2, #8
 8000986:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800098a:	2200      	movs	r2, #0
 800098c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800098e:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000990:	2200      	movs	r2, #0
 8000992:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000996:	2201      	movs	r2, #1
 8000998:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800099c:	2201      	movs	r2, #1
 800099e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009b4:	2203      	movs	r2, #3
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009cc:	4817      	ldr	r0, [pc, #92]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009ce:	f001 f96d 	bl	8001cac <HAL_ADC_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009d8:	f000 fb1a 	bl	8001010 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_ADC1_Init+0xe8>)
 80009e8:	f002 fc88 	bl	80032fc <HAL_ADCEx_MultiModeConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009f2:	f000 fb0d 	bl	8001010 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_ADC1_Init+0xf0>)
 80009f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009fa:	2306      	movs	r3, #6
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80009fe:	2302      	movs	r3, #2
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a02:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a06:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_ADC1_Init+0xe8>)
 8000a16:	f001 fe05 	bl	8002624 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a20:	f000 faf6 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	24000384 	.word	0x24000384
 8000a30:	40022000 	.word	0x40022000
 8000a34:	3ef08000 	.word	0x3ef08000

08000a38 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_ETH_Init+0x94>)
 8000a40:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	2280      	movs	r2, #128	; 0x80
 8000a52:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	3302      	adds	r3, #2
 8000a5a:	22e1      	movs	r2, #225	; 0xe1
 8000a5c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	3303      	adds	r3, #3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	3305      	adds	r3, #5
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_ETH_Init+0x98>)
 8000a86:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_ETH_Init+0x9c>)
 8000a8c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a90:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a94:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_ETH_Init+0x90>)
 8000a98:	f004 fef2 	bl	8005880 <HAL_ETH_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000aa2:	f000 fab5 	bl	8001010 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aa6:	2234      	movs	r2, #52	; 0x34
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000aac:	f00e fe24 	bl	800f6f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000ab2:	2221      	movs	r2, #33	; 0x21
 8000ab4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000ab8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000abc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_ETH_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000484 	.word	0x24000484
 8000acc:	40028000 	.word	0x40028000
 8000ad0:	24000250 	.word	0x24000250
 8000ad4:	240001f0 	.word	0x240001f0
 8000ad8:	240004f4 	.word	0x240004f4

08000adc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_RTC_Init+0x48>)
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <MX_RTC_Init+0x4c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_RTC_Init+0x48>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_RTC_Init+0x48>)
 8000aee:	227f      	movs	r2, #127	; 0x7f
 8000af0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_RTC_Init+0x48>)
 8000af4:	22ff      	movs	r2, #255	; 0xff
 8000af6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_RTC_Init+0x48>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_RTC_Init+0x48>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_RTC_Init+0x48>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_RTC_Init+0x48>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_RTC_Init+0x48>)
 8000b12:	f009 fd47 	bl	800a5a4 <HAL_RTC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b1c:	f000 fa78 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	24000460 	.word	0x24000460
 8000b28:	58004000 	.word	0x58004000

08000b2c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b32:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <MX_TIM16_Init+0x4c>)
 8000b34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 18000;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b38:	f244 6250 	movw	r2, #18000	; 0x4650
 8000b3c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b46:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b4a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_TIM16_Init+0x48>)
 8000b60:	f009 fe2c 	bl	800a7bc <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8000b6a:	f000 fa51 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	24000528 	.word	0x24000528
 8000b78:	40014400 	.word	0x40014400

08000b7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000b82:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <MX_USART3_UART_Init+0x94>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc4:	4811      	ldr	r0, [pc, #68]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bc6:	f00a f887 	bl	800acd8 <HAL_UART_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bd0:	f000 fa1e 	bl	8001010 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bd8:	f00b f821 	bl	800bc1e <HAL_UARTEx_SetTxFifoThreshold>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000be2:	f000 fa15 	bl	8001010 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be6:	2100      	movs	r1, #0
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bea:	f00b f856 	bl	800bc9a <HAL_UARTEx_SetRxFifoThreshold>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bf4:	f000 fa0c 	bl	8001010 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	; (8000c0c <MX_USART3_UART_Init+0x90>)
 8000bfa:	f00a ffd7 	bl	800bbac <HAL_UARTEx_DisableFifoMode>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c04:	f000 fa04 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	240002e4 	.word	0x240002e4
 8000c10:	40004800 	.word	0x40004800

08000c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_DMA_Init+0x3c>)
 8000c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <MX_DMA_Init+0x3c>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_DMA_Init+0x3c>)
 8000c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	200b      	movs	r0, #11
 8000c3e:	f002 fd12 	bl	8003666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c42:	200b      	movs	r0, #11
 8000c44:	f002 fd29 	bl	800369a <HAL_NVIC_EnableIRQ>

}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	58024400 	.word	0x58024400

08000c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b87      	ldr	r3, [pc, #540]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a85      	ldr	r2, [pc, #532]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c88:	4b7f      	ldr	r3, [pc, #508]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	4a7e      	ldr	r2, [pc, #504]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	61fb      	str	r3, [r7, #28]
 8000ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b78      	ldr	r3, [pc, #480]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	4a76      	ldr	r2, [pc, #472]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb6:	4b74      	ldr	r3, [pc, #464]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc4:	4b70      	ldr	r3, [pc, #448]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cca:	4a6f      	ldr	r2, [pc, #444]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cd4:	4b6c      	ldr	r3, [pc, #432]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce2:	4b69      	ldr	r3, [pc, #420]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a67      	ldr	r2, [pc, #412]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b61      	ldr	r3, [pc, #388]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a60      	ldr	r2, [pc, #384]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b5d      	ldr	r3, [pc, #372]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b5a      	ldr	r3, [pc, #360]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a58      	ldr	r2, [pc, #352]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d3c:	4b52      	ldr	r3, [pc, #328]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a51      	ldr	r2, [pc, #324]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b4e      	ldr	r3, [pc, #312]	; (8000e88 <MX_GPIO_Init+0x234>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HOLD_RST_GPIO_Port, HOLD_RST_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	484b      	ldr	r0, [pc, #300]	; (8000e8c <MX_GPIO_Init+0x238>)
 8000d60:	f005 fb54 	bl	800640c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sample_and_hold_reset_GPIO_Port, sample_and_hold_reset_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	4849      	ldr	r0, [pc, #292]	; (8000e90 <MX_GPIO_Init+0x23c>)
 8000d6c:	f005 fb4e 	bl	800640c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000d76:	4847      	ldr	r0, [pc, #284]	; (8000e94 <MX_GPIO_Init+0x240>)
 8000d78:	f005 fb48 	bl	800640c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2140      	movs	r1, #64	; 0x40
 8000d80:	4845      	ldr	r0, [pc, #276]	; (8000e98 <MX_GPIO_Init+0x244>)
 8000d82:	f005 fb43 	bl	800640c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HOLD_RST_Pin */
  GPIO_InitStruct.Pin = HOLD_RST_Pin;
 8000d86:	2308      	movs	r3, #8
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HOLD_RST_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	483b      	ldr	r0, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x238>)
 8000d9e:	f005 f985 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : rising_edge_trigger_Pin */
  GPIO_InitStruct.Pin = rising_edge_trigger_Pin;
 8000da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da8:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <MX_GPIO_Init+0x248>)
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(rising_edge_trigger_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	483a      	ldr	r0, [pc, #232]	; (8000ea0 <MX_GPIO_Init+0x24c>)
 8000db8:	f005 f978 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : sample_and_hold_reset_Pin */
  GPIO_InitStruct.Pin = sample_and_hold_reset_Pin;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(sample_and_hold_reset_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	482e      	ldr	r0, [pc, #184]	; (8000e90 <MX_GPIO_Init+0x23c>)
 8000dd6:	f005 f969 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000dda:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4828      	ldr	r0, [pc, #160]	; (8000e94 <MX_GPIO_Init+0x240>)
 8000df4:	f005 f95a 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4822      	ldr	r0, [pc, #136]	; (8000e98 <MX_GPIO_Init+0x244>)
 8000e10:	f005 f94c 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	481c      	ldr	r0, [pc, #112]	; (8000e98 <MX_GPIO_Init+0x244>)
 8000e28:	f005 f940 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : pulse_dur_rising_Pin */
  GPIO_InitStruct.Pin = pulse_dur_rising_Pin;
 8000e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_GPIO_Init+0x248>)
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(pulse_dur_rising_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4815      	ldr	r0, [pc, #84]	; (8000e98 <MX_GPIO_Init+0x244>)
 8000e42:	f005 f933 	bl	80060ac <HAL_GPIO_Init>

  /*Configure GPIO pin : pulse_dur_falling_Pin */
  GPIO_InitStruct.Pin = pulse_dur_falling_Pin;
 8000e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_GPIO_Init+0x250>)
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(pulse_dur_falling_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480f      	ldr	r0, [pc, #60]	; (8000e98 <MX_GPIO_Init+0x244>)
 8000e5c:	f005 f926 	bl	80060ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2017      	movs	r0, #23
 8000e66:	f002 fbfe 	bl	8003666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f002 fc15 	bl	800369a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f002 fbf6 	bl	8003666 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	; 0x28
 8000e7c:	f002 fc0d 	bl	800369a <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58024400 	.word	0x58024400
 8000e8c:	58020800 	.word	0x58020800
 8000e90:	58021000 	.word	0x58021000
 8000e94:	58020400 	.word	0x58020400
 8000e98:	58021800 	.word	0x58021800
 8000e9c:	11110000 	.word	0x11110000
 8000ea0:	58021400 	.word	0x58021400
 8000ea4:	11210000 	.word	0x11210000

08000ea8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d126      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x5e>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	4816      	ldr	r0, [pc, #88]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ebc:	f005 fabf 	bl	800643e <HAL_GPIO_TogglePin>
		  time_counter++;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ec8:	6013      	str	r3, [r2, #0]
		  if(time_counter%60 == 0) {
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ed0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ed4:	095a      	lsrs	r2, r3, #5
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	1aca      	subs	r2, r1, r3
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	d110      	bne.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0x5e>
			    uint8_t buffer[] = "One minute elapsed\r\n";
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ee6:	f107 0408 	add.w	r4, r7, #8
 8000eea:	461d      	mov	r5, r3
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef4:	6020      	str	r0, [r4, #0]
 8000ef6:	3404      	adds	r4, #4
 8000ef8:	7021      	strb	r1, [r4, #0]
			    CDC_Transmit_FS(buffer, sizeof(buffer));
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2115      	movs	r1, #21
 8000f00:	4618      	mov	r0, r3
 8000f02:	f00d ff6d 	bl	800ede0 <CDC_Transmit_FS>
		  	  }
	}
}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000528 	.word	0x24000528
 8000f14:	58020400 	.word	0x58020400
 8000f18:	240002cc 	.word	0x240002cc
 8000f1c:	88888889 	.word	0x88888889
 8000f20:	0800ff48 	.word	0x0800ff48

08000f24 <HAL_ADC_ConvCpltCallback>:

//ADC DMA CONVERSION COMPLETE INTERRUPT
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	b0ad      	sub	sp, #180	; 0xb4
 8000f28:	af08      	add	r7, sp, #32
 8000f2a:	60f8      	str	r0, [r7, #12]
	conv_cplt = 1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_ADC_ConvCpltCallback+0x80>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
	uint8_t buffer2[128];
	sprintf(buffer2, "ADC: %d %d %d %d %d %d %d %d %d %d\n\r", adc_dma_buf[0],adc_dma_buf[1],adc_dma_buf[2],adc_dma_buf[3],adc_dma_buf[4],adc_dma_buf[5],adc_dma_buf[6],adc_dma_buf[7],adc_dma_buf[8],adc_dma_buf[9]);
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	469c      	mov	ip, r3
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f3a:	885b      	ldrh	r3, [r3, #2]
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f40:	889b      	ldrh	r3, [r3, #4]
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f46:	88db      	ldrh	r3, [r3, #6]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f4c:	891b      	ldrh	r3, [r3, #8]
 8000f4e:	461c      	mov	r4, r3
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f52:	895b      	ldrh	r3, [r3, #10]
 8000f54:	461d      	mov	r5, r3
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f58:	899b      	ldrh	r3, [r3, #12]
 8000f5a:	461e      	mov	r6, r3
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f5e:	89db      	ldrh	r3, [r3, #14]
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f64:	8a1b      	ldrh	r3, [r3, #16]
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_ADC_ConvCpltCallback+0x84>)
 8000f6a:	8a5b      	ldrh	r3, [r3, #18]
 8000f6c:	f107 0010 	add.w	r0, r7, #16
 8000f70:	9307      	str	r3, [sp, #28]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	9306      	str	r3, [sp, #24]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	9305      	str	r3, [sp, #20]
 8000f7a:	9604      	str	r6, [sp, #16]
 8000f7c:	9503      	str	r5, [sp, #12]
 8000f7e:	9402      	str	r4, [sp, #8]
 8000f80:	9101      	str	r1, [sp, #4]
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	4673      	mov	r3, lr
 8000f86:	4662      	mov	r2, ip
 8000f88:	4908      	ldr	r1, [pc, #32]	; (8000fac <HAL_ADC_ConvCpltCallback+0x88>)
 8000f8a:	f00e fc75 	bl	800f878 <siprintf>
	CDC_Transmit_FS(buffer2, sizeof(buffer2));
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	2180      	movs	r1, #128	; 0x80
 8000f94:	4618      	mov	r0, r3
 8000f96:	f00d ff23 	bl	800ede0 <CDC_Transmit_FS>
}
 8000f9a:	bf00      	nop
 8000f9c:	3794      	adds	r7, #148	; 0x94
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	240002d0 	.word	0x240002d0
 8000fa8:	24000370 	.word	0x24000370
 8000fac:	0800ff60 	.word	0x0800ff60

08000fb0 <HAL_GPIO_EXTI_Callback>:

//Interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9){
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc0:	d10c      	bne.n	8000fdc <HAL_GPIO_EXTI_Callback+0x2c>
		//pulse duration - rising
		//enable S&H block
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <HAL_GPIO_EXTI_Callback+0x58>)
 8000fca:	f005 fa1f 	bl	800640c <HAL_GPIO_WritePin>
		//trigger ADC sampling burst
		SET_BIT(ADC1->CR, ADC_CR_ADSTART);
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6093      	str	r3, [r2, #8]
	} else {
		//Unhandled interrupt - exception
	    Error_Handler();
	}

}
 8000fda:	e010      	b.n	8000ffe <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_14){
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe2:	d106      	bne.n	8000ff2 <HAL_GPIO_EXTI_Callback+0x42>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4807      	ldr	r0, [pc, #28]	; (8001008 <HAL_GPIO_EXTI_Callback+0x58>)
 8000fec:	f005 fa0e 	bl	800640c <HAL_GPIO_WritePin>
}
 8000ff0:	e005      	b.n	8000ffe <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_15){
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff8:	d001      	beq.n	8000ffe <HAL_GPIO_EXTI_Callback+0x4e>
	    Error_Handler();
 8000ffa:	f000 f809 	bl	8001010 <Error_Handler>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	58021000 	.word	0x58021000
 800100c:	40022000 	.word	0x40022000

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001016:	e7fe      	b.n	8001016 <Error_Handler+0x6>

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_MspInit+0x30>)
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x30>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x30>)
 8001030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	58024400 	.word	0x58024400

0800104c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a34      	ldr	r2, [pc, #208]	; (800113c <HAL_ADC_MspInit+0xf0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d162      	bne.n	8001134 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <HAL_ADC_MspInit+0xf4>)
 8001070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <HAL_ADC_MspInit+0xf4>)
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <HAL_ADC_MspInit+0xf4>)
 8001080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <HAL_ADC_MspInit+0xf4>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001092:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <HAL_ADC_MspInit+0xf4>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <HAL_ADC_MspInit+0xf4>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = analog_in_Pin;
 80010aa:	2308      	movs	r3, #8
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(analog_in_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4821      	ldr	r0, [pc, #132]	; (8001144 <HAL_ADC_MspInit+0xf8>)
 80010be:	f004 fff5 	bl	80060ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <HAL_ADC_MspInit+0x100>)
 80010c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010ca:	2209      	movs	r2, #9
 80010cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 80010fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001100:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 800110a:	f002 fae1 	bl	80036d0 <HAL_DMA_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_ADC_MspInit+0xcc>
    {
      Error_Handler();
 8001114:	f7ff ff7c 	bl	8001010 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 800111c:	64da      	str	r2, [r3, #76]	; 0x4c
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_ADC_MspInit+0xfc>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2012      	movs	r0, #18
 800112a:	f002 fa9c 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800112e:	2012      	movs	r0, #18
 8001130:	f002 fab3 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40022000 	.word	0x40022000
 8001140:	58024400 	.word	0x58024400
 8001144:	58020000 	.word	0x58020000
 8001148:	240003e8 	.word	0x240003e8
 800114c:	40020010 	.word	0x40020010

08001150 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08e      	sub	sp, #56	; 0x38
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a59      	ldr	r2, [pc, #356]	; (80012d4 <HAL_ETH_MspInit+0x184>)
 800116e:	4293      	cmp	r3, r2
 8001170:	f040 80ab 	bne.w	80012ca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001174:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 8001176:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800117a:	4a57      	ldr	r2, [pc, #348]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 800117c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001180:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 8001186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001192:	4b51      	ldr	r3, [pc, #324]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 8001194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001198:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011b0:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c0:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	61bb      	str	r3, [r7, #24]
 80011cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	4a39      	ldr	r2, [pc, #228]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	4a2a      	ldr	r2, [pc, #168]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 8001230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_ETH_MspInit+0x188>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001246:	2332      	movs	r3, #50	; 0x32
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001256:	230b      	movs	r3, #11
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <HAL_ETH_MspInit+0x18c>)
 8001262:	f004 ff23 	bl	80060ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001266:	2386      	movs	r3, #134	; 0x86
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001276:	230b      	movs	r3, #11
 8001278:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <HAL_ETH_MspInit+0x190>)
 8001282:	f004 ff13 	bl	80060ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001298:	230b      	movs	r3, #11
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	4810      	ldr	r0, [pc, #64]	; (80012e4 <HAL_ETH_MspInit+0x194>)
 80012a4:	f004 ff02 	bl	80060ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ba:	230b      	movs	r3, #11
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <HAL_ETH_MspInit+0x198>)
 80012c6:	f004 fef1 	bl	80060ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3738      	adds	r7, #56	; 0x38
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40028000 	.word	0x40028000
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020800 	.word	0x58020800
 80012e0:	58020000 	.word	0x58020000
 80012e4:	58020400 	.word	0x58020400
 80012e8:	58021800 	.word	0x58021800

080012ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_RTC_MspInit+0x2c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d105      	bne.n	800130a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_RTC_MspInit+0x30>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_RTC_MspInit+0x30>)
 8001304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001308:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	58004000 	.word	0x58004000
 800131c:	58024400 	.word	0x58024400

08001320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_TIM_Base_MspInit+0x48>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d116      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <HAL_TIM_Base_MspInit+0x4c>)
 8001334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_TIM_Base_MspInit+0x4c>)
 800133a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_Base_MspInit+0x4c>)
 8001344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2075      	movs	r0, #117	; 0x75
 8001356:	f002 f986 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800135a:	2075      	movs	r0, #117	; 0x75
 800135c:	f002 f99d 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40014400 	.word	0x40014400
 800136c:	58024400 	.word	0x58024400

08001370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <HAL_UART_MspInit+0x88>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d12e      	bne.n	80013f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_UART_MspInit+0x8c>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001398:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_UART_MspInit+0x8c>)
 800139a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_UART_MspInit+0x8c>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_UART_MspInit+0x8c>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_UART_MspInit+0x8c>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_UART_MspInit+0x8c>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e0:	2307      	movs	r3, #7
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_UART_MspInit+0x90>)
 80013ec:	f004 fe5e 	bl	80060ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3728      	adds	r7, #40	; 0x28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40004800 	.word	0x40004800
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020c00 	.word	0x58020c00

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f000 f99c 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA1_Stream0_IRQHandler+0x10>)
 800145e:	f002 fefd 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	240003e8 	.word	0x240003e8

0800146c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <ADC_IRQHandler+0x10>)
 8001472:	f000 fe7f 	bl	8002174 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	24000384 	.word	0x24000384

08001480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001484:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001488:	f004 fff4 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001494:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001498:	f004 ffec 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800149c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80014a0:	f004 ffe8 	bl	8006474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <OTG_FS_IRQHandler+0x10>)
 80014ae:	f005 f952 	bl	8006756 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	24003a48 	.word	0x24003a48

080014bc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <TIM16_IRQHandler+0x10>)
 80014c2:	f009 fa09 	bl	800a8d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	24000528 	.word	0x24000528

080014d0 <_sbrk>:
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
 8001500:	f00e f8c0 	bl	800f684 <__errno>
 8001504:	4602      	mov	r2, r0
 8001506:	230c      	movs	r3, #12
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	24080000 	.word	0x24080000
 8001530:	00000400 	.word	0x00000400
 8001534:	240002d4 	.word	0x240002d4
 8001538:	24003e58 	.word	0x24003e58

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <SystemInit+0xec>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a38      	ldr	r2, [pc, #224]	; (8001628 <SystemInit+0xec>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <SystemInit+0xf0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	2b06      	cmp	r3, #6
 800155a:	d807      	bhi.n	800156c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <SystemInit+0xf0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 030f 	bic.w	r3, r3, #15
 8001564:	4a31      	ldr	r2, [pc, #196]	; (800162c <SystemInit+0xf0>)
 8001566:	f043 0307 	orr.w	r3, r3, #7
 800156a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800156c:	4b30      	ldr	r3, [pc, #192]	; (8001630 <SystemInit+0xf4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <SystemInit+0xf4>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <SystemInit+0xf4>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <SystemInit+0xf4>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	492b      	ldr	r1, [pc, #172]	; (8001630 <SystemInit+0xf4>)
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <SystemInit+0xf8>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <SystemInit+0xf0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	2b07      	cmp	r3, #7
 8001594:	d907      	bls.n	80015a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <SystemInit+0xf0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 030f 	bic.w	r3, r3, #15
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <SystemInit+0xf0>)
 80015a0:	f043 0307 	orr.w	r3, r3, #7
 80015a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <SystemInit+0xf4>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <SystemInit+0xf4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <SystemInit+0xf4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <SystemInit+0xf4>)
 80015ba:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <SystemInit+0xfc>)
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <SystemInit+0xf4>)
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <SystemInit+0x100>)
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <SystemInit+0xf4>)
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <SystemInit+0x104>)
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <SystemInit+0xf4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <SystemInit+0xf4>)
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <SystemInit+0x104>)
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <SystemInit+0xf4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <SystemInit+0xf4>)
 80015de:	4a18      	ldr	r2, [pc, #96]	; (8001640 <SystemInit+0x104>)
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <SystemInit+0xf4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <SystemInit+0xf4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a10      	ldr	r2, [pc, #64]	; (8001630 <SystemInit+0xf4>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <SystemInit+0xf4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <SystemInit+0x108>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <SystemInit+0x10c>)
 8001600:	4013      	ands	r3, r2
 8001602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001606:	d202      	bcs.n	800160e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <SystemInit+0x110>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <SystemInit+0x114>)
 8001610:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001614:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SystemInit+0xec>)
 8001618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800161c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00
 800162c:	52002000 	.word	0x52002000
 8001630:	58024400 	.word	0x58024400
 8001634:	eaf6ed7f 	.word	0xeaf6ed7f
 8001638:	02020200 	.word	0x02020200
 800163c:	01ff0000 	.word	0x01ff0000
 8001640:	01010280 	.word	0x01010280
 8001644:	5c001000 	.word	0x5c001000
 8001648:	ffff0000 	.word	0xffff0000
 800164c:	51008108 	.word	0x51008108
 8001650:	52004000 	.word	0x52004000

08001654 <Reset_Handler>:
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x10>
 8001658:	f7ff ff70 	bl	800153c <SystemInit>
 800165c:	2100      	movs	r1, #0
 800165e:	e003      	b.n	8001668 <LoopCopyDataInit>

08001660 <CopyDataInit>:
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <LoopFillZerobss+0x14>)
 8001662:	585b      	ldr	r3, [r3, r1]
 8001664:	5043      	str	r3, [r0, r1]
 8001666:	3104      	adds	r1, #4

08001668 <LoopCopyDataInit>:
 8001668:	480a      	ldr	r0, [pc, #40]	; (8001694 <LoopFillZerobss+0x18>)
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <LoopFillZerobss+0x1c>)
 800166c:	1842      	adds	r2, r0, r1
 800166e:	429a      	cmp	r2, r3
 8001670:	d3f6      	bcc.n	8001660 <CopyDataInit>
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <LoopFillZerobss+0x20>)
 8001674:	e002      	b.n	800167c <LoopFillZerobss>

08001676 <FillZerobss>:
 8001676:	2300      	movs	r3, #0
 8001678:	f842 3b04 	str.w	r3, [r2], #4

0800167c <LoopFillZerobss>:
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <LoopFillZerobss+0x24>)
 800167e:	429a      	cmp	r2, r3
 8001680:	d3f9      	bcc.n	8001676 <FillZerobss>
 8001682:	f00e f805 	bl	800f690 <__libc_init_array>
 8001686:	f7fe fffb 	bl	8000680 <main>
 800168a:	4770      	bx	lr
 800168c:	24080000 	.word	0x24080000
 8001690:	08010054 	.word	0x08010054
 8001694:	24000000 	.word	0x24000000
 8001698:	240001f0 	.word	0x240001f0
 800169c:	240002b0 	.word	0x240002b0
 80016a0:	24003e54 	.word	0x24003e54

080016a4 <ADC3_IRQHandler>:
 80016a4:	e7fe      	b.n	80016a4 <ADC3_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f001 ffce 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b4:	f006 fee4 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 80016b8:	4601      	mov	r1, r0
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_Init+0x68>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_Init+0x6c>)
 80016c6:	5cd3      	ldrb	r3, [r2, r3]
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	fa21 f303 	lsr.w	r3, r1, r3
 80016d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_Init+0x68>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_Init+0x6c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_Init+0x70>)
 80016ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_Init+0x74>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f814 	bl	8001720 <HAL_InitTick>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e002      	b.n	8001708 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001702:	f7ff fc89 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	58024400 	.word	0x58024400
 8001714:	0800ffe0 	.word	0x0800ffe0
 8001718:	24000004 	.word	0x24000004
 800171c:	24000000 	.word	0x24000000

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_InitTick+0x60>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e021      	b.n	8001778 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_InitTick+0x64>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_InitTick+0x60>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f001 ffb3 	bl	80036b6 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f001 ff7d 	bl	8003666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x68>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2400000c 	.word	0x2400000c
 8001784:	24000000 	.word	0x24000000
 8001788:	24000008 	.word	0x24000008

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	2400000c 	.word	0x2400000c
 80017b0:	24002574 	.word	0x24002574

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	24002574 	.word	0x24002574

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_Delay+0x40>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2400000c 	.word	0x2400000c

08001810 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetREVID+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	5c001000 	.word	0x5c001000

08001828 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001838:	4904      	ldr	r1, [pc, #16]	; (800184c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	58000400 	.word	0x58000400

08001850 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	609a      	str	r2, [r3, #8]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3360      	adds	r3, #96	; 0x60
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	431a      	orrs	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018ec:	bf00      	nop
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	611a      	str	r2, [r3, #16]
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800192a:	b480      	push	{r7}
 800192c:	b087      	sub	sp, #28
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3360      	adds	r3, #96	; 0x60
 800193a:	461a      	mov	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	431a      	orrs	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]
  }
}
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001986:	b480      	push	{r7}
 8001988:	b087      	sub	sp, #28
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3330      	adds	r3, #48	; 0x30
 8001996:	461a      	mov	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	4413      	add	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	211f      	movs	r1, #31
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	401a      	ands	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	0e9b      	lsrs	r3, r3, #26
 80019be:	f003 011f 	and.w	r1, r3, #31
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f023 0203 	bic.w	r2, r3, #3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b087      	sub	sp, #28
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3314      	adds	r3, #20
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	0e5b      	lsrs	r3, r3, #25
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	4413      	add	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	0d1b      	lsrs	r3, r3, #20
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2107      	movs	r1, #7
 8001a58:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	401a      	ands	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	0d1b      	lsrs	r3, r3, #20
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0318 	and.w	r3, r3, #24
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001aa4:	40d9      	lsrs	r1, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	000fffff 	.word	0x000fffff

08001ac8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 031f 	and.w	r3, r3, #31
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6093      	str	r3, [r2, #8]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	5fffffc0 	.word	0x5fffffc0

08001b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	6fffffc0 	.word	0x6fffffc0

08001b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b88:	d101      	bne.n	8001b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <LL_ADC_Enable+0x24>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	7fffffc0 	.word	0x7fffffc0

08001bc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <LL_ADC_Disable+0x24>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	f043 0202 	orr.w	r2, r3, #2
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	7fffffc0 	.word	0x7fffffc0

08001bec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <LL_ADC_IsEnabled+0x18>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <LL_ADC_IsEnabled+0x1a>
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_IsDisableOngoing+0x18>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_IsDisableOngoing+0x1a>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <LL_ADC_REG_StartConversion+0x24>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	f043 0204 	orr.w	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	7fffffc0 	.word	0x7fffffc0

08001c60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d101      	bne.n	8001c78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e18e      	b.n	8001fe4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d109      	bne.n	8001ce8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff f9b9 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff19 	bl	8001b24 <LL_ADC_IsDeepPowerDownEnabled>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d004      	beq.n	8001d02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff feff 	bl	8001b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff34 	bl	8001b74 <LL_ADC_IsInternalRegulatorEnabled>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d113      	bne.n	8001d3a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff18 	bl	8001b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d1c:	4b9a      	ldr	r3, [pc, #616]	; (8001f88 <HAL_ADC_Init+0x2dc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	4a9a      	ldr	r2, [pc, #616]	; (8001f8c <HAL_ADC_Init+0x2e0>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f9      	bne.n	8001d2e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff18 	bl	8001b74 <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10d      	bne.n	8001d66 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	f043 0210 	orr.w	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff78 	bl	8001c60 <LL_ADC_REG_IsConversionOngoing>
 8001d70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8129 	bne.w	8001fd2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 8125 	bne.w	8001fd2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d90:	f043 0202 	orr.w	r2, r3, #2
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff25 	bl	8001bec <LL_ADC_IsEnabled>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d136      	bne.n	8001e16 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <HAL_ADC_Init+0x2e4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d004      	beq.n	8001dbc <HAL_ADC_Init+0x110>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a77      	ldr	r2, [pc, #476]	; (8001f94 <HAL_ADC_Init+0x2e8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10e      	bne.n	8001dda <HAL_ADC_Init+0x12e>
 8001dbc:	4874      	ldr	r0, [pc, #464]	; (8001f90 <HAL_ADC_Init+0x2e4>)
 8001dbe:	f7ff ff15 	bl	8001bec <LL_ADC_IsEnabled>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4873      	ldr	r0, [pc, #460]	; (8001f94 <HAL_ADC_Init+0x2e8>)
 8001dc6:	f7ff ff11 	bl	8001bec <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4323      	orrs	r3, r4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	e008      	b.n	8001dec <HAL_ADC_Init+0x140>
 8001dda:	486f      	ldr	r0, [pc, #444]	; (8001f98 <HAL_ADC_Init+0x2ec>)
 8001ddc:	f7ff ff06 	bl	8001bec <LL_ADC_IsEnabled>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf0c      	ite	eq
 8001de6:	2301      	moveq	r3, #1
 8001de8:	2300      	movne	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d012      	beq.n	8001e16 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a66      	ldr	r2, [pc, #408]	; (8001f90 <HAL_ADC_Init+0x2e4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d004      	beq.n	8001e04 <HAL_ADC_Init+0x158>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a65      	ldr	r2, [pc, #404]	; (8001f94 <HAL_ADC_Init+0x2e8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_ADC_Init+0x15c>
 8001e04:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_ADC_Init+0x2f0>)
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_Init+0x15e>
 8001e08:	4a65      	ldr	r2, [pc, #404]	; (8001fa0 <HAL_ADC_Init+0x2f4>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7ff fd1d 	bl	8001850 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e16:	f7ff fcfb 	bl	8001810 <HAL_GetREVID>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d914      	bls.n	8001e4e <HAL_ADC_Init+0x1a2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b10      	cmp	r3, #16
 8001e2a:	d110      	bne.n	8001e4e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7d5b      	ldrb	r3, [r3, #21]
 8001e30:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e36:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e3c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001e44:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e46:	f043 030c 	orr.w	r3, r3, #12
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e00d      	b.n	8001e6a <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7d5b      	ldrb	r3, [r3, #21]
 8001e52:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e58:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e5e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7f1b      	ldrb	r3, [r3, #28]
 8001e64:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7f1b      	ldrb	r3, [r3, #28]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d106      	bne.n	8001e80 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	045b      	lsls	r3, r3, #17
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d009      	beq.n	8001e9c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_ADC_Init+0x2f8>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fed3 	bl	8001c60 <LL_ADC_REG_IsConversionOngoing>
 8001eba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fee0 	bl	8001c86 <LL_ADC_INJ_IsConversionOngoing>
 8001ec6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d14a      	bne.n	8001f64 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d147      	bne.n	8001f64 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7d1b      	ldrb	r3, [r3, #20]
 8001ed8:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_ADC_Init+0x2fc>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	69b9      	ldr	r1, [r7, #24]
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d11b      	bne.n	8001f38 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	4b27      	ldr	r3, [pc, #156]	; (8001fac <HAL_ADC_Init+0x300>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f14:	3a01      	subs	r2, #1
 8001f16:	0411      	lsls	r1, r2, #16
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f22:	4311      	orrs	r1, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	e007      	b.n	8001f48 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0201 	bic.w	r2, r2, #1
 8001f46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 ffe4 	bl	8002f2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d121      	bne.n	8001fb0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f023 010f 	bic.w	r1, r3, #15
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
 8001f84:	e01c      	b.n	8001fc0 <HAL_ADC_Init+0x314>
 8001f86:	bf00      	nop
 8001f88:	24000000 	.word	0x24000000
 8001f8c:	053e2d63 	.word	0x053e2d63
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40022100 	.word	0x40022100
 8001f98:	58026000 	.word	0x58026000
 8001f9c:	40022300 	.word	0x40022300
 8001fa0:	58026300 	.word	0x58026300
 8001fa4:	fff0c003 	.word	0xfff0c003
 8001fa8:	ffffbffc 	.word	0xffffbffc
 8001fac:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 020f 	bic.w	r2, r2, #15
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f023 0303 	bic.w	r3, r3, #3
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
 8001fd0:	e007      	b.n	8001fe2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f043 0210 	orr.w	r2, r3, #16
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3724      	adds	r7, #36	; 0x24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a55      	ldr	r2, [pc, #340]	; (8002154 <HAL_ADC_Start_DMA+0x168>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_ADC_Start_DMA+0x20>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_ADC_Start_DMA+0x16c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_ADC_Start_DMA+0x24>
 800200c:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_ADC_Start_DMA+0x170>)
 800200e:	e000      	b.n	8002012 <HAL_ADC_Start_DMA+0x26>
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_ADC_Start_DMA+0x174>)
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fd58 	bl	8001ac8 <LL_ADC_GetMultimode>
 8002018:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fe1e 	bl	8001c60 <LL_ADC_REG_IsConversionOngoing>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 808c 	bne.w	8002144 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_ADC_Start_DMA+0x4e>
 8002036:	2302      	movs	r3, #2
 8002038:	e087      	b.n	800214a <HAL_ADC_Start_DMA+0x15e>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d002      	beq.n	8002054 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b09      	cmp	r3, #9
 8002052:	d170      	bne.n	8002136 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fdf9 	bl	8002c4c <ADC_Enable>
 800205a:	4603      	mov	r3, r0
 800205c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d163      	bne.n	800212c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002068:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_ADC_Start_DMA+0x178>)
 800206a:	4013      	ands	r3, r2
 800206c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a37      	ldr	r2, [pc, #220]	; (8002158 <HAL_ADC_Start_DMA+0x16c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d002      	beq.n	8002084 <HAL_ADC_Start_DMA+0x98>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e000      	b.n	8002086 <HAL_ADC_Start_DMA+0x9a>
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_ADC_Start_DMA+0x168>)
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	4293      	cmp	r3, r2
 800208c:	d002      	beq.n	8002094 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d105      	bne.n	80020a0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f023 0206 	bic.w	r2, r3, #6
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	659a      	str	r2, [r3, #88]	; 0x58
 80020b8:	e002      	b.n	80020c0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	4a28      	ldr	r2, [pc, #160]	; (8002168 <HAL_ADC_Start_DMA+0x17c>)
 80020c6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	4a27      	ldr	r2, [pc, #156]	; (800216c <HAL_ADC_Start_DMA+0x180>)
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d4:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_ADC_Start_DMA+0x184>)
 80020d6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	221c      	movs	r2, #28
 80020de:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0210 	orr.w	r2, r2, #16
 80020f6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	4619      	mov	r1, r3
 8002102:	4610      	mov	r0, r2
 8002104:	f7ff fc6b 	bl	80019de <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3340      	adds	r3, #64	; 0x40
 8002112:	4619      	mov	r1, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f001 fe36 	bl	8003d88 <HAL_DMA_Start_IT>
 800211c:	4603      	mov	r3, r0
 800211e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fd87 	bl	8001c38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800212a:	e00d      	b.n	8002148 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002134:	e008      	b.n	8002148 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002142:	e001      	b.n	8002148 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002144:	2302      	movs	r3, #2
 8002146:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002148:	7dfb      	ldrb	r3, [r7, #23]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40022000 	.word	0x40022000
 8002158:	40022100 	.word	0x40022100
 800215c:	40022300 	.word	0x40022300
 8002160:	58026300 	.word	0x58026300
 8002164:	fffff0fe 	.word	0xfffff0fe
 8002168:	08002e05 	.word	0x08002e05
 800216c:	08002edd 	.word	0x08002edd
 8002170:	08002ef9 	.word	0x08002ef9

08002174 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a87      	ldr	r2, [pc, #540]	; (80023b4 <HAL_ADC_IRQHandler+0x240>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_ADC_IRQHandler+0x30>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a86      	ldr	r2, [pc, #536]	; (80023b8 <HAL_ADC_IRQHandler+0x244>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_IRQHandler+0x34>
 80021a4:	4b85      	ldr	r3, [pc, #532]	; (80023bc <HAL_ADC_IRQHandler+0x248>)
 80021a6:	e000      	b.n	80021aa <HAL_ADC_IRQHandler+0x36>
 80021a8:	4b85      	ldr	r3, [pc, #532]	; (80023c0 <HAL_ADC_IRQHandler+0x24c>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff fc8c 	bl	8001ac8 <LL_ADC_GetMultimode>
 80021b0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d017      	beq.n	80021ec <HAL_ADC_IRQHandler+0x78>
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d012      	beq.n	80021ec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f001 f882 	bl	80032e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2202      	movs	r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_ADC_IRQHandler+0x8c>
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8083 	beq.w	8002312 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07d      	beq.n	8002312 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d105      	bne.n	800222e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002226:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fb94 	bl	8001960 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d062      	beq.n	8002304 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5d      	ldr	r2, [pc, #372]	; (80023b8 <HAL_ADC_IRQHandler+0x244>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d002      	beq.n	800224e <HAL_ADC_IRQHandler+0xda>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e000      	b.n	8002250 <HAL_ADC_IRQHandler+0xdc>
 800224e:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_ADC_IRQHandler+0x240>)
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	4293      	cmp	r3, r2
 8002256:	d008      	beq.n	800226a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d002      	beq.n	800226a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d104      	bne.n	8002274 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	e00c      	b.n	800228e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a4f      	ldr	r2, [pc, #316]	; (80023b8 <HAL_ADC_IRQHandler+0x244>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d002      	beq.n	8002284 <HAL_ADC_IRQHandler+0x110>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	e000      	b.n	8002286 <HAL_ADC_IRQHandler+0x112>
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_ADC_IRQHandler+0x240>)
 8002286:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d135      	bne.n	8002304 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d12e      	bne.n	8002304 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fcd8 	bl	8001c60 <LL_ADC_REG_IsConversionOngoing>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11a      	bne.n	80022ec <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 020c 	bic.w	r2, r2, #12
 80022c4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d112      	bne.n	8002304 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
 80022ea:	e00b      	b.n	8002304 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fe fe0d 	bl	8000f24 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	220c      	movs	r2, #12
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_ADC_IRQHandler+0x1b2>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a0 	beq.w	8002472 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 809a 	beq.w	8002472 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fb52 	bl	8001a04 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002360:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fafa 	bl	8001960 <LL_ADC_REG_IsTriggerSourceSWStart>
 800236c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <HAL_ADC_IRQHandler+0x244>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d002      	beq.n	800237e <HAL_ADC_IRQHandler+0x20a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	e000      	b.n	8002380 <HAL_ADC_IRQHandler+0x20c>
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_ADC_IRQHandler+0x240>)
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	4293      	cmp	r3, r2
 8002386:	d008      	beq.n	800239a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d002      	beq.n	800239a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b07      	cmp	r3, #7
 8002398:	d104      	bne.n	80023a4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	e014      	b.n	80023ce <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a03      	ldr	r2, [pc, #12]	; (80023b8 <HAL_ADC_IRQHandler+0x244>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00a      	beq.n	80023c4 <HAL_ADC_IRQHandler+0x250>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	e008      	b.n	80023c6 <HAL_ADC_IRQHandler+0x252>
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40022100 	.word	0x40022100
 80023bc:	40022300 	.word	0x40022300
 80023c0:	58026300 	.word	0x58026300
 80023c4:	4b84      	ldr	r3, [pc, #528]	; (80025d8 <HAL_ADC_IRQHandler+0x464>)
 80023c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10c      	bne.n	80023ee <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d142      	bne.n	8002464 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d03f      	beq.n	8002464 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d13a      	bne.n	8002464 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d133      	bne.n	8002464 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d12e      	bne.n	8002464 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fc3b 	bl	8001c86 <LL_ADC_INJ_IsConversionOngoing>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d11a      	bne.n	800244c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002424:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d112      	bne.n	8002464 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f043 0201 	orr.w	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54
 800244a:	e00b      	b.n	8002464 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f043 0210 	orr.w	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 ff17 	bl	8003298 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2260      	movs	r2, #96	; 0x60
 8002470:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d011      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x32c>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8b2 	bl	80025fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x35c>
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fefd 	bl	80032c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d012      	beq.n	8002500 <HAL_ADC_IRQHandler+0x38c>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00d      	beq.n	8002500 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 feef 	bl	80032d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d043      	beq.n	8002592 <HAL_ADC_IRQHandler+0x41e>
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d03e      	beq.n	8002592 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800251c:	2301      	movs	r3, #1
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	e021      	b.n	8002566 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <HAL_ADC_IRQHandler+0x464>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_ADC_IRQHandler+0x3c8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a29      	ldr	r2, [pc, #164]	; (80025dc <HAL_ADC_IRQHandler+0x468>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_ADC_IRQHandler+0x3cc>
 800253c:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_ADC_IRQHandler+0x46c>)
 800253e:	e000      	b.n	8002542 <HAL_ADC_IRQHandler+0x3ce>
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_ADC_IRQHandler+0x470>)
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff face 	bl	8001ae4 <LL_ADC_GetMultiDMATransfer>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800254e:	2301      	movs	r3, #1
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e008      	b.n	8002566 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002562:	2301      	movs	r3, #1
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	2b01      	cmp	r3, #1
 800256a:	d10e      	bne.n	800258a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	f043 0202 	orr.w	r2, r3, #2
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f843 	bl	8002610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2210      	movs	r2, #16
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d018      	beq.n	80025ce <HAL_ADC_IRQHandler+0x45a>
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d013      	beq.n	80025ce <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f043 0208 	orr.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fe6f 	bl	80032ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025ce:	bf00      	nop
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40022100 	.word	0x40022100
 80025e0:	40022300 	.word	0x40022300
 80025e4:	58026300 	.word	0x58026300

080025e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b099      	sub	sp, #100	; 0x64
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a99      	ldr	r2, [pc, #612]	; (80028a4 <HAL_ADC_ConfigChannel+0x280>)
 800263e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x2a>
 800264a:	2302      	movs	r3, #2
 800264c:	e2e6      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x5f8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fb00 	bl	8001c60 <LL_ADC_REG_IsConversionOngoing>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	f040 82cb 	bne.w	8002bfe <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002670:	2b00      	cmp	r3, #0
 8002672:	d108      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x62>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2201      	movs	r2, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	e00f      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x82>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	2201      	movs	r2, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	69d1      	ldr	r1, [r2, #28]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	430b      	orrs	r3, r1
 80026b2:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f7ff f960 	bl	8001986 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fac8 	bl	8001c60 <LL_ADC_REG_IsConversionOngoing>
 80026d0:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fad5 	bl	8001c86 <LL_ADC_INJ_IsConversionOngoing>
 80026dc:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 80b3 	bne.w	800284c <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 80af 	bne.w	800284c <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f7ff f995 	bl	8001a2a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002700:	4b69      	ldr	r3, [pc, #420]	; (80028a8 <HAL_ADC_ConfigChannel+0x284>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002708:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800270c:	d10b      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x102>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	e01d      	b.n	8002762 <HAL_ADC_ConfigChannel+0x13e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <HAL_ADC_ConfigChannel+0x128>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	e00a      	b.n	8002762 <HAL_ADC_ConfigChannel+0x13e>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d027      	beq.n	80027bc <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800277a:	f7ff f89d 	bl	80018b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6919      	ldr	r1, [r3, #16]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	7e5b      	ldrb	r3, [r3, #25]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x170>
 800278e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002792:	e000      	b.n	8002796 <HAL_ADC_ConfigChannel+0x172>
 8002794:	2300      	movs	r3, #0
 8002796:	461a      	mov	r2, r3
 8002798:	f7ff f8c7 	bl	800192a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6919      	ldr	r1, [r3, #16]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	7e1b      	ldrb	r3, [r3, #24]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x18e>
 80027ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027b0:	e000      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x190>
 80027b2:	2300      	movs	r3, #0
 80027b4:	461a      	mov	r2, r3
 80027b6:	f7ff f89f 	bl	80018f8 <LL_ADC_SetDataRightShift>
 80027ba:	e047      	b.n	800284c <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027de:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002802:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	429a      	cmp	r2, r3
 8002816:	d107      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002826:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	069b      	lsls	r3, r3, #26
 8002838:	429a      	cmp	r2, r3
 800283a:	d107      	bne.n	800284c <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800284a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f9cb 	bl	8001bec <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 81d9 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6819      	ldr	r1, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff f908 	bl	8001a80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <HAL_ADC_ConfigChannel+0x280>)
 8002876:	4293      	cmp	r3, r2
 8002878:	f040 8101 	bne.w	8002a7e <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x288>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	0e9b      	lsrs	r3, r3, #26
 8002892:	3301      	adds	r3, #1
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2b09      	cmp	r3, #9
 800289a:	bf94      	ite	ls
 800289c:	2301      	movls	r3, #1
 800289e:	2300      	movhi	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e016      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x2ae>
 80028a4:	47ff0000 	.word	0x47ff0000
 80028a8:	5c001000 	.word	0x5c001000
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2b09      	cmp	r3, #9
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d064      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x2ce>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	3301      	adds	r3, #1
 80028ea:	069b      	lsls	r3, r3, #26
 80028ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028f0:	e00e      	b.n	8002910 <HAL_ADC_ConfigChannel+0x2ec>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	3301      	adds	r3, #1
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x30c>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0e9b      	lsrs	r3, r3, #26
 8002922:	3301      	adds	r3, #1
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	e010      	b.n	8002952 <HAL_ADC_ConfigChannel+0x32e>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	ea42 0103 	orr.w	r1, r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x354>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	e011      	b.n	800299c <HAL_ADC_ConfigChannel+0x378>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299c:	430b      	orrs	r3, r1
 800299e:	e069      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x398>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	3301      	adds	r3, #1
 80029b4:	069b      	lsls	r3, r3, #26
 80029b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ba:	e00e      	b.n	80029da <HAL_ADC_ConfigChannel+0x3b6>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	61fb      	str	r3, [r7, #28]
  return result;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	069b      	lsls	r3, r3, #26
 80029d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x3d6>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0e9b      	lsrs	r3, r3, #26
 80029ec:	3301      	adds	r3, #1
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	e010      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x3f8>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	617b      	str	r3, [r7, #20]
  return result;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2101      	movs	r1, #1
 8002a18:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1c:	ea42 0103 	orr.w	r1, r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10d      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x424>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	3301      	adds	r3, #1
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b1e      	subs	r3, #30
 8002a40:	051b      	lsls	r3, r3, #20
 8002a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a46:	e014      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x44e>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	60fb      	str	r3, [r7, #12]
  return result;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b1e      	subs	r3, #30
 8002a6c:	051b      	lsls	r3, r3, #20
 8002a6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a72:	430b      	orrs	r3, r1
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7fe ffd6 	bl	8001a2a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f280 80c4 	bge.w	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a65      	ldr	r2, [pc, #404]	; (8002c24 <HAL_ADC_ConfigChannel+0x600>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x478>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a64      	ldr	r2, [pc, #400]	; (8002c28 <HAL_ADC_ConfigChannel+0x604>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x47c>
 8002a9c:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <HAL_ADC_ConfigChannel+0x608>)
 8002a9e:	e000      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x47e>
 8002aa0:	4b63      	ldr	r3, [pc, #396]	; (8002c30 <HAL_ADC_ConfigChannel+0x60c>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fefa 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 8002aa8:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a5d      	ldr	r2, [pc, #372]	; (8002c24 <HAL_ADC_ConfigChannel+0x600>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_ADC_ConfigChannel+0x49a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a5b      	ldr	r2, [pc, #364]	; (8002c28 <HAL_ADC_ConfigChannel+0x604>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10e      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x4b8>
 8002abe:	4859      	ldr	r0, [pc, #356]	; (8002c24 <HAL_ADC_ConfigChannel+0x600>)
 8002ac0:	f7ff f894 	bl	8001bec <LL_ADC_IsEnabled>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	4858      	ldr	r0, [pc, #352]	; (8002c28 <HAL_ADC_ConfigChannel+0x604>)
 8002ac8:	f7ff f890 	bl	8001bec <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4323      	orrs	r3, r4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e008      	b.n	8002aee <HAL_ADC_ConfigChannel+0x4ca>
 8002adc:	4855      	ldr	r0, [pc, #340]	; (8002c34 <HAL_ADC_ConfigChannel+0x610>)
 8002ade:	f7ff f885 	bl	8001bec <LL_ADC_IsEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d07b      	beq.n	8002bea <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <HAL_ADC_ConfigChannel+0x614>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d12e      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x536>
 8002afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d129      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <HAL_ADC_ConfigChannel+0x610>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d17f      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a43      	ldr	r2, [pc, #268]	; (8002c24 <HAL_ADC_ConfigChannel+0x600>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d004      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x500>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a42      	ldr	r2, [pc, #264]	; (8002c28 <HAL_ADC_ConfigChannel+0x604>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x504>
 8002b24:	4a41      	ldr	r2, [pc, #260]	; (8002c2c <HAL_ADC_ConfigChannel+0x608>)
 8002b26:	e000      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x506>
 8002b28:	4a41      	ldr	r2, [pc, #260]	; (8002c30 <HAL_ADC_ConfigChannel+0x60c>)
 8002b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f7fe fe9f 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b38:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <HAL_ADC_ConfigChannel+0x618>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	099b      	lsrs	r3, r3, #6
 8002b3e:	4a40      	ldr	r2, [pc, #256]	; (8002c40 <HAL_ADC_ConfigChannel+0x61c>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	099b      	lsrs	r3, r3, #6
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b4a:	e002      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f9      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b58:	e05a      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a39      	ldr	r2, [pc, #228]	; (8002c44 <HAL_ADC_ConfigChannel+0x620>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d11e      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x57e>
 8002b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d119      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a30      	ldr	r2, [pc, #192]	; (8002c34 <HAL_ADC_ConfigChannel+0x610>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d14b      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <HAL_ADC_ConfigChannel+0x600>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d004      	beq.n	8002b8c <HAL_ADC_ConfigChannel+0x568>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <HAL_ADC_ConfigChannel+0x604>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x56c>
 8002b8c:	4a27      	ldr	r2, [pc, #156]	; (8002c2c <HAL_ADC_ConfigChannel+0x608>)
 8002b8e:	e000      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x56e>
 8002b90:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <HAL_ADC_ConfigChannel+0x60c>)
 8002b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	f7fe fe6b 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba0:	e036      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_ADC_ConfigChannel+0x624>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d131      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d12c      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_ADC_ConfigChannel+0x610>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d127      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_ADC_ConfigChannel+0x600>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x5b0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_ADC_ConfigChannel+0x604>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x5b4>
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <HAL_ADC_ConfigChannel+0x608>)
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_ConfigChannel+0x5b6>
 8002bd8:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <HAL_ADC_ConfigChannel+0x60c>)
 8002bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f7fe fe47 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
 8002be8:	e012      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bfc:	e008      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3764      	adds	r7, #100	; 0x64
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	40022000 	.word	0x40022000
 8002c28:	40022100 	.word	0x40022100
 8002c2c:	40022300 	.word	0x40022300
 8002c30:	58026300 	.word	0x58026300
 8002c34:	58026000 	.word	0x58026000
 8002c38:	cb840000 	.word	0xcb840000
 8002c3c:	24000000 	.word	0x24000000
 8002c40:	053e2d63 	.word	0x053e2d63
 8002c44:	c7520000 	.word	0xc7520000
 8002c48:	cfb80000 	.word	0xcfb80000

08002c4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe ffc7 	bl	8001bec <LL_ADC_IsEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d167      	bne.n	8002d34 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <ADC_Enable+0xf4>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e053      	b.n	8002d36 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe ff82 	bl	8001b9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c98:	f7fe fd8c 	bl	80017b4 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <ADC_Enable+0xf8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <ADC_Enable+0x66>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <ADC_Enable+0xfc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <ADC_Enable+0x6a>
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <ADC_Enable+0x100>)
 8002cb4:	e000      	b.n	8002cb8 <ADC_Enable+0x6c>
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <ADC_Enable+0x104>)
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe ff05 	bl	8001ac8 <LL_ADC_GetMultimode>
 8002cbe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a20      	ldr	r2, [pc, #128]	; (8002d48 <ADC_Enable+0xfc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d002      	beq.n	8002cd0 <ADC_Enable+0x84>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	e000      	b.n	8002cd2 <ADC_Enable+0x86>
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <ADC_Enable+0xf8>)
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d025      	beq.n	8002d26 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d129      	bne.n	8002d34 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ce0:	e021      	b.n	8002d26 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe ff80 	bl	8001bec <LL_ADC_IsEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe ff50 	bl	8001b9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cfc:	f7fe fd5a 	bl	80017b4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d90d      	bls.n	8002d26 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e007      	b.n	8002d36 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d1d6      	bne.n	8002ce2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	8000003f 	.word	0x8000003f
 8002d44:	40022000 	.word	0x40022000
 8002d48:	40022100 	.word	0x40022100
 8002d4c:	40022300 	.word	0x40022300
 8002d50:	58026300 	.word	0x58026300

08002d54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe ff56 	bl	8001c12 <LL_ADC_IsDisableOngoing>
 8002d66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe ff3d 	bl	8001bec <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d040      	beq.n	8002dfa <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d13d      	bne.n	8002dfa <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 030d 	and.w	r3, r3, #13
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10c      	bne.n	8002da6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe ff17 	bl	8001bc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d9e:	f7fe fd09 	bl	80017b4 <HAL_GetTick>
 8002da2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002da4:	e022      	b.n	8002dec <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e01c      	b.n	8002dfc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dc2:	f7fe fcf7 	bl	80017b4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d90d      	bls.n	8002dec <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de0:	f043 0201 	orr.w	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e3      	bne.n	8002dc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d14b      	bne.n	8002eb6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d021      	beq.n	8002e7c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fd8f 	bl	8001960 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d032      	beq.n	8002eae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d12b      	bne.n	8002eae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d11f      	bne.n	8002eae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f043 0201 	orr.w	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
 8002e7a:	e018      	b.n	8002eae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d111      	bne.n	8002eae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f7fe f838 	bl	8000f24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eb4:	e00e      	b.n	8002ed4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fba4 	bl	8002610 <HAL_ADC_ErrorCallback>
}
 8002ec8:	e004      	b.n	8002ed4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff fb7c 	bl	80025e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	f043 0204 	orr.w	r2, r3, #4
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff fb76 	bl	8002610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a70      	ldr	r2, [pc, #448]	; (80030fc <ADC_ConfigureBoostMode+0x1d0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <ADC_ConfigureBoostMode+0x1c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6f      	ldr	r2, [pc, #444]	; (8003100 <ADC_ConfigureBoostMode+0x1d4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d109      	bne.n	8002f5c <ADC_ConfigureBoostMode+0x30>
 8002f48:	4b6e      	ldr	r3, [pc, #440]	; (8003104 <ADC_ConfigureBoostMode+0x1d8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e008      	b.n	8002f6e <ADC_ConfigureBoostMode+0x42>
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <ADC_ConfigureBoostMode+0x1dc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01a      	beq.n	8002fa8 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002f72:	f005 fbf7 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8002f76:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f80:	d006      	beq.n	8002f90 <ADC_ConfigureBoostMode+0x64>
 8002f82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f86:	d00b      	beq.n	8002fa0 <ADC_ConfigureBoostMode+0x74>
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d000      	beq.n	8002f90 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002f8e:	e05d      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	60fb      	str	r3, [r7, #12]
        break;
 8002f9e:	e055      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	60fb      	str	r3, [r7, #12]
        break;
 8002fa6:	e051      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002fa8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002fac:	f006 fb24 	bl	80095f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fb0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fba:	d02a      	beq.n	8003012 <ADC_ConfigureBoostMode+0xe6>
 8002fbc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002fc0:	d813      	bhi.n	8002fea <ADC_ConfigureBoostMode+0xbe>
 8002fc2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fc6:	d024      	beq.n	8003012 <ADC_ConfigureBoostMode+0xe6>
 8002fc8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fcc:	d806      	bhi.n	8002fdc <ADC_ConfigureBoostMode+0xb0>
 8002fce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fd2:	d01e      	beq.n	8003012 <ADC_ConfigureBoostMode+0xe6>
 8002fd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fd8:	d01b      	beq.n	8003012 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002fda:	e037      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe0:	d017      	beq.n	8003012 <ADC_ConfigureBoostMode+0xe6>
 8002fe2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002fe6:	d014      	beq.n	8003012 <ADC_ConfigureBoostMode+0xe6>
        break;
 8002fe8:	e030      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002fea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002fee:	d021      	beq.n	8003034 <ADC_ConfigureBoostMode+0x108>
 8002ff0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002ff4:	d806      	bhi.n	8003004 <ADC_ConfigureBoostMode+0xd8>
 8002ff6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002ffa:	d013      	beq.n	8003024 <ADC_ConfigureBoostMode+0xf8>
 8002ffc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003000:	d014      	beq.n	800302c <ADC_ConfigureBoostMode+0x100>
        break;
 8003002:	e023      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003004:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003008:	d018      	beq.n	800303c <ADC_ConfigureBoostMode+0x110>
 800300a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800300e:	d019      	beq.n	8003044 <ADC_ConfigureBoostMode+0x118>
        break;
 8003010:	e01c      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	0c9b      	lsrs	r3, r3, #18
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	60fb      	str	r3, [r7, #12]
        break;
 8003022:	e013      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
        break;
 800302a:	e00f      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	60fb      	str	r3, [r7, #12]
        break;
 8003032:	e00b      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	60fb      	str	r3, [r7, #12]
        break;
 800303a:	e007      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	09db      	lsrs	r3, r3, #7
 8003040:	60fb      	str	r3, [r7, #12]
        break;
 8003042:	e003      	b.n	800304c <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	60fb      	str	r3, [r7, #12]
        break;
 800304a:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800304c:	f7fe fbe0 	bl	8001810 <HAL_GetREVID>
 8003050:	4602      	mov	r2, r0
 8003052:	f241 0303 	movw	r3, #4099	; 0x1003
 8003056:	429a      	cmp	r2, r3
 8003058:	d815      	bhi.n	8003086 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4a2b      	ldr	r2, [pc, #172]	; (800310c <ADC_ConfigureBoostMode+0x1e0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d908      	bls.n	8003074 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003070:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003072:	e03e      	b.n	80030f2 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003082:	609a      	str	r2, [r3, #8]
}
 8003084:	e035      	b.n	80030f2 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4a20      	ldr	r2, [pc, #128]	; (8003110 <ADC_ConfigureBoostMode+0x1e4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d808      	bhi.n	80030a6 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	e025      	b.n	80030f2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <ADC_ConfigureBoostMode+0x1e8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d80a      	bhi.n	80030c4 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030c0:	609a      	str	r2, [r3, #8]
}
 80030c2:	e016      	b.n	80030f2 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a14      	ldr	r2, [pc, #80]	; (8003118 <ADC_ConfigureBoostMode+0x1ec>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d80a      	bhi.n	80030e2 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030de:	609a      	str	r2, [r3, #8]
}
 80030e0:	e007      	b.n	80030f2 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80030f0:	609a      	str	r2, [r3, #8]
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000
 8003100:	40022100 	.word	0x40022100
 8003104:	40022300 	.word	0x40022300
 8003108:	58026300 	.word	0x58026300
 800310c:	01312d00 	.word	0x01312d00
 8003110:	005f5e10 	.word	0x005f5e10
 8003114:	00bebc20 	.word	0x00bebc20
 8003118:	017d7840 	.word	0x017d7840

0800311c <LL_ADC_IsEnabled>:
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <LL_ADC_IsEnabled+0x18>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <LL_ADC_IsEnabled+0x1a>
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <LL_ADC_StartCalibration>:
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <LL_ADC_StartCalibration+0x38>)
 8003156:	4013      	ands	r3, r2
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003164:	430a      	orrs	r2, r1
 8003166:	4313      	orrs	r3, r2
 8003168:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	3ffeffc0 	.word	0x3ffeffc0

08003180 <LL_ADC_IsCalibrationOnGoing>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003194:	d101      	bne.n	800319a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_ADC_REG_IsConversionOngoing>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d101      	bne.n	80031c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_ADCEx_Calibration_Start+0x1e>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e04c      	b.n	8003288 <HAL_ADCEx_Calibration_Start+0xb8>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff fdac 	bl	8002d54 <ADC_Disable>
 80031fc:	4603      	mov	r3, r0
 80031fe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d135      	bne.n	8003272 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_ADCEx_Calibration_Start+0xc0>)
 800320c:	4013      	ands	r3, r2
 800320e:	f043 0202 	orr.w	r2, r3, #2
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff90 	bl	8003144 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003224:	e014      	b.n	8003250 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	3301      	adds	r3, #1
 800322a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d90d      	bls.n	8003250 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003238:	f023 0312 	bic.w	r3, r3, #18
 800323c:	f043 0210 	orr.w	r2, r3, #16
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e01b      	b.n	8003288 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff93 	bl	8003180 <LL_ADC_IsCalibrationOnGoing>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e2      	bne.n	8003226 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003264:	f023 0303 	bic.w	r3, r3, #3
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
 8003270:	e005      	b.n	800327e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003286:	7dfb      	ldrb	r3, [r7, #23]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	ffffeefd 	.word	0xffffeefd
 8003294:	25c3f7ff 	.word	0x25c3f7ff

08003298 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b09f      	sub	sp, #124	; 0x7c
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003316:	2302      	movs	r3, #2
 8003318:	e0ba      	b.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5c      	ldr	r2, [pc, #368]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d102      	bne.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800332c:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	e001      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e09d      	b.n	8003490 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff ff26 	bl	80031a8 <LL_ADC_REG_IsConversionOngoing>
 800335c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff20 	bl	80031a8 <LL_ADC_REG_IsConversionOngoing>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d17f      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800336e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003370:	2b00      	cmp	r3, #0
 8003372:	d17c      	bne.n	800346e <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a47      	ldr	r2, [pc, #284]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a46      	ldr	r2, [pc, #280]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003388:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800338a:	e000      	b.n	800338e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800338c:	4b45      	ldr	r3, [pc, #276]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800338e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d039      	beq.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a3a      	ldr	r2, [pc, #232]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a38      	ldr	r2, [pc, #224]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d10e      	bne.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80033be:	4836      	ldr	r0, [pc, #216]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80033c0:	f7ff feac 	bl	800311c <LL_ADC_IsEnabled>
 80033c4:	4604      	mov	r4, r0
 80033c6:	4835      	ldr	r0, [pc, #212]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80033c8:	f7ff fea8 	bl	800311c <LL_ADC_IsEnabled>
 80033cc:	4603      	mov	r3, r0
 80033ce:	4323      	orrs	r3, r4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e008      	b.n	80033ee <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80033dc:	4832      	ldr	r0, [pc, #200]	; (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033de:	f7ff fe9d 	bl	800311c <LL_ADC_IsEnabled>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d047      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	6811      	ldr	r1, [r2, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	6892      	ldr	r2, [r2, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	431a      	orrs	r2, r3
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800340a:	e03a      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800340c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1d      	ldr	r2, [pc, #116]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10e      	bne.n	800344a <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 800342c:	481a      	ldr	r0, [pc, #104]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 800342e:	f7ff fe75 	bl	800311c <LL_ADC_IsEnabled>
 8003432:	4604      	mov	r4, r0
 8003434:	4819      	ldr	r0, [pc, #100]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003436:	f7ff fe71 	bl	800311c <LL_ADC_IsEnabled>
 800343a:	4603      	mov	r3, r0
 800343c:	4323      	orrs	r3, r4
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e008      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x160>
 800344a:	4817      	ldr	r0, [pc, #92]	; (80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800344c:	f7ff fe66 	bl	800311c <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003466:	4013      	ands	r3, r2
 8003468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800346a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800346c:	e009      	b.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003480:	e000      	b.n	8003484 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003482:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800348c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003490:	4618      	mov	r0, r3
 8003492:	377c      	adds	r7, #124	; 0x7c
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}
 8003498:	40022000 	.word	0x40022000
 800349c:	40022100 	.word	0x40022100
 80034a0:	40022300 	.word	0x40022300
 80034a4:	58026300 	.word	0x58026300
 80034a8:	58026000 	.word	0x58026000
 80034ac:	fffff0e0 	.word	0xfffff0e0

080034b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <__NVIC_SetPriorityGrouping+0x40>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034cc:	4013      	ands	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <__NVIC_SetPriorityGrouping+0x44>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <__NVIC_SetPriorityGrouping+0x40>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	05fa0000 	.word	0x05fa0000

080034f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <__NVIC_GetPriorityGrouping+0x18>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0307 	and.w	r3, r3, #7
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800351e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003522:	2b00      	cmp	r3, #0
 8003524:	db0b      	blt.n	800353e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	f003 021f 	and.w	r2, r3, #31
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <__NVIC_EnableIRQ+0x38>)
 800352e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2001      	movs	r0, #1
 8003536:	fa00 f202 	lsl.w	r2, r0, r2
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000e100 	.word	0xe000e100

08003550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	; (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
         );
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800361c:	d301      	bcc.n	8003622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <SysTick_Config+0x40>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362a:	210f      	movs	r1, #15
 800362c:	f04f 30ff 	mov.w	r0, #4294967295
 8003630:	f7ff ff8e 	bl	8003550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <SysTick_Config+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <SysTick_Config+0x40>)
 800363c:	2207      	movs	r2, #7
 800363e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff29 	bl	80034b0 <__NVIC_SetPriorityGrouping>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003674:	f7ff ff40 	bl	80034f8 <__NVIC_GetPriorityGrouping>
 8003678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff90 	bl	80035a4 <NVIC_EncodePriority>
 8003684:	4602      	mov	r2, r0
 8003686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5f 	bl	8003550 <__NVIC_SetPriority>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff33 	bl	8003514 <__NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffa4 	bl	800360c <SysTick_Config>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7fe f86c 	bl	80017b4 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e316      	b.n	8003d16 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a66      	ldr	r2, [pc, #408]	; (8003888 <HAL_DMA_Init+0x1b8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a65      	ldr	r2, [pc, #404]	; (800388c <HAL_DMA_Init+0x1bc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a63      	ldr	r2, [pc, #396]	; (8003890 <HAL_DMA_Init+0x1c0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a62      	ldr	r2, [pc, #392]	; (8003894 <HAL_DMA_Init+0x1c4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_DMA_Init+0x1c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5f      	ldr	r2, [pc, #380]	; (800389c <HAL_DMA_Init+0x1cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_DMA_Init+0x1d0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5c      	ldr	r2, [pc, #368]	; (80038a4 <HAL_DMA_Init+0x1d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5a      	ldr	r2, [pc, #360]	; (80038a8 <HAL_DMA_Init+0x1d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a59      	ldr	r2, [pc, #356]	; (80038ac <HAL_DMA_Init+0x1dc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a57      	ldr	r2, [pc, #348]	; (80038b0 <HAL_DMA_Init+0x1e0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a56      	ldr	r2, [pc, #344]	; (80038b4 <HAL_DMA_Init+0x1e4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_DMA_Init+0x1e8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a53      	ldr	r2, [pc, #332]	; (80038bc <HAL_DMA_Init+0x1ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_DMA_Init+0x1f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Init+0xb8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a50      	ldr	r2, [pc, #320]	; (80038c4 <HAL_DMA_Init+0x1f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_Init+0xbc>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_Init+0xbe>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 813b 	beq.w	8003a0a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a37      	ldr	r2, [pc, #220]	; (8003888 <HAL_DMA_Init+0x1b8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d04a      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a36      	ldr	r2, [pc, #216]	; (800388c <HAL_DMA_Init+0x1bc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d045      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a34      	ldr	r2, [pc, #208]	; (8003890 <HAL_DMA_Init+0x1c0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d040      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a33      	ldr	r2, [pc, #204]	; (8003894 <HAL_DMA_Init+0x1c4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d03b      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a31      	ldr	r2, [pc, #196]	; (8003898 <HAL_DMA_Init+0x1c8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d036      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a30      	ldr	r2, [pc, #192]	; (800389c <HAL_DMA_Init+0x1cc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d031      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a2e      	ldr	r2, [pc, #184]	; (80038a0 <HAL_DMA_Init+0x1d0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d02c      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <HAL_DMA_Init+0x1d4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d027      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2b      	ldr	r2, [pc, #172]	; (80038a8 <HAL_DMA_Init+0x1d8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d022      	beq.n	8003844 <HAL_DMA_Init+0x174>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <HAL_DMA_Init+0x1dc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01d      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <HAL_DMA_Init+0x1e0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d018      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <HAL_DMA_Init+0x1e4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_DMA_Init+0x174>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <HAL_DMA_Init+0x1e8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a24      	ldr	r2, [pc, #144]	; (80038bc <HAL_DMA_Init+0x1ec>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d009      	beq.n	8003844 <HAL_DMA_Init+0x174>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a22      	ldr	r2, [pc, #136]	; (80038c0 <HAL_DMA_Init+0x1f0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d004      	beq.n	8003844 <HAL_DMA_Init+0x174>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_DMA_Init+0x1f4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d108      	bne.n	8003856 <HAL_DMA_Init+0x186>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e007      	b.n	8003866 <HAL_DMA_Init+0x196>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003866:	e02f      	b.n	80038c8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003868:	f7fd ffa4 	bl	80017b4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b05      	cmp	r3, #5
 8003874:	d928      	bls.n	80038c8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e246      	b.n	8003d16 <HAL_DMA_Init+0x646>
 8003888:	40020010 	.word	0x40020010
 800388c:	40020028 	.word	0x40020028
 8003890:	40020040 	.word	0x40020040
 8003894:	40020058 	.word	0x40020058
 8003898:	40020070 	.word	0x40020070
 800389c:	40020088 	.word	0x40020088
 80038a0:	400200a0 	.word	0x400200a0
 80038a4:	400200b8 	.word	0x400200b8
 80038a8:	40020410 	.word	0x40020410
 80038ac:	40020428 	.word	0x40020428
 80038b0:	40020440 	.word	0x40020440
 80038b4:	40020458 	.word	0x40020458
 80038b8:	40020470 	.word	0x40020470
 80038bc:	40020488 	.word	0x40020488
 80038c0:	400204a0 	.word	0x400204a0
 80038c4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1c8      	bne.n	8003868 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4b83      	ldr	r3, [pc, #524]	; (8003af0 <HAL_DMA_Init+0x420>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80038ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003906:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b04      	cmp	r3, #4
 800391a:	d107      	bne.n	800392c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4313      	orrs	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800392c:	4b71      	ldr	r3, [pc, #452]	; (8003af4 <HAL_DMA_Init+0x424>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b71      	ldr	r3, [pc, #452]	; (8003af8 <HAL_DMA_Init+0x428>)
 8003932:	4013      	ands	r3, r2
 8003934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003938:	d328      	bcc.n	800398c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b28      	cmp	r3, #40	; 0x28
 8003940:	d903      	bls.n	800394a <HAL_DMA_Init+0x27a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b2e      	cmp	r3, #46	; 0x2e
 8003948:	d917      	bls.n	800397a <HAL_DMA_Init+0x2aa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b3e      	cmp	r3, #62	; 0x3e
 8003950:	d903      	bls.n	800395a <HAL_DMA_Init+0x28a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b42      	cmp	r3, #66	; 0x42
 8003958:	d90f      	bls.n	800397a <HAL_DMA_Init+0x2aa>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b46      	cmp	r3, #70	; 0x46
 8003960:	d903      	bls.n	800396a <HAL_DMA_Init+0x29a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b48      	cmp	r3, #72	; 0x48
 8003968:	d907      	bls.n	800397a <HAL_DMA_Init+0x2aa>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b4e      	cmp	r3, #78	; 0x4e
 8003970:	d905      	bls.n	800397e <HAL_DMA_Init+0x2ae>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b52      	cmp	r3, #82	; 0x52
 8003978:	d801      	bhi.n	800397e <HAL_DMA_Init+0x2ae>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_DMA_Init+0x2b0>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f023 0307 	bic.w	r3, r3, #7
 80039a2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d117      	bne.n	80039e6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f001 fdcf 	bl	800556c <DMA_CheckFifoParam>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e197      	b.n	8003d16 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f001 fd0a 	bl	8005408 <DMA_CalcBaseAndBitshift>
 80039f4:	4603      	mov	r3, r0
 80039f6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	223f      	movs	r2, #63	; 0x3f
 8003a02:	409a      	lsls	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	e0cd      	b.n	8003ba6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_DMA_Init+0x42c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_DMA_Init+0x430>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d01d      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_DMA_Init+0x434>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a36      	ldr	r2, [pc, #216]	; (8003b08 <HAL_DMA_Init+0x438>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a35      	ldr	r2, [pc, #212]	; (8003b0c <HAL_DMA_Init+0x43c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a33      	ldr	r2, [pc, #204]	; (8003b10 <HAL_DMA_Init+0x440>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <HAL_DMA_Init+0x444>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_Init+0x38a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a30      	ldr	r2, [pc, #192]	; (8003b18 <HAL_DMA_Init+0x448>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_DMA_Init+0x38e>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <HAL_DMA_Init+0x390>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8097 	beq.w	8003b94 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a24      	ldr	r2, [pc, #144]	; (8003afc <HAL_DMA_Init+0x42c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d021      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <HAL_DMA_Init+0x430>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01c      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a21      	ldr	r2, [pc, #132]	; (8003b04 <HAL_DMA_Init+0x434>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d017      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_DMA_Init+0x438>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d012      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <HAL_DMA_Init+0x43c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00d      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <HAL_DMA_Init+0x440>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d008      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_DMA_Init+0x444>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA_Init+0x3e4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_DMA_Init+0x448>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_DMA_Init+0x44c>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d020      	beq.n	8003b20 <HAL_DMA_Init+0x450>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d102      	bne.n	8003aec <HAL_DMA_Init+0x41c>
 8003ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003aea:	e01a      	b.n	8003b22 <HAL_DMA_Init+0x452>
 8003aec:	2300      	movs	r3, #0
 8003aee:	e018      	b.n	8003b22 <HAL_DMA_Init+0x452>
 8003af0:	fe10803f 	.word	0xfe10803f
 8003af4:	5c001000 	.word	0x5c001000
 8003af8:	ffff0000 	.word	0xffff0000
 8003afc:	58025408 	.word	0x58025408
 8003b00:	5802541c 	.word	0x5802541c
 8003b04:	58025430 	.word	0x58025430
 8003b08:	58025444 	.word	0x58025444
 8003b0c:	58025458 	.word	0x58025458
 8003b10:	5802546c 	.word	0x5802546c
 8003b14:	58025480 	.word	0x58025480
 8003b18:	58025494 	.word	0x58025494
 8003b1c:	fffe000f 	.word	0xfffe000f
 8003b20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68d2      	ldr	r2, [r2, #12]
 8003b26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b6e      	ldr	r3, [pc, #440]	; (8003d20 <HAL_DMA_Init+0x650>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	4a6e      	ldr	r2, [pc, #440]	; (8003d24 <HAL_DMA_Init+0x654>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f001 fc45 	bl	8005408 <DMA_CalcBaseAndBitshift>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e008      	b.n	8003ba6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0b7      	b.n	8003d16 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a5f      	ldr	r2, [pc, #380]	; (8003d28 <HAL_DMA_Init+0x658>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d072      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5d      	ldr	r2, [pc, #372]	; (8003d2c <HAL_DMA_Init+0x65c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d06d      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5c      	ldr	r2, [pc, #368]	; (8003d30 <HAL_DMA_Init+0x660>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d068      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5a      	ldr	r2, [pc, #360]	; (8003d34 <HAL_DMA_Init+0x664>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d063      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a59      	ldr	r2, [pc, #356]	; (8003d38 <HAL_DMA_Init+0x668>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d05e      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a57      	ldr	r2, [pc, #348]	; (8003d3c <HAL_DMA_Init+0x66c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d059      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a56      	ldr	r2, [pc, #344]	; (8003d40 <HAL_DMA_Init+0x670>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d054      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a54      	ldr	r2, [pc, #336]	; (8003d44 <HAL_DMA_Init+0x674>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d04f      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a53      	ldr	r2, [pc, #332]	; (8003d48 <HAL_DMA_Init+0x678>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d04a      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a51      	ldr	r2, [pc, #324]	; (8003d4c <HAL_DMA_Init+0x67c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d045      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a50      	ldr	r2, [pc, #320]	; (8003d50 <HAL_DMA_Init+0x680>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d040      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a4e      	ldr	r2, [pc, #312]	; (8003d54 <HAL_DMA_Init+0x684>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d03b      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <HAL_DMA_Init+0x688>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d036      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a4b      	ldr	r2, [pc, #300]	; (8003d5c <HAL_DMA_Init+0x68c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d031      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_DMA_Init+0x690>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d02c      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a48      	ldr	r2, [pc, #288]	; (8003d64 <HAL_DMA_Init+0x694>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d027      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a47      	ldr	r2, [pc, #284]	; (8003d68 <HAL_DMA_Init+0x698>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <HAL_DMA_Init+0x69c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01d      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a44      	ldr	r2, [pc, #272]	; (8003d70 <HAL_DMA_Init+0x6a0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d018      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a42      	ldr	r2, [pc, #264]	; (8003d74 <HAL_DMA_Init+0x6a4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a41      	ldr	r2, [pc, #260]	; (8003d78 <HAL_DMA_Init+0x6a8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00e      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <HAL_DMA_Init+0x6ac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d009      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <HAL_DMA_Init+0x6b0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_DMA_Init+0x5c6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3c      	ldr	r2, [pc, #240]	; (8003d84 <HAL_DMA_Init+0x6b4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_DMA_Init+0x5ca>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_DMA_Init+0x5cc>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d032      	beq.n	8003d06 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f001 fcdf 	bl	8005664 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d102      	bne.n	8003cb4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003cc8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <HAL_DMA_Init+0x624>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d80c      	bhi.n	8003cf4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f001 fd5c 	bl	8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	e008      	b.n	8003d06 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	a7fdabf8 	.word	0xa7fdabf8
 8003d24:	cccccccd 	.word	0xcccccccd
 8003d28:	40020010 	.word	0x40020010
 8003d2c:	40020028 	.word	0x40020028
 8003d30:	40020040 	.word	0x40020040
 8003d34:	40020058 	.word	0x40020058
 8003d38:	40020070 	.word	0x40020070
 8003d3c:	40020088 	.word	0x40020088
 8003d40:	400200a0 	.word	0x400200a0
 8003d44:	400200b8 	.word	0x400200b8
 8003d48:	40020410 	.word	0x40020410
 8003d4c:	40020428 	.word	0x40020428
 8003d50:	40020440 	.word	0x40020440
 8003d54:	40020458 	.word	0x40020458
 8003d58:	40020470 	.word	0x40020470
 8003d5c:	40020488 	.word	0x40020488
 8003d60:	400204a0 	.word	0x400204a0
 8003d64:	400204b8 	.word	0x400204b8
 8003d68:	58025408 	.word	0x58025408
 8003d6c:	5802541c 	.word	0x5802541c
 8003d70:	58025430 	.word	0x58025430
 8003d74:	58025444 	.word	0x58025444
 8003d78:	58025458 	.word	0x58025458
 8003d7c:	5802546c 	.word	0x5802546c
 8003d80:	58025480 	.word	0x58025480
 8003d84:	58025494 	.word	0x58025494

08003d88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e226      	b.n	80041f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_DMA_Start_IT+0x2a>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e21f      	b.n	80041f2 <HAL_DMA_Start_IT+0x46a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	f040 820a 	bne.w	80041dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a68      	ldr	r2, [pc, #416]	; (8003f7c <HAL_DMA_Start_IT+0x1f4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04a      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a66      	ldr	r2, [pc, #408]	; (8003f80 <HAL_DMA_Start_IT+0x1f8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d045      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a65      	ldr	r2, [pc, #404]	; (8003f84 <HAL_DMA_Start_IT+0x1fc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d040      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a63      	ldr	r2, [pc, #396]	; (8003f88 <HAL_DMA_Start_IT+0x200>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d03b      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a62      	ldr	r2, [pc, #392]	; (8003f8c <HAL_DMA_Start_IT+0x204>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d036      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a60      	ldr	r2, [pc, #384]	; (8003f90 <HAL_DMA_Start_IT+0x208>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d031      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a5f      	ldr	r2, [pc, #380]	; (8003f94 <HAL_DMA_Start_IT+0x20c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d02c      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a5d      	ldr	r2, [pc, #372]	; (8003f98 <HAL_DMA_Start_IT+0x210>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d027      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5c      	ldr	r2, [pc, #368]	; (8003f9c <HAL_DMA_Start_IT+0x214>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d022      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5a      	ldr	r2, [pc, #360]	; (8003fa0 <HAL_DMA_Start_IT+0x218>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01d      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a59      	ldr	r2, [pc, #356]	; (8003fa4 <HAL_DMA_Start_IT+0x21c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d018      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a57      	ldr	r2, [pc, #348]	; (8003fa8 <HAL_DMA_Start_IT+0x220>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a56      	ldr	r2, [pc, #344]	; (8003fac <HAL_DMA_Start_IT+0x224>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00e      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a54      	ldr	r2, [pc, #336]	; (8003fb0 <HAL_DMA_Start_IT+0x228>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d009      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a53      	ldr	r2, [pc, #332]	; (8003fb4 <HAL_DMA_Start_IT+0x22c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d004      	beq.n	8003e76 <HAL_DMA_Start_IT+0xee>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a51      	ldr	r2, [pc, #324]	; (8003fb8 <HAL_DMA_Start_IT+0x230>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <HAL_DMA_Start_IT+0x100>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <HAL_DMA_Start_IT+0x110>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f001 f906 	bl	80050b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a34      	ldr	r2, [pc, #208]	; (8003f7c <HAL_DMA_Start_IT+0x1f4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a33      	ldr	r2, [pc, #204]	; (8003f80 <HAL_DMA_Start_IT+0x1f8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a31      	ldr	r2, [pc, #196]	; (8003f84 <HAL_DMA_Start_IT+0x1fc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_DMA_Start_IT+0x200>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2e      	ldr	r2, [pc, #184]	; (8003f8c <HAL_DMA_Start_IT+0x204>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	; (8003f90 <HAL_DMA_Start_IT+0x208>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2b      	ldr	r2, [pc, #172]	; (8003f94 <HAL_DMA_Start_IT+0x20c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <HAL_DMA_Start_IT+0x210>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <HAL_DMA_Start_IT+0x214>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a27      	ldr	r2, [pc, #156]	; (8003fa0 <HAL_DMA_Start_IT+0x218>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <HAL_DMA_Start_IT+0x21c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <HAL_DMA_Start_IT+0x220>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_DMA_Start_IT+0x224>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_DMA_Start_IT+0x228>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_DMA_Start_IT+0x22c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Start_IT+0x1bc>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_DMA_Start_IT+0x230>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Start_IT+0x1c0>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_Start_IT+0x1c2>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d036      	beq.n	8003fbc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 021e 	bic.w	r2, r3, #30
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0216 	orr.w	r2, r2, #22
 8003f60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d03e      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0208 	orr.w	r2, r2, #8
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e035      	b.n	8003fe8 <HAL_DMA_Start_IT+0x260>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 020e 	bic.w	r2, r3, #14
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 020a 	orr.w	r2, r2, #10
 8003fce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0204 	orr.w	r2, r2, #4
 8003fe6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a83      	ldr	r2, [pc, #524]	; (80041fc <HAL_DMA_Start_IT+0x474>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d072      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a82      	ldr	r2, [pc, #520]	; (8004200 <HAL_DMA_Start_IT+0x478>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d06d      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a80      	ldr	r2, [pc, #512]	; (8004204 <HAL_DMA_Start_IT+0x47c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d068      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7f      	ldr	r2, [pc, #508]	; (8004208 <HAL_DMA_Start_IT+0x480>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d063      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7d      	ldr	r2, [pc, #500]	; (800420c <HAL_DMA_Start_IT+0x484>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d05e      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7c      	ldr	r2, [pc, #496]	; (8004210 <HAL_DMA_Start_IT+0x488>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d059      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a7a      	ldr	r2, [pc, #488]	; (8004214 <HAL_DMA_Start_IT+0x48c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d054      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a79      	ldr	r2, [pc, #484]	; (8004218 <HAL_DMA_Start_IT+0x490>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d04f      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_DMA_Start_IT+0x494>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d04a      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a76      	ldr	r2, [pc, #472]	; (8004220 <HAL_DMA_Start_IT+0x498>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d045      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a74      	ldr	r2, [pc, #464]	; (8004224 <HAL_DMA_Start_IT+0x49c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d040      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a73      	ldr	r2, [pc, #460]	; (8004228 <HAL_DMA_Start_IT+0x4a0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d03b      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_DMA_Start_IT+0x4a4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d036      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a70      	ldr	r2, [pc, #448]	; (8004230 <HAL_DMA_Start_IT+0x4a8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d031      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6e      	ldr	r2, [pc, #440]	; (8004234 <HAL_DMA_Start_IT+0x4ac>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d02c      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6d      	ldr	r2, [pc, #436]	; (8004238 <HAL_DMA_Start_IT+0x4b0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d027      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6b      	ldr	r2, [pc, #428]	; (800423c <HAL_DMA_Start_IT+0x4b4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d022      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6a      	ldr	r2, [pc, #424]	; (8004240 <HAL_DMA_Start_IT+0x4b8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d01d      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a68      	ldr	r2, [pc, #416]	; (8004244 <HAL_DMA_Start_IT+0x4bc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d018      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_Start_IT+0x4c0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a65      	ldr	r2, [pc, #404]	; (800424c <HAL_DMA_Start_IT+0x4c4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_DMA_Start_IT+0x4c8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a62      	ldr	r2, [pc, #392]	; (8004254 <HAL_DMA_Start_IT+0x4cc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_DMA_Start_IT+0x350>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_DMA_Start_IT+0x4d0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_DMA_Start_IT+0x354>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <HAL_DMA_Start_IT+0x356>
 80040dc:	2300      	movs	r3, #0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01a      	beq.n	8004118 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d007      	beq.n	8004100 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a37      	ldr	r2, [pc, #220]	; (80041fc <HAL_DMA_Start_IT+0x474>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d04a      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a36      	ldr	r2, [pc, #216]	; (8004200 <HAL_DMA_Start_IT+0x478>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d045      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a34      	ldr	r2, [pc, #208]	; (8004204 <HAL_DMA_Start_IT+0x47c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d040      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a33      	ldr	r2, [pc, #204]	; (8004208 <HAL_DMA_Start_IT+0x480>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d03b      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a31      	ldr	r2, [pc, #196]	; (800420c <HAL_DMA_Start_IT+0x484>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d036      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a30      	ldr	r2, [pc, #192]	; (8004210 <HAL_DMA_Start_IT+0x488>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d031      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a2e      	ldr	r2, [pc, #184]	; (8004214 <HAL_DMA_Start_IT+0x48c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02c      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <HAL_DMA_Start_IT+0x490>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d027      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2b      	ldr	r2, [pc, #172]	; (800421c <HAL_DMA_Start_IT+0x494>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d022      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2a      	ldr	r2, [pc, #168]	; (8004220 <HAL_DMA_Start_IT+0x498>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d01d      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a28      	ldr	r2, [pc, #160]	; (8004224 <HAL_DMA_Start_IT+0x49c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d018      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a27      	ldr	r2, [pc, #156]	; (8004228 <HAL_DMA_Start_IT+0x4a0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d013      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a25      	ldr	r2, [pc, #148]	; (800422c <HAL_DMA_Start_IT+0x4a4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a24      	ldr	r2, [pc, #144]	; (8004230 <HAL_DMA_Start_IT+0x4a8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d009      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <HAL_DMA_Start_IT+0x4ac>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <HAL_DMA_Start_IT+0x430>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a21      	ldr	r2, [pc, #132]	; (8004238 <HAL_DMA_Start_IT+0x4b0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <HAL_DMA_Start_IT+0x442>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	e012      	b.n	80041f0 <HAL_DMA_Start_IT+0x468>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e009      	b.n	80041f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40020010 	.word	0x40020010
 8004200:	40020028 	.word	0x40020028
 8004204:	40020040 	.word	0x40020040
 8004208:	40020058 	.word	0x40020058
 800420c:	40020070 	.word	0x40020070
 8004210:	40020088 	.word	0x40020088
 8004214:	400200a0 	.word	0x400200a0
 8004218:	400200b8 	.word	0x400200b8
 800421c:	40020410 	.word	0x40020410
 8004220:	40020428 	.word	0x40020428
 8004224:	40020440 	.word	0x40020440
 8004228:	40020458 	.word	0x40020458
 800422c:	40020470 	.word	0x40020470
 8004230:	40020488 	.word	0x40020488
 8004234:	400204a0 	.word	0x400204a0
 8004238:	400204b8 	.word	0x400204b8
 800423c:	58025408 	.word	0x58025408
 8004240:	5802541c 	.word	0x5802541c
 8004244:	58025430 	.word	0x58025430
 8004248:	58025444 	.word	0x58025444
 800424c:	58025458 	.word	0x58025458
 8004250:	5802546c 	.word	0x5802546c
 8004254:	58025480 	.word	0x58025480
 8004258:	58025494 	.word	0x58025494

0800425c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004268:	4b67      	ldr	r3, [pc, #412]	; (8004408 <HAL_DMA_IRQHandler+0x1ac>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a67      	ldr	r2, [pc, #412]	; (800440c <HAL_DMA_IRQHandler+0x1b0>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0a9b      	lsrs	r3, r3, #10
 8004274:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004280:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a5f      	ldr	r2, [pc, #380]	; (8004410 <HAL_DMA_IRQHandler+0x1b4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d04a      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a5d      	ldr	r2, [pc, #372]	; (8004414 <HAL_DMA_IRQHandler+0x1b8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d045      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5c      	ldr	r2, [pc, #368]	; (8004418 <HAL_DMA_IRQHandler+0x1bc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d040      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a5a      	ldr	r2, [pc, #360]	; (800441c <HAL_DMA_IRQHandler+0x1c0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d03b      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a59      	ldr	r2, [pc, #356]	; (8004420 <HAL_DMA_IRQHandler+0x1c4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d036      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a57      	ldr	r2, [pc, #348]	; (8004424 <HAL_DMA_IRQHandler+0x1c8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d031      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a56      	ldr	r2, [pc, #344]	; (8004428 <HAL_DMA_IRQHandler+0x1cc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d02c      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a54      	ldr	r2, [pc, #336]	; (800442c <HAL_DMA_IRQHandler+0x1d0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d027      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a53      	ldr	r2, [pc, #332]	; (8004430 <HAL_DMA_IRQHandler+0x1d4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a51      	ldr	r2, [pc, #324]	; (8004434 <HAL_DMA_IRQHandler+0x1d8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d01d      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a50      	ldr	r2, [pc, #320]	; (8004438 <HAL_DMA_IRQHandler+0x1dc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d018      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a4e      	ldr	r2, [pc, #312]	; (800443c <HAL_DMA_IRQHandler+0x1e0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a4d      	ldr	r2, [pc, #308]	; (8004440 <HAL_DMA_IRQHandler+0x1e4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00e      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a4b      	ldr	r2, [pc, #300]	; (8004444 <HAL_DMA_IRQHandler+0x1e8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a4a      	ldr	r2, [pc, #296]	; (8004448 <HAL_DMA_IRQHandler+0x1ec>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_DMA_IRQHandler+0xd2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a48      	ldr	r2, [pc, #288]	; (800444c <HAL_DMA_IRQHandler+0x1f0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_DMA_IRQHandler+0xd6>
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_DMA_IRQHandler+0xd8>
 8004332:	2300      	movs	r3, #0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 842b 	beq.w	8004b90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	2208      	movs	r2, #8
 8004344:	409a      	lsls	r2, r3
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a2 	beq.w	8004494 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a2e      	ldr	r2, [pc, #184]	; (8004410 <HAL_DMA_IRQHandler+0x1b4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d04a      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2d      	ldr	r2, [pc, #180]	; (8004414 <HAL_DMA_IRQHandler+0x1b8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d045      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2b      	ldr	r2, [pc, #172]	; (8004418 <HAL_DMA_IRQHandler+0x1bc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d040      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2a      	ldr	r2, [pc, #168]	; (800441c <HAL_DMA_IRQHandler+0x1c0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d03b      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a28      	ldr	r2, [pc, #160]	; (8004420 <HAL_DMA_IRQHandler+0x1c4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d036      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a27      	ldr	r2, [pc, #156]	; (8004424 <HAL_DMA_IRQHandler+0x1c8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d031      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <HAL_DMA_IRQHandler+0x1cc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02c      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <HAL_DMA_IRQHandler+0x1d0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d027      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a22      	ldr	r2, [pc, #136]	; (8004430 <HAL_DMA_IRQHandler+0x1d4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d022      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a21      	ldr	r2, [pc, #132]	; (8004434 <HAL_DMA_IRQHandler+0x1d8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d01d      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1f      	ldr	r2, [pc, #124]	; (8004438 <HAL_DMA_IRQHandler+0x1dc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d018      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1e      	ldr	r2, [pc, #120]	; (800443c <HAL_DMA_IRQHandler+0x1e0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <HAL_DMA_IRQHandler+0x1e4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00e      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <HAL_DMA_IRQHandler+0x1e8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a19      	ldr	r2, [pc, #100]	; (8004448 <HAL_DMA_IRQHandler+0x1ec>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x194>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_DMA_IRQHandler+0x1f0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d12f      	bne.n	8004450 <HAL_DMA_IRQHandler+0x1f4>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e02e      	b.n	8004464 <HAL_DMA_IRQHandler+0x208>
 8004406:	bf00      	nop
 8004408:	24000000 	.word	0x24000000
 800440c:	1b4e81b5 	.word	0x1b4e81b5
 8004410:	40020010 	.word	0x40020010
 8004414:	40020028 	.word	0x40020028
 8004418:	40020040 	.word	0x40020040
 800441c:	40020058 	.word	0x40020058
 8004420:	40020070 	.word	0x40020070
 8004424:	40020088 	.word	0x40020088
 8004428:	400200a0 	.word	0x400200a0
 800442c:	400200b8 	.word	0x400200b8
 8004430:	40020410 	.word	0x40020410
 8004434:	40020428 	.word	0x40020428
 8004438:	40020440 	.word	0x40020440
 800443c:	40020458 	.word	0x40020458
 8004440:	40020470 	.word	0x40020470
 8004444:	40020488 	.word	0x40020488
 8004448:	400204a0 	.word	0x400204a0
 800444c:	400204b8 	.word	0x400204b8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf14      	ite	ne
 800445e:	2301      	movne	r3, #1
 8004460:	2300      	moveq	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0204 	bic.w	r2, r2, #4
 8004476:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	2208      	movs	r2, #8
 8004482:	409a      	lsls	r2, r3
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d06e      	beq.n	8004588 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a69      	ldr	r2, [pc, #420]	; (8004654 <HAL_DMA_IRQHandler+0x3f8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d04a      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a67      	ldr	r2, [pc, #412]	; (8004658 <HAL_DMA_IRQHandler+0x3fc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d045      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a66      	ldr	r2, [pc, #408]	; (800465c <HAL_DMA_IRQHandler+0x400>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d040      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a64      	ldr	r2, [pc, #400]	; (8004660 <HAL_DMA_IRQHandler+0x404>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d03b      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a63      	ldr	r2, [pc, #396]	; (8004664 <HAL_DMA_IRQHandler+0x408>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d036      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a61      	ldr	r2, [pc, #388]	; (8004668 <HAL_DMA_IRQHandler+0x40c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d031      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a60      	ldr	r2, [pc, #384]	; (800466c <HAL_DMA_IRQHandler+0x410>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d02c      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a5e      	ldr	r2, [pc, #376]	; (8004670 <HAL_DMA_IRQHandler+0x414>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d027      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a5d      	ldr	r2, [pc, #372]	; (8004674 <HAL_DMA_IRQHandler+0x418>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a5b      	ldr	r2, [pc, #364]	; (8004678 <HAL_DMA_IRQHandler+0x41c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a5a      	ldr	r2, [pc, #360]	; (800467c <HAL_DMA_IRQHandler+0x420>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d018      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_DMA_IRQHandler+0x424>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a57      	ldr	r2, [pc, #348]	; (8004684 <HAL_DMA_IRQHandler+0x428>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a55      	ldr	r2, [pc, #340]	; (8004688 <HAL_DMA_IRQHandler+0x42c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a54      	ldr	r2, [pc, #336]	; (800468c <HAL_DMA_IRQHandler+0x430>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_DMA_IRQHandler+0x2ee>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a52      	ldr	r2, [pc, #328]	; (8004690 <HAL_DMA_IRQHandler+0x434>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10a      	bne.n	8004560 <HAL_DMA_IRQHandler+0x304>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e003      	b.n	8004568 <HAL_DMA_IRQHandler+0x30c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00d      	beq.n	8004588 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f043 0202 	orr.w	r2, r3, #2
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2204      	movs	r2, #4
 8004592:	409a      	lsls	r2, r3
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 808f 	beq.w	80046bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <HAL_DMA_IRQHandler+0x3f8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04a      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <HAL_DMA_IRQHandler+0x3fc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d045      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a29      	ldr	r2, [pc, #164]	; (800465c <HAL_DMA_IRQHandler+0x400>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d040      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a27      	ldr	r2, [pc, #156]	; (8004660 <HAL_DMA_IRQHandler+0x404>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d03b      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a26      	ldr	r2, [pc, #152]	; (8004664 <HAL_DMA_IRQHandler+0x408>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d036      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <HAL_DMA_IRQHandler+0x40c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d031      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_DMA_IRQHandler+0x410>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d02c      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a21      	ldr	r2, [pc, #132]	; (8004670 <HAL_DMA_IRQHandler+0x414>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d027      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a20      	ldr	r2, [pc, #128]	; (8004674 <HAL_DMA_IRQHandler+0x418>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <HAL_DMA_IRQHandler+0x41c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01d      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <HAL_DMA_IRQHandler+0x420>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <HAL_DMA_IRQHandler+0x424>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1a      	ldr	r2, [pc, #104]	; (8004684 <HAL_DMA_IRQHandler+0x428>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_DMA_IRQHandler+0x42c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a17      	ldr	r2, [pc, #92]	; (800468c <HAL_DMA_IRQHandler+0x430>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_DMA_IRQHandler+0x3e2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <HAL_DMA_IRQHandler+0x434>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d12a      	bne.n	8004694 <HAL_DMA_IRQHandler+0x438>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e023      	b.n	800469c <HAL_DMA_IRQHandler+0x440>
 8004654:	40020010 	.word	0x40020010
 8004658:	40020028 	.word	0x40020028
 800465c:	40020040 	.word	0x40020040
 8004660:	40020058 	.word	0x40020058
 8004664:	40020070 	.word	0x40020070
 8004668:	40020088 	.word	0x40020088
 800466c:	400200a0 	.word	0x400200a0
 8004670:	400200b8 	.word	0x400200b8
 8004674:	40020410 	.word	0x40020410
 8004678:	40020428 	.word	0x40020428
 800467c:	40020440 	.word	0x40020440
 8004680:	40020458 	.word	0x40020458
 8004684:	40020470 	.word	0x40020470
 8004688:	40020488 	.word	0x40020488
 800468c:	400204a0 	.word	0x400204a0
 8004690:	400204b8 	.word	0x400204b8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	f003 031f 	and.w	r3, r3, #31
 80046a8:	2204      	movs	r2, #4
 80046aa:	409a      	lsls	r2, r3
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	2210      	movs	r2, #16
 80046c6:	409a      	lsls	r2, r3
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80a6 	beq.w	800481e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a85      	ldr	r2, [pc, #532]	; (80048ec <HAL_DMA_IRQHandler+0x690>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d04a      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a83      	ldr	r2, [pc, #524]	; (80048f0 <HAL_DMA_IRQHandler+0x694>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d045      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a82      	ldr	r2, [pc, #520]	; (80048f4 <HAL_DMA_IRQHandler+0x698>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d040      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a80      	ldr	r2, [pc, #512]	; (80048f8 <HAL_DMA_IRQHandler+0x69c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d03b      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7f      	ldr	r2, [pc, #508]	; (80048fc <HAL_DMA_IRQHandler+0x6a0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d036      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a7d      	ldr	r2, [pc, #500]	; (8004900 <HAL_DMA_IRQHandler+0x6a4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d031      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7c      	ldr	r2, [pc, #496]	; (8004904 <HAL_DMA_IRQHandler+0x6a8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d02c      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a7a      	ldr	r2, [pc, #488]	; (8004908 <HAL_DMA_IRQHandler+0x6ac>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d027      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a79      	ldr	r2, [pc, #484]	; (800490c <HAL_DMA_IRQHandler+0x6b0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d022      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a77      	ldr	r2, [pc, #476]	; (8004910 <HAL_DMA_IRQHandler+0x6b4>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01d      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a76      	ldr	r2, [pc, #472]	; (8004914 <HAL_DMA_IRQHandler+0x6b8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d018      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a74      	ldr	r2, [pc, #464]	; (8004918 <HAL_DMA_IRQHandler+0x6bc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d013      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a73      	ldr	r2, [pc, #460]	; (800491c <HAL_DMA_IRQHandler+0x6c0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00e      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a71      	ldr	r2, [pc, #452]	; (8004920 <HAL_DMA_IRQHandler+0x6c4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d009      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a70      	ldr	r2, [pc, #448]	; (8004924 <HAL_DMA_IRQHandler+0x6c8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d004      	beq.n	8004772 <HAL_DMA_IRQHandler+0x516>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a6e      	ldr	r2, [pc, #440]	; (8004928 <HAL_DMA_IRQHandler+0x6cc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d10a      	bne.n	8004788 <HAL_DMA_IRQHandler+0x52c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e009      	b.n	800479c <HAL_DMA_IRQHandler+0x540>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	bf14      	ite	ne
 8004796:	2301      	movne	r3, #1
 8004798:	2300      	moveq	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d03e      	beq.n	800481e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2210      	movs	r2, #16
 80047aa:	409a      	lsls	r2, r3
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d018      	beq.n	80047f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d108      	bne.n	80047de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d024      	beq.n	800481e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
 80047dc:	e01f      	b.n	800481e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01b      	beq.n	800481e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
 80047ee:	e016      	b.n	800481e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0208 	bic.w	r2, r2, #8
 800480c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2220      	movs	r2, #32
 8004828:	409a      	lsls	r2, r3
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8110 	beq.w	8004a54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <HAL_DMA_IRQHandler+0x690>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d04a      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <HAL_DMA_IRQHandler+0x694>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d045      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a29      	ldr	r2, [pc, #164]	; (80048f4 <HAL_DMA_IRQHandler+0x698>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d040      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a28      	ldr	r2, [pc, #160]	; (80048f8 <HAL_DMA_IRQHandler+0x69c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d03b      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <HAL_DMA_IRQHandler+0x6a0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d036      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a25      	ldr	r2, [pc, #148]	; (8004900 <HAL_DMA_IRQHandler+0x6a4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d031      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a23      	ldr	r2, [pc, #140]	; (8004904 <HAL_DMA_IRQHandler+0x6a8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d02c      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a22      	ldr	r2, [pc, #136]	; (8004908 <HAL_DMA_IRQHandler+0x6ac>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d027      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a20      	ldr	r2, [pc, #128]	; (800490c <HAL_DMA_IRQHandler+0x6b0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d022      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_DMA_IRQHandler+0x6b4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d01d      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <HAL_DMA_IRQHandler+0x6b8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <HAL_DMA_IRQHandler+0x6bc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_DMA_IRQHandler+0x6c0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a19      	ldr	r2, [pc, #100]	; (8004920 <HAL_DMA_IRQHandler+0x6c4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a17      	ldr	r2, [pc, #92]	; (8004924 <HAL_DMA_IRQHandler+0x6c8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x678>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a16      	ldr	r2, [pc, #88]	; (8004928 <HAL_DMA_IRQHandler+0x6cc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d12b      	bne.n	800492c <HAL_DMA_IRQHandler+0x6d0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e02a      	b.n	8004940 <HAL_DMA_IRQHandler+0x6e4>
 80048ea:	bf00      	nop
 80048ec:	40020010 	.word	0x40020010
 80048f0:	40020028 	.word	0x40020028
 80048f4:	40020040 	.word	0x40020040
 80048f8:	40020058 	.word	0x40020058
 80048fc:	40020070 	.word	0x40020070
 8004900:	40020088 	.word	0x40020088
 8004904:	400200a0 	.word	0x400200a0
 8004908:	400200b8 	.word	0x400200b8
 800490c:	40020410 	.word	0x40020410
 8004910:	40020428 	.word	0x40020428
 8004914:	40020440 	.word	0x40020440
 8004918:	40020458 	.word	0x40020458
 800491c:	40020470 	.word	0x40020470
 8004920:	40020488 	.word	0x40020488
 8004924:	400204a0 	.word	0x400204a0
 8004928:	400204b8 	.word	0x400204b8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8087 	beq.w	8004a54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	2220      	movs	r2, #32
 8004950:	409a      	lsls	r2, r3
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b04      	cmp	r3, #4
 8004960:	d139      	bne.n	80049d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f022 0216 	bic.w	r2, r2, #22
 8004970:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004980:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d103      	bne.n	8004992 <HAL_DMA_IRQHandler+0x736>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0208 	bic.w	r2, r2, #8
 80049a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	223f      	movs	r2, #63	; 0x3f
 80049ac:	409a      	lsls	r2, r3
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 834a 	beq.w	8005060 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
          }
          return;
 80049d4:	e344      	b.n	8005060 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d018      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02c      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	4798      	blx	r3
 8004a02:	e027      	b.n	8004a54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d023      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
 8004a14:	e01e      	b.n	8004a54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10f      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0210 	bic.w	r2, r2, #16
 8004a32:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8306 	beq.w	800506a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 8088 	beq.w	8004b7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a7a      	ldr	r2, [pc, #488]	; (8004c64 <HAL_DMA_IRQHandler+0xa08>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d04a      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a79      	ldr	r2, [pc, #484]	; (8004c68 <HAL_DMA_IRQHandler+0xa0c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d045      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a77      	ldr	r2, [pc, #476]	; (8004c6c <HAL_DMA_IRQHandler+0xa10>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d040      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a76      	ldr	r2, [pc, #472]	; (8004c70 <HAL_DMA_IRQHandler+0xa14>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d03b      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a74      	ldr	r2, [pc, #464]	; (8004c74 <HAL_DMA_IRQHandler+0xa18>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d036      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a73      	ldr	r2, [pc, #460]	; (8004c78 <HAL_DMA_IRQHandler+0xa1c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d031      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a71      	ldr	r2, [pc, #452]	; (8004c7c <HAL_DMA_IRQHandler+0xa20>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02c      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a70      	ldr	r2, [pc, #448]	; (8004c80 <HAL_DMA_IRQHandler+0xa24>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d027      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a6e      	ldr	r2, [pc, #440]	; (8004c84 <HAL_DMA_IRQHandler+0xa28>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d022      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a6d      	ldr	r2, [pc, #436]	; (8004c88 <HAL_DMA_IRQHandler+0xa2c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d01d      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a6b      	ldr	r2, [pc, #428]	; (8004c8c <HAL_DMA_IRQHandler+0xa30>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a6a      	ldr	r2, [pc, #424]	; (8004c90 <HAL_DMA_IRQHandler+0xa34>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a68      	ldr	r2, [pc, #416]	; (8004c94 <HAL_DMA_IRQHandler+0xa38>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <HAL_DMA_IRQHandler+0xa3c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a65      	ldr	r2, [pc, #404]	; (8004c9c <HAL_DMA_IRQHandler+0xa40>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x8b8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a64      	ldr	r2, [pc, #400]	; (8004ca0 <HAL_DMA_IRQHandler+0xa44>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d108      	bne.n	8004b26 <HAL_DMA_IRQHandler+0x8ca>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e007      	b.n	8004b36 <HAL_DMA_IRQHandler+0x8da>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d307      	bcc.n	8004b52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f2      	bne.n	8004b36 <HAL_DMA_IRQHandler+0x8da>
 8004b50:	e000      	b.n	8004b54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b52:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d004      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004b72:	e003      	b.n	8004b7c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8272 	beq.w	800506a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	4798      	blx	r3
 8004b8e:	e26c      	b.n	800506a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a43      	ldr	r2, [pc, #268]	; (8004ca4 <HAL_DMA_IRQHandler+0xa48>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d022      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x984>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a42      	ldr	r2, [pc, #264]	; (8004ca8 <HAL_DMA_IRQHandler+0xa4c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d01d      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x984>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a40      	ldr	r2, [pc, #256]	; (8004cac <HAL_DMA_IRQHandler+0xa50>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d018      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x984>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a3f      	ldr	r2, [pc, #252]	; (8004cb0 <HAL_DMA_IRQHandler+0xa54>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d013      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x984>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a3d      	ldr	r2, [pc, #244]	; (8004cb4 <HAL_DMA_IRQHandler+0xa58>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00e      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x984>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a3c      	ldr	r2, [pc, #240]	; (8004cb8 <HAL_DMA_IRQHandler+0xa5c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d009      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x984>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3a      	ldr	r2, [pc, #232]	; (8004cbc <HAL_DMA_IRQHandler+0xa60>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d004      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x984>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a39      	ldr	r2, [pc, #228]	; (8004cc0 <HAL_DMA_IRQHandler+0xa64>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d101      	bne.n	8004be4 <HAL_DMA_IRQHandler+0x988>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_DMA_IRQHandler+0x98a>
 8004be4:	2300      	movs	r3, #0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 823f 	beq.w	800506a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	409a      	lsls	r2, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80cd 	beq.w	8004da4 <HAL_DMA_IRQHandler+0xb48>
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80c7 	beq.w	8004da4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2204      	movs	r2, #4
 8004c20:	409a      	lsls	r2, r3
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d049      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8210 	beq.w	8005064 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c4c:	e20a      	b.n	8005064 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8206 	beq.w	8005064 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c60:	e200      	b.n	8005064 <HAL_DMA_IRQHandler+0xe08>
 8004c62:	bf00      	nop
 8004c64:	40020010 	.word	0x40020010
 8004c68:	40020028 	.word	0x40020028
 8004c6c:	40020040 	.word	0x40020040
 8004c70:	40020058 	.word	0x40020058
 8004c74:	40020070 	.word	0x40020070
 8004c78:	40020088 	.word	0x40020088
 8004c7c:	400200a0 	.word	0x400200a0
 8004c80:	400200b8 	.word	0x400200b8
 8004c84:	40020410 	.word	0x40020410
 8004c88:	40020428 	.word	0x40020428
 8004c8c:	40020440 	.word	0x40020440
 8004c90:	40020458 	.word	0x40020458
 8004c94:	40020470 	.word	0x40020470
 8004c98:	40020488 	.word	0x40020488
 8004c9c:	400204a0 	.word	0x400204a0
 8004ca0:	400204b8 	.word	0x400204b8
 8004ca4:	58025408 	.word	0x58025408
 8004ca8:	5802541c 	.word	0x5802541c
 8004cac:	58025430 	.word	0x58025430
 8004cb0:	58025444 	.word	0x58025444
 8004cb4:	58025458 	.word	0x58025458
 8004cb8:	5802546c 	.word	0x5802546c
 8004cbc:	58025480 	.word	0x58025480
 8004cc0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d160      	bne.n	8004d90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a8c      	ldr	r2, [pc, #560]	; (8004f04 <HAL_DMA_IRQHandler+0xca8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d04a      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a8a      	ldr	r2, [pc, #552]	; (8004f08 <HAL_DMA_IRQHandler+0xcac>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d045      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a89      	ldr	r2, [pc, #548]	; (8004f0c <HAL_DMA_IRQHandler+0xcb0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d040      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a87      	ldr	r2, [pc, #540]	; (8004f10 <HAL_DMA_IRQHandler+0xcb4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d03b      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a86      	ldr	r2, [pc, #536]	; (8004f14 <HAL_DMA_IRQHandler+0xcb8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d036      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a84      	ldr	r2, [pc, #528]	; (8004f18 <HAL_DMA_IRQHandler+0xcbc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d031      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a83      	ldr	r2, [pc, #524]	; (8004f1c <HAL_DMA_IRQHandler+0xcc0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d02c      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a81      	ldr	r2, [pc, #516]	; (8004f20 <HAL_DMA_IRQHandler+0xcc4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d027      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a80      	ldr	r2, [pc, #512]	; (8004f24 <HAL_DMA_IRQHandler+0xcc8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d022      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a7e      	ldr	r2, [pc, #504]	; (8004f28 <HAL_DMA_IRQHandler+0xccc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01d      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7d      	ldr	r2, [pc, #500]	; (8004f2c <HAL_DMA_IRQHandler+0xcd0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d018      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a7b      	ldr	r2, [pc, #492]	; (8004f30 <HAL_DMA_IRQHandler+0xcd4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a7a      	ldr	r2, [pc, #488]	; (8004f34 <HAL_DMA_IRQHandler+0xcd8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a78      	ldr	r2, [pc, #480]	; (8004f38 <HAL_DMA_IRQHandler+0xcdc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a77      	ldr	r2, [pc, #476]	; (8004f3c <HAL_DMA_IRQHandler+0xce0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xb12>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a75      	ldr	r2, [pc, #468]	; (8004f40 <HAL_DMA_IRQHandler+0xce4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <HAL_DMA_IRQHandler+0xb24>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0208 	bic.w	r2, r2, #8
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e007      	b.n	8004d90 <HAL_DMA_IRQHandler+0xb34>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0204 	bic.w	r2, r2, #4
 8004d8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8165 	beq.w	8005064 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da2:	e15f      	b.n	8005064 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	2202      	movs	r2, #2
 8004dae:	409a      	lsls	r2, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80c5 	beq.w	8004f44 <HAL_DMA_IRQHandler+0xce8>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80bf 	beq.w	8004f44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2202      	movs	r2, #2
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 813a 	beq.w	8005068 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dfc:	e134      	b.n	8005068 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8130 	beq.w	8005068 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e10:	e12a      	b.n	8005068 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d168      	bne.n	8004eee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a38      	ldr	r2, [pc, #224]	; (8004f04 <HAL_DMA_IRQHandler+0xca8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d04a      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a37      	ldr	r2, [pc, #220]	; (8004f08 <HAL_DMA_IRQHandler+0xcac>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d045      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <HAL_DMA_IRQHandler+0xcb0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d040      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a34      	ldr	r2, [pc, #208]	; (8004f10 <HAL_DMA_IRQHandler+0xcb4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d03b      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <HAL_DMA_IRQHandler+0xcb8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d036      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a31      	ldr	r2, [pc, #196]	; (8004f18 <HAL_DMA_IRQHandler+0xcbc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d031      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	; (8004f1c <HAL_DMA_IRQHandler+0xcc0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d02c      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2e      	ldr	r2, [pc, #184]	; (8004f20 <HAL_DMA_IRQHandler+0xcc4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d027      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a2c      	ldr	r2, [pc, #176]	; (8004f24 <HAL_DMA_IRQHandler+0xcc8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d022      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a2b      	ldr	r2, [pc, #172]	; (8004f28 <HAL_DMA_IRQHandler+0xccc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d01d      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <HAL_DMA_IRQHandler+0xcd0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d018      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <HAL_DMA_IRQHandler+0xcd4>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d013      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a26      	ldr	r2, [pc, #152]	; (8004f34 <HAL_DMA_IRQHandler+0xcd8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00e      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a25      	ldr	r2, [pc, #148]	; (8004f38 <HAL_DMA_IRQHandler+0xcdc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a23      	ldr	r2, [pc, #140]	; (8004f3c <HAL_DMA_IRQHandler+0xce0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <HAL_DMA_IRQHandler+0xc60>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <HAL_DMA_IRQHandler+0xce4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <HAL_DMA_IRQHandler+0xc72>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0214 	bic.w	r2, r2, #20
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	e007      	b.n	8004ede <HAL_DMA_IRQHandler+0xc82>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 020a 	bic.w	r2, r2, #10
 8004edc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80b8 	beq.w	8005068 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f00:	e0b2      	b.n	8005068 <HAL_DMA_IRQHandler+0xe0c>
 8004f02:	bf00      	nop
 8004f04:	40020010 	.word	0x40020010
 8004f08:	40020028 	.word	0x40020028
 8004f0c:	40020040 	.word	0x40020040
 8004f10:	40020058 	.word	0x40020058
 8004f14:	40020070 	.word	0x40020070
 8004f18:	40020088 	.word	0x40020088
 8004f1c:	400200a0 	.word	0x400200a0
 8004f20:	400200b8 	.word	0x400200b8
 8004f24:	40020410 	.word	0x40020410
 8004f28:	40020428 	.word	0x40020428
 8004f2c:	40020440 	.word	0x40020440
 8004f30:	40020458 	.word	0x40020458
 8004f34:	40020470 	.word	0x40020470
 8004f38:	40020488 	.word	0x40020488
 8004f3c:	400204a0 	.word	0x400204a0
 8004f40:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8088 	beq.w	800506a <HAL_DMA_IRQHandler+0xe0e>
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8082 	beq.w	800506a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a41      	ldr	r2, [pc, #260]	; (8005070 <HAL_DMA_IRQHandler+0xe14>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d04a      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a3f      	ldr	r2, [pc, #252]	; (8005074 <HAL_DMA_IRQHandler+0xe18>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d045      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a3e      	ldr	r2, [pc, #248]	; (8005078 <HAL_DMA_IRQHandler+0xe1c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d040      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3c      	ldr	r2, [pc, #240]	; (800507c <HAL_DMA_IRQHandler+0xe20>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d03b      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a3b      	ldr	r2, [pc, #236]	; (8005080 <HAL_DMA_IRQHandler+0xe24>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d036      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a39      	ldr	r2, [pc, #228]	; (8005084 <HAL_DMA_IRQHandler+0xe28>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d031      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a38      	ldr	r2, [pc, #224]	; (8005088 <HAL_DMA_IRQHandler+0xe2c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d02c      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a36      	ldr	r2, [pc, #216]	; (800508c <HAL_DMA_IRQHandler+0xe30>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d027      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a35      	ldr	r2, [pc, #212]	; (8005090 <HAL_DMA_IRQHandler+0xe34>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d022      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a33      	ldr	r2, [pc, #204]	; (8005094 <HAL_DMA_IRQHandler+0xe38>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01d      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a32      	ldr	r2, [pc, #200]	; (8005098 <HAL_DMA_IRQHandler+0xe3c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d018      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a30      	ldr	r2, [pc, #192]	; (800509c <HAL_DMA_IRQHandler+0xe40>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2f      	ldr	r2, [pc, #188]	; (80050a0 <HAL_DMA_IRQHandler+0xe44>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00e      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a2d      	ldr	r2, [pc, #180]	; (80050a4 <HAL_DMA_IRQHandler+0xe48>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <HAL_DMA_IRQHandler+0xe4c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_DMA_IRQHandler+0xdaa>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a2a      	ldr	r2, [pc, #168]	; (80050ac <HAL_DMA_IRQHandler+0xe50>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <HAL_DMA_IRQHandler+0xdbc>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 021c 	bic.w	r2, r2, #28
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e007      	b.n	8005028 <HAL_DMA_IRQHandler+0xdcc>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 020e 	bic.w	r2, r2, #14
 8005026:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2201      	movs	r2, #1
 8005032:	409a      	lsls	r2, r3
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	e004      	b.n	800506a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005060:	bf00      	nop
 8005062:	e002      	b.n	800506a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005064:	bf00      	nop
 8005066:	e000      	b.n	800506a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005068:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800506a:	3728      	adds	r7, #40	; 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8

080050b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a84      	ldr	r2, [pc, #528]	; (80052e0 <DMA_SetConfig+0x230>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d072      	beq.n	80051ba <DMA_SetConfig+0x10a>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a82      	ldr	r2, [pc, #520]	; (80052e4 <DMA_SetConfig+0x234>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d06d      	beq.n	80051ba <DMA_SetConfig+0x10a>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a81      	ldr	r2, [pc, #516]	; (80052e8 <DMA_SetConfig+0x238>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d068      	beq.n	80051ba <DMA_SetConfig+0x10a>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a7f      	ldr	r2, [pc, #508]	; (80052ec <DMA_SetConfig+0x23c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d063      	beq.n	80051ba <DMA_SetConfig+0x10a>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a7e      	ldr	r2, [pc, #504]	; (80052f0 <DMA_SetConfig+0x240>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d05e      	beq.n	80051ba <DMA_SetConfig+0x10a>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a7c      	ldr	r2, [pc, #496]	; (80052f4 <DMA_SetConfig+0x244>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d059      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7b      	ldr	r2, [pc, #492]	; (80052f8 <DMA_SetConfig+0x248>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d054      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a79      	ldr	r2, [pc, #484]	; (80052fc <DMA_SetConfig+0x24c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d04f      	beq.n	80051ba <DMA_SetConfig+0x10a>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a78      	ldr	r2, [pc, #480]	; (8005300 <DMA_SetConfig+0x250>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d04a      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a76      	ldr	r2, [pc, #472]	; (8005304 <DMA_SetConfig+0x254>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d045      	beq.n	80051ba <DMA_SetConfig+0x10a>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a75      	ldr	r2, [pc, #468]	; (8005308 <DMA_SetConfig+0x258>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d040      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a73      	ldr	r2, [pc, #460]	; (800530c <DMA_SetConfig+0x25c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d03b      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a72      	ldr	r2, [pc, #456]	; (8005310 <DMA_SetConfig+0x260>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d036      	beq.n	80051ba <DMA_SetConfig+0x10a>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a70      	ldr	r2, [pc, #448]	; (8005314 <DMA_SetConfig+0x264>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d031      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a6f      	ldr	r2, [pc, #444]	; (8005318 <DMA_SetConfig+0x268>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d02c      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a6d      	ldr	r2, [pc, #436]	; (800531c <DMA_SetConfig+0x26c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d027      	beq.n	80051ba <DMA_SetConfig+0x10a>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a6c      	ldr	r2, [pc, #432]	; (8005320 <DMA_SetConfig+0x270>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d022      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a6a      	ldr	r2, [pc, #424]	; (8005324 <DMA_SetConfig+0x274>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <DMA_SetConfig+0x10a>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a69      	ldr	r2, [pc, #420]	; (8005328 <DMA_SetConfig+0x278>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d018      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a67      	ldr	r2, [pc, #412]	; (800532c <DMA_SetConfig+0x27c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <DMA_SetConfig+0x10a>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a66      	ldr	r2, [pc, #408]	; (8005330 <DMA_SetConfig+0x280>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <DMA_SetConfig+0x10a>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a64      	ldr	r2, [pc, #400]	; (8005334 <DMA_SetConfig+0x284>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <DMA_SetConfig+0x10a>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a63      	ldr	r2, [pc, #396]	; (8005338 <DMA_SetConfig+0x288>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <DMA_SetConfig+0x10a>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a61      	ldr	r2, [pc, #388]	; (800533c <DMA_SetConfig+0x28c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <DMA_SetConfig+0x10e>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <DMA_SetConfig+0x110>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3e      	ldr	r2, [pc, #248]	; (80052e0 <DMA_SetConfig+0x230>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d04a      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3d      	ldr	r2, [pc, #244]	; (80052e4 <DMA_SetConfig+0x234>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d045      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a3b      	ldr	r2, [pc, #236]	; (80052e8 <DMA_SetConfig+0x238>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d040      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a3a      	ldr	r2, [pc, #232]	; (80052ec <DMA_SetConfig+0x23c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d03b      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a38      	ldr	r2, [pc, #224]	; (80052f0 <DMA_SetConfig+0x240>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d036      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a37      	ldr	r2, [pc, #220]	; (80052f4 <DMA_SetConfig+0x244>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d031      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a35      	ldr	r2, [pc, #212]	; (80052f8 <DMA_SetConfig+0x248>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d02c      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a34      	ldr	r2, [pc, #208]	; (80052fc <DMA_SetConfig+0x24c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d027      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a32      	ldr	r2, [pc, #200]	; (8005300 <DMA_SetConfig+0x250>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d022      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a31      	ldr	r2, [pc, #196]	; (8005304 <DMA_SetConfig+0x254>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d01d      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2f      	ldr	r2, [pc, #188]	; (8005308 <DMA_SetConfig+0x258>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d018      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2e      	ldr	r2, [pc, #184]	; (800530c <DMA_SetConfig+0x25c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2c      	ldr	r2, [pc, #176]	; (8005310 <DMA_SetConfig+0x260>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00e      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2b      	ldr	r2, [pc, #172]	; (8005314 <DMA_SetConfig+0x264>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d009      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a29      	ldr	r2, [pc, #164]	; (8005318 <DMA_SetConfig+0x268>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <DMA_SetConfig+0x1d0>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a28      	ldr	r2, [pc, #160]	; (800531c <DMA_SetConfig+0x26c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <DMA_SetConfig+0x1d4>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <DMA_SetConfig+0x1d6>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d05a      	beq.n	8005340 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	223f      	movs	r2, #63	; 0x3f
 8005294:	409a      	lsls	r2, r3
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d108      	bne.n	80052cc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052ca:	e087      	b.n	80053dc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
}
 80052dc:	e07e      	b.n	80053dc <DMA_SetConfig+0x32c>
 80052de:	bf00      	nop
 80052e0:	40020010 	.word	0x40020010
 80052e4:	40020028 	.word	0x40020028
 80052e8:	40020040 	.word	0x40020040
 80052ec:	40020058 	.word	0x40020058
 80052f0:	40020070 	.word	0x40020070
 80052f4:	40020088 	.word	0x40020088
 80052f8:	400200a0 	.word	0x400200a0
 80052fc:	400200b8 	.word	0x400200b8
 8005300:	40020410 	.word	0x40020410
 8005304:	40020428 	.word	0x40020428
 8005308:	40020440 	.word	0x40020440
 800530c:	40020458 	.word	0x40020458
 8005310:	40020470 	.word	0x40020470
 8005314:	40020488 	.word	0x40020488
 8005318:	400204a0 	.word	0x400204a0
 800531c:	400204b8 	.word	0x400204b8
 8005320:	58025408 	.word	0x58025408
 8005324:	5802541c 	.word	0x5802541c
 8005328:	58025430 	.word	0x58025430
 800532c:	58025444 	.word	0x58025444
 8005330:	58025458 	.word	0x58025458
 8005334:	5802546c 	.word	0x5802546c
 8005338:	58025480 	.word	0x58025480
 800533c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <DMA_SetConfig+0x338>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d022      	beq.n	8005390 <DMA_SetConfig+0x2e0>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a27      	ldr	r2, [pc, #156]	; (80053ec <DMA_SetConfig+0x33c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d01d      	beq.n	8005390 <DMA_SetConfig+0x2e0>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <DMA_SetConfig+0x340>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d018      	beq.n	8005390 <DMA_SetConfig+0x2e0>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <DMA_SetConfig+0x344>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d013      	beq.n	8005390 <DMA_SetConfig+0x2e0>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <DMA_SetConfig+0x348>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <DMA_SetConfig+0x2e0>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a21      	ldr	r2, [pc, #132]	; (80053fc <DMA_SetConfig+0x34c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d009      	beq.n	8005390 <DMA_SetConfig+0x2e0>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <DMA_SetConfig+0x350>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <DMA_SetConfig+0x2e0>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <DMA_SetConfig+0x354>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d101      	bne.n	8005394 <DMA_SetConfig+0x2e4>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <DMA_SetConfig+0x2e6>
 8005394:	2300      	movs	r3, #0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d020      	beq.n	80053dc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2201      	movs	r2, #1
 80053a4:	409a      	lsls	r2, r3
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d108      	bne.n	80053cc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	60da      	str	r2, [r3, #12]
}
 80053ca:	e007      	b.n	80053dc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	58025408 	.word	0x58025408
 80053ec:	5802541c 	.word	0x5802541c
 80053f0:	58025430 	.word	0x58025430
 80053f4:	58025444 	.word	0x58025444
 80053f8:	58025458 	.word	0x58025458
 80053fc:	5802546c 	.word	0x5802546c
 8005400:	58025480 	.word	0x58025480
 8005404:	58025494 	.word	0x58025494

08005408 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a42      	ldr	r2, [pc, #264]	; (8005520 <DMA_CalcBaseAndBitshift+0x118>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d04a      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a41      	ldr	r2, [pc, #260]	; (8005524 <DMA_CalcBaseAndBitshift+0x11c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d045      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <DMA_CalcBaseAndBitshift+0x120>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d040      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a3e      	ldr	r2, [pc, #248]	; (800552c <DMA_CalcBaseAndBitshift+0x124>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d03b      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a3c      	ldr	r2, [pc, #240]	; (8005530 <DMA_CalcBaseAndBitshift+0x128>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d036      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a3b      	ldr	r2, [pc, #236]	; (8005534 <DMA_CalcBaseAndBitshift+0x12c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d031      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a39      	ldr	r2, [pc, #228]	; (8005538 <DMA_CalcBaseAndBitshift+0x130>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02c      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a38      	ldr	r2, [pc, #224]	; (800553c <DMA_CalcBaseAndBitshift+0x134>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d027      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a36      	ldr	r2, [pc, #216]	; (8005540 <DMA_CalcBaseAndBitshift+0x138>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a35      	ldr	r2, [pc, #212]	; (8005544 <DMA_CalcBaseAndBitshift+0x13c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d01d      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a33      	ldr	r2, [pc, #204]	; (8005548 <DMA_CalcBaseAndBitshift+0x140>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a32      	ldr	r2, [pc, #200]	; (800554c <DMA_CalcBaseAndBitshift+0x144>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a30      	ldr	r2, [pc, #192]	; (8005550 <DMA_CalcBaseAndBitshift+0x148>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2f      	ldr	r2, [pc, #188]	; (8005554 <DMA_CalcBaseAndBitshift+0x14c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2d      	ldr	r2, [pc, #180]	; (8005558 <DMA_CalcBaseAndBitshift+0x150>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <DMA_CalcBaseAndBitshift+0xa8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2c      	ldr	r2, [pc, #176]	; (800555c <DMA_CalcBaseAndBitshift+0x154>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <DMA_CalcBaseAndBitshift+0xac>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <DMA_CalcBaseAndBitshift+0xae>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d024      	beq.n	8005504 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3b10      	subs	r3, #16
 80054c2:	4a27      	ldr	r2, [pc, #156]	; (8005560 <DMA_CalcBaseAndBitshift+0x158>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	4a24      	ldr	r2, [pc, #144]	; (8005564 <DMA_CalcBaseAndBitshift+0x15c>)
 80054d4:	5cd3      	ldrb	r3, [r2, r3]
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d908      	bls.n	80054f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	4b1f      	ldr	r3, [pc, #124]	; (8005568 <DMA_CalcBaseAndBitshift+0x160>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	659a      	str	r2, [r3, #88]	; 0x58
 80054f2:	e00d      	b.n	8005510 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <DMA_CalcBaseAndBitshift+0x160>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6593      	str	r3, [r2, #88]	; 0x58
 8005502:	e005      	b.n	8005510 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40020010 	.word	0x40020010
 8005524:	40020028 	.word	0x40020028
 8005528:	40020040 	.word	0x40020040
 800552c:	40020058 	.word	0x40020058
 8005530:	40020070 	.word	0x40020070
 8005534:	40020088 	.word	0x40020088
 8005538:	400200a0 	.word	0x400200a0
 800553c:	400200b8 	.word	0x400200b8
 8005540:	40020410 	.word	0x40020410
 8005544:	40020428 	.word	0x40020428
 8005548:	40020440 	.word	0x40020440
 800554c:	40020458 	.word	0x40020458
 8005550:	40020470 	.word	0x40020470
 8005554:	40020488 	.word	0x40020488
 8005558:	400204a0 	.word	0x400204a0
 800555c:	400204b8 	.word	0x400204b8
 8005560:	aaaaaaab 	.word	0xaaaaaaab
 8005564:	0800fff0 	.word	0x0800fff0
 8005568:	fffffc00 	.word	0xfffffc00

0800556c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d120      	bne.n	80055c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	2b03      	cmp	r3, #3
 8005586:	d858      	bhi.n	800563a <DMA_CheckFifoParam+0xce>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <DMA_CheckFifoParam+0x24>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055b3 	.word	0x080055b3
 8005598:	080055a1 	.word	0x080055a1
 800559c:	0800563b 	.word	0x0800563b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d048      	beq.n	800563e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055b0:	e045      	b.n	800563e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055ba:	d142      	bne.n	8005642 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055c0:	e03f      	b.n	8005642 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ca:	d123      	bne.n	8005614 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d838      	bhi.n	8005646 <DMA_CheckFifoParam+0xda>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <DMA_CheckFifoParam+0x70>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055f3 	.word	0x080055f3
 80055e4:	080055ed 	.word	0x080055ed
 80055e8:	08005605 	.word	0x08005605
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
        break;
 80055f0:	e030      	b.n	8005654 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d025      	beq.n	800564a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005602:	e022      	b.n	800564a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800560c:	d11f      	bne.n	800564e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005612:	e01c      	b.n	800564e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	2b02      	cmp	r3, #2
 800561a:	d902      	bls.n	8005622 <DMA_CheckFifoParam+0xb6>
 800561c:	2b03      	cmp	r3, #3
 800561e:	d003      	beq.n	8005628 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005620:	e018      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	73fb      	strb	r3, [r7, #15]
        break;
 8005626:	e015      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
    break;
 8005638:	e00b      	b.n	8005652 <DMA_CheckFifoParam+0xe6>
        break;
 800563a:	bf00      	nop
 800563c:	e00a      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
        break;
 800563e:	bf00      	nop
 8005640:	e008      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
        break;
 8005642:	bf00      	nop
 8005644:	e006      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
        break;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
        break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
        break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <DMA_CheckFifoParam+0xe8>
    break;
 8005652:	bf00      	nop
    }
  }

  return status;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop

08005664 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a38      	ldr	r2, [pc, #224]	; (8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a36      	ldr	r2, [pc, #216]	; (800575c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01d      	beq.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a35      	ldr	r2, [pc, #212]	; (8005760 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a33      	ldr	r2, [pc, #204]	; (8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a32      	ldr	r2, [pc, #200]	; (8005768 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a30      	ldr	r2, [pc, #192]	; (800576c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a2f      	ldr	r2, [pc, #188]	; (8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d101      	bne.n	80056c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80056c6:	2300      	movs	r3, #0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01a      	beq.n	8005702 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	3b08      	subs	r3, #8
 80056d4:	4a28      	ldr	r2, [pc, #160]	; (8005778 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4b26      	ldr	r3, [pc, #152]	; (800577c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	461a      	mov	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a24      	ldr	r2, [pc, #144]	; (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80056f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	2201      	movs	r2, #1
 80056fa:	409a      	lsls	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005700:	e024      	b.n	800574c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	3b10      	subs	r3, #16
 800570a:	4a1e      	ldr	r2, [pc, #120]	; (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d806      	bhi.n	800572a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a1b      	ldr	r2, [pc, #108]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d902      	bls.n	800572a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3308      	adds	r3, #8
 8005728:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4b18      	ldr	r3, [pc, #96]	; (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a16      	ldr	r2, [pc, #88]	; (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800573c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2201      	movs	r2, #1
 8005746:	409a      	lsls	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	58025408 	.word	0x58025408
 800575c:	5802541c 	.word	0x5802541c
 8005760:	58025430 	.word	0x58025430
 8005764:	58025444 	.word	0x58025444
 8005768:	58025458 	.word	0x58025458
 800576c:	5802546c 	.word	0x5802546c
 8005770:	58025480 	.word	0x58025480
 8005774:	58025494 	.word	0x58025494
 8005778:	cccccccd 	.word	0xcccccccd
 800577c:	16009600 	.word	0x16009600
 8005780:	58025880 	.word	0x58025880
 8005784:	aaaaaaab 	.word	0xaaaaaaab
 8005788:	400204b8 	.word	0x400204b8
 800578c:	4002040f 	.word	0x4002040f
 8005790:	10008200 	.word	0x10008200
 8005794:	40020880 	.word	0x40020880

08005798 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d04a      	beq.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d847      	bhi.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d022      	beq.n	8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a24      	ldr	r2, [pc, #144]	; (8005854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d01d      	beq.n	8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a22      	ldr	r2, [pc, #136]	; (8005858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d018      	beq.n	8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1f      	ldr	r2, [pc, #124]	; (8005860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00e      	beq.n	8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d009      	beq.n	8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1c      	ldr	r2, [pc, #112]	; (8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d004      	beq.n	8005804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	; (800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d101      	bne.n	8005808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005808:	2300      	movs	r3, #0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a15      	ldr	r2, [pc, #84]	; (8005874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005820:	671a      	str	r2, [r3, #112]	; 0x70
 8005822:	e009      	b.n	8005838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	461a      	mov	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a11      	ldr	r2, [pc, #68]	; (800587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005836:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3b01      	subs	r3, #1
 800583c:	2201      	movs	r2, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	58025408 	.word	0x58025408
 8005854:	5802541c 	.word	0x5802541c
 8005858:	58025430 	.word	0x58025430
 800585c:	58025444 	.word	0x58025444
 8005860:	58025458 	.word	0x58025458
 8005864:	5802546c 	.word	0x5802546c
 8005868:	58025480 	.word	0x58025480
 800586c:	58025494 	.word	0x58025494
 8005870:	1600963f 	.word	0x1600963f
 8005874:	58025940 	.word	0x58025940
 8005878:	1000823f 	.word	0x1000823f
 800587c:	40020940 	.word	0x40020940

08005880 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e0c6      	b.n	8005a20 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fc58 	bl	8001150 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2223      	movs	r2, #35	; 0x23
 80058a4:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a6:	4b60      	ldr	r3, [pc, #384]	; (8005a28 <HAL_ETH_Init+0x1a8>)
 80058a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058ac:	4a5e      	ldr	r2, [pc, #376]	; (8005a28 <HAL_ETH_Init+0x1a8>)
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058b6:	4b5c      	ldr	r3, [pc, #368]	; (8005a28 <HAL_ETH_Init+0x1a8>)
 80058b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7a1b      	ldrb	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fb ffab 	bl	8001828 <HAL_SYSCFG_ETHInterfaceSelect>
 80058d2:	e003      	b.n	80058dc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80058d4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80058d8:	f7fb ffa6 	bl	8001828 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058f4:	f7fb ff5e 	bl	80017b4 <HAL_GetTick>
 80058f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80058fa:	e00f      	b.n	800591c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80058fc:	f7fb ff5a 	bl	80017b4 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800590a:	d907      	bls.n	800591c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2204      	movs	r2, #4
 8005910:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	22e0      	movs	r2, #224	; 0xe0
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e081      	b.n	8005a20 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e6      	bne.n	80058fc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fac0 	bl	8005eb4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005934:	f002 ff16 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8005938:	4602      	mov	r2, r0
 800593a:	4b3c      	ldr	r3, [pc, #240]	; (8005a2c <HAL_ETH_Init+0x1ac>)
 800593c:	fba3 2302 	umull	r2, r3, r3, r2
 8005940:	0c9a      	lsrs	r2, r3, #18
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3a01      	subs	r2, #1
 8005948:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fa13 	bl	8005d78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005968:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800596c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	22e0      	movs	r2, #224	; 0xe0
 8005984:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e04a      	b.n	8005a20 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005992:	4413      	add	r3, r2
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <HAL_ETH_Init+0x1b0>)
 8005998:	4013      	ands	r3, r2
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6952      	ldr	r2, [r2, #20]
 800599e:	0052      	lsls	r2, r2, #1
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	6809      	ldr	r1, [r1, #0]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80059aa:	440b      	add	r3, r1
 80059ac:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fad8 	bl	8005f64 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fb1c 	bl	8005ff2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	3305      	adds	r3, #5
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	021a      	lsls	r2, r3, #8
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	3304      	adds	r3, #4
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	4619      	mov	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	3303      	adds	r3, #3
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	061a      	lsls	r2, r3, #24
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	3302      	adds	r3, #2
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	3301      	adds	r3, #1
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80059f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005a06:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2210      	movs	r2, #16
 8005a16:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	58024400 	.word	0x58024400
 8005a2c:	431bde83 	.word	0x431bde83
 8005a30:	ffff8001 	.word	0xffff8001

08005a34 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005a46:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	791b      	ldrb	r3, [r3, #4]
 8005a4c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005a4e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	7b1b      	ldrb	r3, [r3, #12]
 8005a54:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005a56:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	7b5b      	ldrb	r3, [r3, #13]
 8005a5c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a5e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	7b9b      	ldrb	r3, [r3, #14]
 8005a64:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	7bdb      	ldrb	r3, [r3, #15]
 8005a6c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a6e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	7c12      	ldrb	r2, [r2, #16]
 8005a74:	2a00      	cmp	r2, #0
 8005a76:	d102      	bne.n	8005a7e <ETH_SetMACConfig+0x4a>
 8005a78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a7c:	e000      	b.n	8005a80 <ETH_SetMACConfig+0x4c>
 8005a7e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a80:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	7c52      	ldrb	r2, [r2, #17]
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d102      	bne.n	8005a90 <ETH_SetMACConfig+0x5c>
 8005a8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a8e:	e000      	b.n	8005a92 <ETH_SetMACConfig+0x5e>
 8005a90:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a92:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	7c9b      	ldrb	r3, [r3, #18]
 8005a98:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a9a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005aa0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005aa6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	7f1b      	ldrb	r3, [r3, #28]
 8005aac:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005aae:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	7f5b      	ldrb	r3, [r3, #29]
 8005ab4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005ab6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	7f92      	ldrb	r2, [r2, #30]
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	d102      	bne.n	8005ac6 <ETH_SetMACConfig+0x92>
 8005ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ac4:	e000      	b.n	8005ac8 <ETH_SetMACConfig+0x94>
 8005ac6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005ac8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	7fdb      	ldrb	r3, [r3, #31]
 8005ace:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005ad0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005ad8:	2a00      	cmp	r2, #0
 8005ada:	d102      	bne.n	8005ae2 <ETH_SetMACConfig+0xae>
 8005adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae0:	e000      	b.n	8005ae4 <ETH_SetMACConfig+0xb0>
 8005ae2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005ae4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005aea:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005af4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b56      	ldr	r3, [pc, #344]	; (8005c60 <ETH_SetMACConfig+0x22c>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	68f9      	ldr	r1, [r7, #12]
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005b20:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005b2a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b32:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005b34:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005b3c:	2a00      	cmp	r2, #0
 8005b3e:	d102      	bne.n	8005b46 <ETH_SetMACConfig+0x112>
 8005b40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b44:	e000      	b.n	8005b48 <ETH_SetMACConfig+0x114>
 8005b46:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005b48:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <ETH_SetMACConfig+0x230>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	4b3a      	ldr	r3, [pc, #232]	; (8005c68 <ETH_SetMACConfig+0x234>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b96:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005b9e:	2a00      	cmp	r2, #0
 8005ba0:	d101      	bne.n	8005ba6 <ETH_SetMACConfig+0x172>
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	e000      	b.n	8005ba8 <ETH_SetMACConfig+0x174>
 8005ba6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005ba8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	68f9      	ldr	r1, [r7, #12]
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005bd0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005bd8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f023 0103 	bic.w	r1, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005bfe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005c1a:	2a00      	cmp	r2, #0
 8005c1c:	d101      	bne.n	8005c22 <ETH_SetMACConfig+0x1ee>
 8005c1e:	2240      	movs	r2, #64	; 0x40
 8005c20:	e000      	b.n	8005c24 <ETH_SetMACConfig+0x1f0>
 8005c22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005c24:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c2e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005c54:	bf00      	nop
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	00048083 	.word	0x00048083
 8005c64:	c0f88000 	.word	0xc0f88000
 8005c68:	fffffef0 	.word	0xfffffef0

08005c6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	4b38      	ldr	r3, [pc, #224]	; (8005d64 <ETH_SetDMAConfig+0xf8>)
 8005c82:	4013      	ands	r3, r2
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	6809      	ldr	r1, [r1, #0]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005c92:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	791b      	ldrb	r3, [r3, #4]
 8005c98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c9e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	7b1b      	ldrb	r3, [r3, #12]
 8005ca4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	f241 0304 	movw	r3, #4100	; 0x1004
 8005cb2:	4413      	add	r3, r2
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <ETH_SetDMAConfig+0xfc>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	f241 0304 	movw	r3, #4100	; 0x1004
 8005cc6:	440b      	add	r3, r1
 8005cc8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	7b5b      	ldrb	r3, [r3, #13]
 8005cce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <ETH_SetDMAConfig+0x100>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6811      	ldr	r1, [r2, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005cf2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	7d1b      	ldrb	r3, [r3, #20]
 8005cfc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cfe:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	7f5b      	ldrb	r3, [r3, #29]
 8005d04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	f241 1304 	movw	r3, #4356	; 0x1104
 8005d12:	4413      	add	r3, r2
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <ETH_SetDMAConfig+0x104>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	f241 1304 	movw	r3, #4356	; 0x1104
 8005d26:	440b      	add	r3, r1
 8005d28:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	7f1b      	ldrb	r3, [r3, #28]
 8005d2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d40:	4413      	add	r3, r2
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <ETH_SetDMAConfig+0x108>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6811      	ldr	r1, [r2, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	f241 1308 	movw	r3, #4360	; 0x1108
 8005d54:	440b      	add	r3, r1
 8005d56:	601a      	str	r2, [r3, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	ffff87fd 	.word	0xffff87fd
 8005d68:	ffff2ffe 	.word	0xffff2ffe
 8005d6c:	fffec000 	.word	0xfffec000
 8005d70:	ffc0efef 	.word	0xffc0efef
 8005d74:	7fc0ffff 	.word	0x7fc0ffff

08005d78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b0a4      	sub	sp, #144	; 0x90
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d86:	2300      	movs	r3, #0
 8005d88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005db8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005dd0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005dd4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005df2:	2300      	movs	r3, #0
 8005df4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005e10:	2320      	movs	r3, #32
 8005e12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005e22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005e34:	2302      	movs	r3, #2
 8005e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005e52:	2300      	movs	r3, #0
 8005e54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fde6 	bl	8005a34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005e98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005e9e:	f107 0308 	add.w	r3, r7, #8
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff fee1 	bl	8005c6c <ETH_SetDMAConfig>
}
 8005eaa:	bf00      	nop
 8005eac:	3790      	adds	r7, #144	; 0x90
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005ece:	f002 fc49 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8005ed2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d908      	bls.n	8005eee <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d804      	bhi.n	8005eee <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e027      	b.n	8005f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d908      	bls.n	8005f08 <ETH_MAC_MDIO_ClkConfig+0x54>
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d804      	bhi.n	8005f08 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e01a      	b.n	8005f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d903      	bls.n	8005f18 <ETH_MAC_MDIO_ClkConfig+0x64>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d911      	bls.n	8005f3c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4a10      	ldr	r2, [pc, #64]	; (8005f5c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d908      	bls.n	8005f32 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d804      	bhi.n	8005f32 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e005      	b.n	8005f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e000      	b.n	8005f3e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005f3c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	01312cff 	.word	0x01312cff
 8005f54:	02160ebf 	.word	0x02160ebf
 8005f58:	039386ff 	.word	0x039386ff
 8005f5c:	05f5e0ff 	.word	0x05f5e0ff
 8005f60:	08f0d17f 	.word	0x08f0d17f

08005f64 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e01d      	b.n	8005fae <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68d9      	ldr	r1, [r3, #12]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	4413      	add	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	440b      	add	r3, r1
 8005f82:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	3206      	adds	r2, #6
 8005fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d9de      	bls.n	8005f72 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	f241 132c 	movw	r3, #4396	; 0x112c
 8005fc2:	4413      	add	r3, r2
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68d9      	ldr	r1, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	f241 1314 	movw	r3, #4372	; 0x1114
 8005fd4:	4413      	add	r3, r2
 8005fd6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005fe4:	601a      	str	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e024      	b.n	800604a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6919      	ldr	r1, [r3, #16]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4613      	mov	r3, r2
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	4413      	add	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	440b      	add	r3, r1
 8006010:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2200      	movs	r2, #0
 8006022:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2200      	movs	r2, #0
 8006028:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2200      	movs	r2, #0
 800602e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2200      	movs	r2, #0
 8006034:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	330a      	adds	r3, #10
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d9d7      	bls.n	8006000 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	f241 1330 	movw	r3, #4400	; 0x1130
 8006076:	4413      	add	r3, r2
 8006078:	2203      	movs	r2, #3
 800607a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6919      	ldr	r1, [r3, #16]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	f241 131c 	movw	r3, #4380	; 0x111c
 8006088:	4413      	add	r3, r2
 800608a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	f241 1328 	movw	r3, #4392	; 0x1128
 800609c:	4413      	add	r3, r2
 800609e:	6019      	str	r1, [r3, #0]
}
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	; 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80060ba:	4b89      	ldr	r3, [pc, #548]	; (80062e0 <HAL_GPIO_Init+0x234>)
 80060bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80060be:	e194      	b.n	80063ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	2101      	movs	r1, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	fa01 f303 	lsl.w	r3, r1, r3
 80060cc:	4013      	ands	r3, r2
 80060ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8186 	beq.w	80063e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d00b      	beq.n	80060f8 <HAL_GPIO_Init+0x4c>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d007      	beq.n	80060f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060ec:	2b11      	cmp	r3, #17
 80060ee:	d003      	beq.n	80060f8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b12      	cmp	r3, #18
 80060f6:	d130      	bne.n	800615a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	2203      	movs	r2, #3
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4313      	orrs	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800612e:	2201      	movs	r2, #1
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	f003 0201 	and.w	r2, r3, #1
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	2203      	movs	r2, #3
 8006166:	fa02 f303 	lsl.w	r3, r2, r3
 800616a:	43db      	mvns	r3, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	4013      	ands	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	005b      	lsls	r3, r3, #1
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	4313      	orrs	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d003      	beq.n	800619a <HAL_GPIO_Init+0xee>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b12      	cmp	r3, #18
 8006198:	d123      	bne.n	80061e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	08da      	lsrs	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3208      	adds	r2, #8
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	220f      	movs	r2, #15
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	691a      	ldr	r2, [r3, #16]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	08da      	lsrs	r2, r3, #3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3208      	adds	r2, #8
 80061dc:	69b9      	ldr	r1, [r7, #24]
 80061de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	2203      	movs	r2, #3
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	4013      	ands	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 0203 	and.w	r2, r3, #3
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4313      	orrs	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80e0 	beq.w	80063e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006224:	4b2f      	ldr	r3, [pc, #188]	; (80062e4 <HAL_GPIO_Init+0x238>)
 8006226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800622a:	4a2e      	ldr	r2, [pc, #184]	; (80062e4 <HAL_GPIO_Init+0x238>)
 800622c:	f043 0302 	orr.w	r3, r3, #2
 8006230:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006234:	4b2b      	ldr	r3, [pc, #172]	; (80062e4 <HAL_GPIO_Init+0x238>)
 8006236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006242:	4a29      	ldr	r2, [pc, #164]	; (80062e8 <HAL_GPIO_Init+0x23c>)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	089b      	lsrs	r3, r3, #2
 8006248:	3302      	adds	r3, #2
 800624a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	220f      	movs	r2, #15
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4013      	ands	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a20      	ldr	r2, [pc, #128]	; (80062ec <HAL_GPIO_Init+0x240>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d052      	beq.n	8006314 <HAL_GPIO_Init+0x268>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <HAL_GPIO_Init+0x244>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d031      	beq.n	80062da <HAL_GPIO_Init+0x22e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <HAL_GPIO_Init+0x248>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d02b      	beq.n	80062d6 <HAL_GPIO_Init+0x22a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1d      	ldr	r2, [pc, #116]	; (80062f8 <HAL_GPIO_Init+0x24c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d025      	beq.n	80062d2 <HAL_GPIO_Init+0x226>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1c      	ldr	r2, [pc, #112]	; (80062fc <HAL_GPIO_Init+0x250>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01f      	beq.n	80062ce <HAL_GPIO_Init+0x222>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1b      	ldr	r2, [pc, #108]	; (8006300 <HAL_GPIO_Init+0x254>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d019      	beq.n	80062ca <HAL_GPIO_Init+0x21e>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1a      	ldr	r2, [pc, #104]	; (8006304 <HAL_GPIO_Init+0x258>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_GPIO_Init+0x21a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a19      	ldr	r2, [pc, #100]	; (8006308 <HAL_GPIO_Init+0x25c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00d      	beq.n	80062c2 <HAL_GPIO_Init+0x216>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a18      	ldr	r2, [pc, #96]	; (800630c <HAL_GPIO_Init+0x260>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d007      	beq.n	80062be <HAL_GPIO_Init+0x212>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a17      	ldr	r2, [pc, #92]	; (8006310 <HAL_GPIO_Init+0x264>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <HAL_GPIO_Init+0x20e>
 80062b6:	2309      	movs	r3, #9
 80062b8:	e02d      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062ba:	230a      	movs	r3, #10
 80062bc:	e02b      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062be:	2308      	movs	r3, #8
 80062c0:	e029      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062c2:	2307      	movs	r3, #7
 80062c4:	e027      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062c6:	2306      	movs	r3, #6
 80062c8:	e025      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062ca:	2305      	movs	r3, #5
 80062cc:	e023      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062ce:	2304      	movs	r3, #4
 80062d0:	e021      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062d2:	2303      	movs	r3, #3
 80062d4:	e01f      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e01d      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062da:	2301      	movs	r3, #1
 80062dc:	e01b      	b.n	8006316 <HAL_GPIO_Init+0x26a>
 80062de:	bf00      	nop
 80062e0:	58000080 	.word	0x58000080
 80062e4:	58024400 	.word	0x58024400
 80062e8:	58000400 	.word	0x58000400
 80062ec:	58020000 	.word	0x58020000
 80062f0:	58020400 	.word	0x58020400
 80062f4:	58020800 	.word	0x58020800
 80062f8:	58020c00 	.word	0x58020c00
 80062fc:	58021000 	.word	0x58021000
 8006300:	58021400 	.word	0x58021400
 8006304:	58021800 	.word	0x58021800
 8006308:	58021c00 	.word	0x58021c00
 800630c:	58022000 	.word	0x58022000
 8006310:	58022400 	.word	0x58022400
 8006314:	2300      	movs	r3, #0
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	f002 0203 	and.w	r2, r2, #3
 800631c:	0092      	lsls	r2, r2, #2
 800631e:	4093      	lsls	r3, r2
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4313      	orrs	r3, r2
 8006324:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006326:	4938      	ldr	r1, [pc, #224]	; (8006408 <HAL_GPIO_Init+0x35c>)
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	3302      	adds	r3, #2
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	43db      	mvns	r3, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4013      	ands	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4013      	ands	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	3301      	adds	r3, #1
 80063e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f47f ae63 	bne.w	80060c0 <HAL_GPIO_Init+0x14>
  }
}
 80063fa:	bf00      	nop
 80063fc:	3724      	adds	r7, #36	; 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	58000400 	.word	0x58000400

0800640c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	807b      	strh	r3, [r7, #2]
 8006418:	4613      	mov	r3, r2
 800641a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800641c:	787b      	ldrb	r3, [r7, #1]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006422:	887a      	ldrh	r2, [r7, #2]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006428:	e003      	b.n	8006432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	041a      	lsls	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	619a      	str	r2, [r3, #24]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	401a      	ands	r2, r3
 8006452:	887b      	ldrh	r3, [r7, #2]
 8006454:	429a      	cmp	r2, r3
 8006456:	d104      	bne.n	8006462 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	041a      	lsls	r2, r3, #16
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006460:	e002      	b.n	8006468 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	619a      	str	r2, [r3, #24]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800647e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006482:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	4013      	ands	r3, r2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800648e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006492:	88fb      	ldrh	r3, [r7, #6]
 8006494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fa fd88 	bl	8000fb0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064aa:	b08f      	sub	sp, #60	; 0x3c
 80064ac:	af0a      	add	r7, sp, #40	; 0x28
 80064ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e116      	b.n	80066e8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f008 fdc9 	bl	800f06c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2203      	movs	r2, #3
 80064de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f005 fd8a 	bl	800c012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	687e      	ldr	r6, [r7, #4]
 8006506:	466d      	mov	r5, sp
 8006508:	f106 0410 	add.w	r4, r6, #16
 800650c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800650e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006518:	e885 0003 	stmia.w	r5, {r0, r1}
 800651c:	1d33      	adds	r3, r6, #4
 800651e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006520:	6838      	ldr	r0, [r7, #0]
 8006522:	f005 fc61 	bl	800bde8 <USB_CoreInit>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0d7      	b.n	80066e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f005 fd78 	bl	800c034 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
 8006548:	e04a      	b.n	80065e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800654a:	7bfa      	ldrb	r2, [r7, #15]
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	333d      	adds	r3, #61	; 0x3d
 800655a:	2201      	movs	r2, #1
 800655c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800655e:	7bfa      	ldrb	r2, [r7, #15]
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	333c      	adds	r3, #60	; 0x3c
 800656e:	7bfa      	ldrb	r2, [r7, #15]
 8006570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006572:	7bfa      	ldrb	r2, [r7, #15]
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	b298      	uxth	r0, r3
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	3342      	adds	r3, #66	; 0x42
 8006586:	4602      	mov	r2, r0
 8006588:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800658a:	7bfa      	ldrb	r2, [r7, #15]
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	1a9b      	subs	r3, r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	333f      	adds	r3, #63	; 0x3f
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800659e:	7bfa      	ldrb	r2, [r7, #15]
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	3344      	adds	r3, #68	; 0x44
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065b2:	7bfa      	ldrb	r2, [r7, #15]
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	3348      	adds	r3, #72	; 0x48
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065c6:	7bfa      	ldrb	r2, [r7, #15]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3350      	adds	r3, #80	; 0x50
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	3301      	adds	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
 80065e0:	7bfa      	ldrb	r2, [r7, #15]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d3af      	bcc.n	800654a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
 80065ee:	e044      	b.n	800667a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065f0:	7bfa      	ldrb	r2, [r7, #15]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006606:	7bfa      	ldrb	r2, [r7, #15]
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006618:	7bfa      	ldrb	r2, [r7, #15]
 800661a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800661c:	7bfa      	ldrb	r2, [r7, #15]
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	1a9b      	subs	r3, r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006632:	7bfa      	ldrb	r2, [r7, #15]
 8006634:	6879      	ldr	r1, [r7, #4]
 8006636:	4613      	mov	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	440b      	add	r3, r1
 8006640:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006644:	2200      	movs	r2, #0
 8006646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006648:	7bfa      	ldrb	r2, [r7, #15]
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4613      	mov	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800665e:	7bfa      	ldrb	r2, [r7, #15]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	3301      	adds	r3, #1
 8006678:	73fb      	strb	r3, [r7, #15]
 800667a:	7bfa      	ldrb	r2, [r7, #15]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d3b5      	bcc.n	80065f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	603b      	str	r3, [r7, #0]
 800668a:	687e      	ldr	r6, [r7, #4]
 800668c:	466d      	mov	r5, sp
 800668e:	f106 0410 	add.w	r4, r6, #16
 8006692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800669a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800669e:	e885 0003 	stmia.w	r5, {r0, r1}
 80066a2:	1d33      	adds	r3, r6, #4
 80066a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066a6:	6838      	ldr	r0, [r7, #0]
 80066a8:	f005 fcee 	bl	800c088 <USB_DevInit>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e014      	b.n	80066e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d102      	bne.n	80066dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 f892 	bl	8007800 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f006 fd2d 	bl	800d140 <USB_DevDisconnect>

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_PCD_Start+0x1c>
 8006708:	2302      	movs	r3, #2
 800670a:	e020      	b.n	800674e <HAL_PCD_Start+0x5e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	2b01      	cmp	r3, #1
 800671a:	d109      	bne.n	8006730 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006720:	2b01      	cmp	r3, #1
 8006722:	d005      	beq.n	8006730 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f006 fceb 	bl	800d110 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f005 fc56 	bl	800bff0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006756:	b590      	push	{r4, r7, lr}
 8006758:	b08d      	sub	sp, #52	; 0x34
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f006 fd92 	bl	800d296 <USB_GetMode>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 83ca 	bne.w	8006f0e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f006 fcf6 	bl	800d170 <USB_ReadInterrupts>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 83c0 	beq.w	8006f0c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f006 fced 	bl	800d170 <USB_ReadInterrupts>
 8006796:	4603      	mov	r3, r0
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d107      	bne.n	80067b0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695a      	ldr	r2, [r3, #20]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f002 0202 	and.w	r2, r2, #2
 80067ae:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f006 fcdb 	bl	800d170 <USB_ReadInterrupts>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d161      	bne.n	8006888 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699a      	ldr	r2, [r3, #24]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0210 	bic.w	r2, r2, #16
 80067d2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	f003 020f 	and.w	r2, r3, #15
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4413      	add	r3, r2
 80067f0:	3304      	adds	r3, #4
 80067f2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	0c5b      	lsrs	r3, r3, #17
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d124      	bne.n	800684a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d035      	beq.n	8006878 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	6a38      	ldr	r0, [r7, #32]
 8006820:	f006 fb53 	bl	800ceca <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	091b      	lsrs	r3, r3, #4
 800682c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006830:	441a      	add	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	091b      	lsrs	r3, r3, #4
 800683e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006842:	441a      	add	r2, r3
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	619a      	str	r2, [r3, #24]
 8006848:	e016      	b.n	8006878 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	0c5b      	lsrs	r3, r3, #17
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	2b06      	cmp	r3, #6
 8006854:	d110      	bne.n	8006878 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800685c:	2208      	movs	r2, #8
 800685e:	4619      	mov	r1, r3
 8006860:	6a38      	ldr	r0, [r7, #32]
 8006862:	f006 fb32 	bl	800ceca <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	699a      	ldr	r2, [r3, #24]
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006872:	441a      	add	r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0210 	orr.w	r2, r2, #16
 8006886:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f006 fc6f 	bl	800d170 <USB_ReadInterrupts>
 8006892:	4603      	mov	r3, r0
 8006894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006898:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800689c:	d16e      	bne.n	800697c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f006 fc75 	bl	800d196 <USB_ReadDevAllOutEpInterrupt>
 80068ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80068ae:	e062      	b.n	8006976 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d057      	beq.n	800696a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c0:	b2d2      	uxtb	r2, r2
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f006 fc9a 	bl	800d1fe <USB_ReadDevOutEPInterrupt>
 80068ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e2:	461a      	mov	r2, r3
 80068e4:	2301      	movs	r3, #1
 80068e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80068e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fdde 	bl	80074ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00c      	beq.n	8006914 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	461a      	mov	r2, r3
 8006908:	2308      	movs	r3, #8
 800690a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800690c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fed8 	bl	80076c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f003 0310 	and.w	r3, r3, #16
 800691a:	2b00      	cmp	r3, #0
 800691c:	d008      	beq.n	8006930 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	461a      	mov	r2, r3
 800692c:	2310      	movs	r3, #16
 800692e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d008      	beq.n	800694c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	461a      	mov	r2, r3
 8006948:	2320      	movs	r3, #32
 800694a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	461a      	mov	r2, r3
 8006964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006968:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	3301      	adds	r3, #1
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	2b00      	cmp	r3, #0
 800697a:	d199      	bne.n	80068b0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f006 fbf5 	bl	800d170 <USB_ReadInterrupts>
 8006986:	4603      	mov	r3, r0
 8006988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800698c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006990:	f040 80c0 	bne.w	8006b14 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4618      	mov	r0, r3
 800699a:	f006 fc16 	bl	800d1ca <USB_ReadDevAllInEpInterrupt>
 800699e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80069a4:	e0b2      	b.n	8006b0c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80a7 	beq.w	8006b00 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f006 fc3c 	bl	800d23a <USB_ReadDevInEPInterrupt>
 80069c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d057      	beq.n	8006a7e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	2201      	movs	r2, #1
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	43db      	mvns	r3, r3
 80069e8:	69f9      	ldr	r1, [r7, #28]
 80069ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069ee:	4013      	ands	r3, r2
 80069f0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fe:	461a      	mov	r2, r3
 8006a00:	2301      	movs	r3, #1
 8006a02:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d132      	bne.n	8006a72 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	1a9b      	subs	r3, r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	440b      	add	r3, r1
 8006a1a:	3348      	adds	r3, #72	; 0x48
 8006a1c:	6819      	ldr	r1, [r3, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a22:	4613      	mov	r3, r2
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	1a9b      	subs	r3, r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4403      	add	r3, r0
 8006a2c:	3344      	adds	r3, #68	; 0x44
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4419      	add	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a36:	4613      	mov	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4403      	add	r3, r0
 8006a40:	3348      	adds	r3, #72	; 0x48
 8006a42:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d113      	bne.n	8006a72 <HAL_PCD_IRQHandler+0x31c>
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a4e:	4613      	mov	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	3350      	adds	r3, #80	; 0x50
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d108      	bne.n	8006a72 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	f006 fc45 	bl	800d2fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f008 fb84 	bl	800f186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a94:	461a      	mov	r2, r3
 8006a96:	2308      	movs	r3, #8
 8006a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f003 0310 	and.w	r3, r3, #16
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	2310      	movs	r3, #16
 8006ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006acc:	461a      	mov	r2, r3
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2302      	movs	r3, #2
 8006aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fc48 	bl	8007390 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	3301      	adds	r3, #1
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	085b      	lsrs	r3, r3, #1
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f af49 	bne.w	80069a6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f006 fb29 	bl	800d170 <USB_ReadInterrupts>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b28:	d122      	bne.n	8006b70 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b38:	f023 0301 	bic.w	r3, r3, #1
 8006b3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d108      	bne.n	8006b5a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b50:	2100      	movs	r1, #0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fe78 	bl	8007848 <HAL_PCDEx_LPM_Callback>
 8006b58:	e002      	b.n	8006b60 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f008 fb8a 	bl	800f274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f006 fafb 	bl	800d170 <USB_ReadInterrupts>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b84:	d112      	bne.n	8006bac <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d102      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f008 fb46 	bl	800f228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006baa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f006 fadd 	bl	800d170 <USB_ReadInterrupts>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc0:	d121      	bne.n	8006c06 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695a      	ldr	r2, [r3, #20]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006bd0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d111      	bne.n	8006c00 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	089b      	lsrs	r3, r3, #2
 8006bec:	f003 020f 	and.w	r2, r3, #15
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fe25 	bl	8007848 <HAL_PCDEx_LPM_Callback>
 8006bfe:	e002      	b.n	8006c06 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f008 fb11 	bl	800f228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f006 fab0 	bl	800d170 <USB_ReadInterrupts>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1a:	f040 80c7 	bne.w	8006dac <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2110      	movs	r1, #16
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f005 fb83 	bl	800c344 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c42:	e056      	b.n	8006cf2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	461a      	mov	r2, r3
 8006c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c56:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	69fa      	ldr	r2, [r7, #28]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c76:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006caa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	69fa      	ldr	r2, [r7, #28]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	3301      	adds	r3, #1
 8006cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d3a3      	bcc.n	8006c44 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	69fa      	ldr	r2, [r7, #28]
 8006d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d0a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006d0e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d016      	beq.n	8006d46 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d28:	f043 030b 	orr.w	r3, r3, #11
 8006d2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d3e:	f043 030b 	orr.w	r3, r3, #11
 8006d42:	6453      	str	r3, [r2, #68]	; 0x44
 8006d44:	e015      	b.n	8006d72 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d54:	4619      	mov	r1, r3
 8006d56:	f242 032b 	movw	r3, #8235	; 0x202b
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d6c:	f043 030b 	orr.w	r3, r3, #11
 8006d70:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d80:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d84:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d96:	461a      	mov	r2, r3
 8006d98:	f006 fab0 	bl	800d2fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f006 f9dd 	bl	800d170 <USB_ReadInterrupts>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc0:	d124      	bne.n	8006e0c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f006 fa74 	bl	800d2b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f005 fb18 	bl	800c406 <USB_GetDevSpeed>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681c      	ldr	r4, [r3, #0]
 8006de2:	f001 fcbf 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8006de6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	4620      	mov	r0, r4
 8006df2:	f005 f85b 	bl	800beac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f008 f9ed 	bl	800f1d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695a      	ldr	r2, [r3, #20]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f006 f9ad 	bl	800d170 <USB_ReadInterrupts>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d10a      	bne.n	8006e36 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f008 f9ca 	bl	800f1ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f002 0208 	and.w	r2, r2, #8
 8006e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f006 f998 	bl	800d170 <USB_ReadInterrupts>
 8006e40:	4603      	mov	r3, r0
 8006e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e4a:	d10f      	bne.n	8006e6c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f008 fa2c 	bl	800f2b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695a      	ldr	r2, [r3, #20]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f006 f97d 	bl	800d170 <USB_ReadInterrupts>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e80:	d10f      	bne.n	8006ea2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f008 f9ff 	bl	800f290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f006 f962 	bl	800d170 <USB_ReadInterrupts>
 8006eac:	4603      	mov	r3, r0
 8006eae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d10a      	bne.n	8006ece <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f008 fa0d 	bl	800f2d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695a      	ldr	r2, [r3, #20]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f006 f94c 	bl	800d170 <USB_ReadInterrupts>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d115      	bne.n	8006f0e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f008 f9fd 	bl	800f2f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6859      	ldr	r1, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	e000      	b.n	8006f0e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006f0c:	bf00      	nop
    }
  }
}
 8006f0e:	3734      	adds	r7, #52	; 0x34
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd90      	pop	{r4, r7, pc}

08006f14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <HAL_PCD_SetAddress+0x1a>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e013      	b.n	8006f56 <HAL_PCD_SetAddress+0x42>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	78fa      	ldrb	r2, [r7, #3]
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f006 f8bc 	bl	800d0c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	70fb      	strb	r3, [r7, #3]
 8006f70:	460b      	mov	r3, r1
 8006f72:	803b      	strh	r3, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da0f      	bge.n	8006fa4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	f003 020f 	and.w	r2, r3, #15
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	3338      	adds	r3, #56	; 0x38
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	4413      	add	r3, r2
 8006f98:	3304      	adds	r3, #4
 8006f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	705a      	strb	r2, [r3, #1]
 8006fa2:	e00f      	b.n	8006fc4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fa4:	78fb      	ldrb	r3, [r7, #3]
 8006fa6:	f003 020f 	and.w	r2, r3, #15
 8006faa:	4613      	mov	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	3304      	adds	r3, #4
 8006fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006fc4:	78fb      	ldrb	r3, [r7, #3]
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006fd0:	883a      	ldrh	r2, [r7, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	78ba      	ldrb	r2, [r7, #2]
 8006fda:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	785b      	ldrb	r3, [r3, #1]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006fee:	78bb      	ldrb	r3, [r7, #2]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d102      	bne.n	8006ffa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_PCD_EP_Open+0xaa>
 8007004:	2302      	movs	r3, #2
 8007006:	e00e      	b.n	8007026 <HAL_PCD_EP_Open+0xc8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68f9      	ldr	r1, [r7, #12]
 8007016:	4618      	mov	r0, r3
 8007018:	f005 fa1a 	bl	800c450 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007024:	7afb      	ldrb	r3, [r7, #11]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	460b      	mov	r3, r1
 8007038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800703a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800703e:	2b00      	cmp	r3, #0
 8007040:	da0f      	bge.n	8007062 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	f003 020f 	and.w	r2, r3, #15
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	3338      	adds	r3, #56	; 0x38
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4413      	add	r3, r2
 8007056:	3304      	adds	r3, #4
 8007058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	705a      	strb	r2, [r3, #1]
 8007060:	e00f      	b.n	8007082 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	4613      	mov	r3, r2
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	1a9b      	subs	r3, r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	4413      	add	r3, r2
 8007078:	3304      	adds	r3, #4
 800707a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007082:	78fb      	ldrb	r3, [r7, #3]
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_PCD_EP_Close+0x6e>
 8007098:	2302      	movs	r3, #2
 800709a:	e00e      	b.n	80070ba <HAL_PCD_EP_Close+0x8c>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68f9      	ldr	r1, [r7, #12]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f005 fa58 	bl	800c560 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b086      	sub	sp, #24
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
 80070ce:	460b      	mov	r3, r1
 80070d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	4613      	mov	r3, r2
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	1a9b      	subs	r3, r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4413      	add	r3, r2
 80070e8:	3304      	adds	r3, #4
 80070ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2200      	movs	r2, #0
 80070fc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2200      	movs	r2, #0
 8007102:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	b2da      	uxtb	r2, r3
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d102      	bne.n	800711e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6979      	ldr	r1, [r7, #20]
 8007136:	f005 fd3b 	bl	800cbb0 <USB_EP0StartXfer>
 800713a:	e008      	b.n	800714e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	6979      	ldr	r1, [r7, #20]
 800714a:	f005 fae5 	bl	800c718 <USB_EPStartXfer>
  }

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	f003 020f 	and.w	r2, r3, #15
 800716a:	6879      	ldr	r1, [r7, #4]
 800716c:	4613      	mov	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800717a:	681b      	ldr	r3, [r3, #0]
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	607a      	str	r2, [r7, #4]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	460b      	mov	r3, r1
 8007196:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	f003 020f 	and.w	r2, r3, #15
 800719e:	4613      	mov	r3, r2
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	3338      	adds	r3, #56	; 0x38
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	3304      	adds	r3, #4
 80071ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2200      	movs	r2, #0
 80071c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2201      	movs	r2, #1
 80071c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d102      	bne.n	80071e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d109      	bne.n	8007200 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	6979      	ldr	r1, [r7, #20]
 80071fa:	f005 fcd9 	bl	800cbb0 <USB_EP0StartXfer>
 80071fe:	e008      	b.n	8007212 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6818      	ldr	r0, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	6979      	ldr	r1, [r7, #20]
 800720e:	f005 fa83 	bl	800c718 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	f003 020f 	and.w	r2, r3, #15
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d901      	bls.n	800723a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e050      	b.n	80072dc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800723a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800723e:	2b00      	cmp	r3, #0
 8007240:	da0f      	bge.n	8007262 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	f003 020f 	and.w	r2, r3, #15
 8007248:	4613      	mov	r3, r2
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	3338      	adds	r3, #56	; 0x38
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4413      	add	r3, r2
 8007256:	3304      	adds	r3, #4
 8007258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	705a      	strb	r2, [r3, #1]
 8007260:	e00d      	b.n	800727e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	4613      	mov	r3, r2
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	4413      	add	r3, r2
 8007274:	3304      	adds	r3, #4
 8007276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_PCD_EP_SetStall+0x82>
 800729a:	2302      	movs	r3, #2
 800729c:	e01e      	b.n	80072dc <HAL_PCD_EP_SetStall+0xc0>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68f9      	ldr	r1, [r7, #12]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f005 fe35 	bl	800cf1c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	b2d9      	uxtb	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072cc:	461a      	mov	r2, r3
 80072ce:	f006 f815 	bl	800d2fc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	f003 020f 	and.w	r2, r3, #15
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d901      	bls.n	8007302 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e042      	b.n	8007388 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007306:	2b00      	cmp	r3, #0
 8007308:	da0f      	bge.n	800732a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800730a:	78fb      	ldrb	r3, [r7, #3]
 800730c:	f003 020f 	and.w	r2, r3, #15
 8007310:	4613      	mov	r3, r2
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	3338      	adds	r3, #56	; 0x38
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	3304      	adds	r3, #4
 8007320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2201      	movs	r2, #1
 8007326:	705a      	strb	r2, [r3, #1]
 8007328:	e00f      	b.n	800734a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	f003 020f 	and.w	r2, r3, #15
 8007330:	4613      	mov	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4413      	add	r3, r2
 8007340:	3304      	adds	r3, #4
 8007342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_PCD_EP_ClrStall+0x86>
 8007366:	2302      	movs	r3, #2
 8007368:	e00e      	b.n	8007388 <HAL_PCD_EP_ClrStall+0xa4>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	4618      	mov	r0, r3
 800737a:	f005 fe3d 	bl	800cff8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	; 0x28
 8007394:	af02      	add	r7, sp, #8
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	4613      	mov	r3, r2
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	1a9b      	subs	r3, r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	3338      	adds	r3, #56	; 0x38
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	3304      	adds	r3, #4
 80073b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d901      	bls.n	80073c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e06c      	b.n	80074a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	695a      	ldr	r2, [r3, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d902      	bls.n	80073e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	3303      	adds	r3, #3
 80073e8:	089b      	lsrs	r3, r3, #2
 80073ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80073ec:	e02b      	b.n	8007446 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	695a      	ldr	r2, [r3, #20]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	429a      	cmp	r2, r3
 8007402:	d902      	bls.n	800740a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3303      	adds	r3, #3
 800740e:	089b      	lsrs	r3, r3, #2
 8007410:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	68d9      	ldr	r1, [r3, #12]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007422:	b2db      	uxtb	r3, r3
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	4603      	mov	r3, r0
 8007428:	6978      	ldr	r0, [r7, #20]
 800742a:	f005 fd19 	bl	800ce60 <USB_WritePacket>

    ep->xfer_buff  += len;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	441a      	add	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	441a      	add	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	b29b      	uxth	r3, r3
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	429a      	cmp	r2, r3
 800745a:	d809      	bhi.n	8007470 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	699a      	ldr	r2, [r3, #24]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007464:	429a      	cmp	r2, r3
 8007466:	d203      	bcs.n	8007470 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1be      	bne.n	80073ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	429a      	cmp	r2, r3
 800747a:	d811      	bhi.n	80074a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	2201      	movs	r2, #1
 8007484:	fa02 f303 	lsl.w	r3, r2, r3
 8007488:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	43db      	mvns	r3, r3
 8007496:	6939      	ldr	r1, [r7, #16]
 8007498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800749c:	4013      	ands	r3, r2
 800749e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3720      	adds	r7, #32
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
	...

080074ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	333c      	adds	r3, #60	; 0x3c
 80074c4:	3304      	adds	r3, #4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	f040 80a0 	bne.w	8007624 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d015      	beq.n	800751a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4a72      	ldr	r2, [pc, #456]	; (80076bc <PCD_EP_OutXfrComplete_int+0x210>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	f240 80dd 	bls.w	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 80d7 	beq.w	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	461a      	mov	r2, r3
 8007512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007516:	6093      	str	r3, [r2, #8]
 8007518:	e0cb      	b.n	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007530:	461a      	mov	r2, r3
 8007532:	2320      	movs	r3, #32
 8007534:	6093      	str	r3, [r2, #8]
 8007536:	e0bc      	b.n	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	f040 80b7 	bne.w	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4a5d      	ldr	r2, [pc, #372]	; (80076bc <PCD_EP_OutXfrComplete_int+0x210>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d90f      	bls.n	800756c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007562:	461a      	mov	r2, r3
 8007564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007568:	6093      	str	r3, [r2, #8]
 800756a:	e0a2      	b.n	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	440b      	add	r3, r1
 800757a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800757e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	0159      	lsls	r1, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	440b      	add	r3, r1
 8007588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007592:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	4613      	mov	r3, r2
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	1a9b      	subs	r3, r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4403      	add	r3, r0
 80075a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80075a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4613      	mov	r3, r2
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075ba:	6819      	ldr	r1, [r3, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4403      	add	r3, r0
 80075ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4419      	add	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4403      	add	r3, r0
 80075e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80075e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d114      	bne.n	8007616 <PCD_EP_OutXfrComplete_int+0x16a>
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	4613      	mov	r3, r2
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d108      	bne.n	8007616 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800760e:	461a      	mov	r2, r3
 8007610:	2101      	movs	r1, #1
 8007612:	f005 fe73 	bl	800d2fc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f007 fd97 	bl	800f150 <HAL_PCD_DataOutStageCallback>
 8007622:	e046      	b.n	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a26      	ldr	r2, [pc, #152]	; (80076c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d124      	bne.n	8007676 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007642:	461a      	mov	r2, r3
 8007644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007648:	6093      	str	r3, [r2, #8]
 800764a:	e032      	b.n	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d008      	beq.n	8007668 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	461a      	mov	r2, r3
 8007664:	2320      	movs	r3, #32
 8007666:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f007 fd6e 	bl	800f150 <HAL_PCD_DataOutStageCallback>
 8007674:	e01d      	b.n	80076b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d114      	bne.n	80076a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d108      	bne.n	80076a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6818      	ldr	r0, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800769e:	461a      	mov	r2, r3
 80076a0:	2100      	movs	r1, #0
 80076a2:	f005 fe2b 	bl	800d2fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f007 fd4f 	bl	800f150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	4f54300a 	.word	0x4f54300a
 80076c0:	4f54310a 	.word	0x4f54310a

080076c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	333c      	adds	r3, #60	; 0x3c
 80076dc:	3304      	adds	r3, #4
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4a15      	ldr	r2, [pc, #84]	; (800774c <PCD_EP_OutSetupPacket_int+0x88>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d90e      	bls.n	8007718 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007700:	2b00      	cmp	r3, #0
 8007702:	d009      	beq.n	8007718 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	461a      	mov	r2, r3
 8007712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007716:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f007 fd07 	bl	800f12c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a0a      	ldr	r2, [pc, #40]	; (800774c <PCD_EP_OutSetupPacket_int+0x88>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d90c      	bls.n	8007740 <PCD_EP_OutSetupPacket_int+0x7c>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d108      	bne.n	8007740 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007738:	461a      	mov	r2, r3
 800773a:	2101      	movs	r1, #1
 800773c:	f005 fdde 	bl	800d2fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	4f54300a 	.word	0x4f54300a

08007750 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
 800775c:	4613      	mov	r3, r2
 800775e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d107      	bne.n	800777e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800776e:	883b      	ldrh	r3, [r7, #0]
 8007770:	0419      	lsls	r1, r3, #16
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	430a      	orrs	r2, r1
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
 800777c:	e028      	b.n	80077d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	0c1b      	lsrs	r3, r3, #16
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	4413      	add	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]
 8007790:	e00d      	b.n	80077ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	3340      	adds	r3, #64	; 0x40
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	0c1b      	lsrs	r3, r3, #16
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	4413      	add	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	3301      	adds	r3, #1
 80077ac:	73fb      	strb	r3, [r7, #15]
 80077ae:	7bfa      	ldrb	r2, [r7, #15]
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d3ec      	bcc.n	8007792 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80077b8:	883b      	ldrh	r3, [r7, #0]
 80077ba:	0418      	lsls	r0, r3, #16
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	4302      	orrs	r2, r0
 80077c8:	3340      	adds	r3, #64	; 0x40
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	440b      	add	r3, r1
 80077ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	887a      	ldrh	r2, [r7, #2]
 80077f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <HAL_PCDEx_ActivateLPM+0x44>)
 8007830:	4313      	orrs	r3, r2
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	10000003 	.word	0x10000003

08007848 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007868:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <HAL_PWREx_ConfigSupply+0x70>)
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b04      	cmp	r3, #4
 8007872:	d00a      	beq.n	800788a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <HAL_PWREx_ConfigSupply+0x70>)
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	429a      	cmp	r2, r3
 8007880:	d001      	beq.n	8007886 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e01f      	b.n	80078c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	e01d      	b.n	80078c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800788a:	4b11      	ldr	r3, [pc, #68]	; (80078d0 <HAL_PWREx_ConfigSupply+0x70>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	f023 0207 	bic.w	r2, r3, #7
 8007892:	490f      	ldr	r1, [pc, #60]	; (80078d0 <HAL_PWREx_ConfigSupply+0x70>)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4313      	orrs	r3, r2
 8007898:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800789a:	f7f9 ff8b 	bl	80017b4 <HAL_GetTick>
 800789e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078a0:	e009      	b.n	80078b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078a2:	f7f9 ff87 	bl	80017b4 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078b0:	d901      	bls.n	80078b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e007      	b.n	80078c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078b6:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <HAL_PWREx_ConfigSupply+0x70>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c2:	d1ee      	bne.n	80078a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	58024800 	.word	0x58024800

080078d4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80078d8:	4b05      	ldr	r3, [pc, #20]	; (80078f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80078de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e2:	60d3      	str	r3, [r2, #12]
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	58024800 	.word	0x58024800

080078f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08c      	sub	sp, #48	; 0x30
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e3ff      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8087 	beq.w	8007a22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007914:	4b99      	ldr	r3, [pc, #612]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800791e:	4b97      	ldr	r3, [pc, #604]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	2b10      	cmp	r3, #16
 8007928:	d007      	beq.n	800793a <HAL_RCC_OscConfig+0x46>
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	2b18      	cmp	r3, #24
 800792e:	d110      	bne.n	8007952 <HAL_RCC_OscConfig+0x5e>
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	2b02      	cmp	r3, #2
 8007938:	d10b      	bne.n	8007952 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800793a:	4b90      	ldr	r3, [pc, #576]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d06c      	beq.n	8007a20 <HAL_RCC_OscConfig+0x12c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d168      	bne.n	8007a20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e3d9      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800795a:	d106      	bne.n	800796a <HAL_RCC_OscConfig+0x76>
 800795c:	4b87      	ldr	r3, [pc, #540]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a86      	ldr	r2, [pc, #536]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	e02e      	b.n	80079c8 <HAL_RCC_OscConfig+0xd4>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10c      	bne.n	800798c <HAL_RCC_OscConfig+0x98>
 8007972:	4b82      	ldr	r3, [pc, #520]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a81      	ldr	r2, [pc, #516]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	4b7f      	ldr	r3, [pc, #508]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a7e      	ldr	r2, [pc, #504]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e01d      	b.n	80079c8 <HAL_RCC_OscConfig+0xd4>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007994:	d10c      	bne.n	80079b0 <HAL_RCC_OscConfig+0xbc>
 8007996:	4b79      	ldr	r3, [pc, #484]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a78      	ldr	r2, [pc, #480]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 800799c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079a0:	6013      	str	r3, [r2, #0]
 80079a2:	4b76      	ldr	r3, [pc, #472]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a75      	ldr	r2, [pc, #468]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 80079a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	e00b      	b.n	80079c8 <HAL_RCC_OscConfig+0xd4>
 80079b0:	4b72      	ldr	r3, [pc, #456]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a71      	ldr	r2, [pc, #452]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 80079b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	4b6f      	ldr	r3, [pc, #444]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a6e      	ldr	r2, [pc, #440]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 80079c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d013      	beq.n	80079f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7f9 fef0 	bl	80017b4 <HAL_GetTick>
 80079d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079d8:	f7f9 feec 	bl	80017b4 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b64      	cmp	r3, #100	; 0x64
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e38d      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ea:	4b64      	ldr	r3, [pc, #400]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0f0      	beq.n	80079d8 <HAL_RCC_OscConfig+0xe4>
 80079f6:	e014      	b.n	8007a22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f8:	f7f9 fedc 	bl	80017b4 <HAL_GetTick>
 80079fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a00:	f7f9 fed8 	bl	80017b4 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	; 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e379      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a12:	4b5a      	ldr	r3, [pc, #360]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f0      	bne.n	8007a00 <HAL_RCC_OscConfig+0x10c>
 8007a1e:	e000      	b.n	8007a22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80ae 	beq.w	8007b8c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a30:	4b52      	ldr	r3, [pc, #328]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a3a:	4b50      	ldr	r3, [pc, #320]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_RCC_OscConfig+0x162>
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	2b18      	cmp	r3, #24
 8007a4a:	d13a      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x1ce>
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d135      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a56:	4b49      	ldr	r3, [pc, #292]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0304 	and.w	r3, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_RCC_OscConfig+0x17a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e34b      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6e:	f7f9 fecf 	bl	8001810 <HAL_GetREVID>
 8007a72:	4602      	mov	r2, r0
 8007a74:	f241 0303 	movw	r3, #4099	; 0x1003
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d817      	bhi.n	8007aac <HAL_RCC_OscConfig+0x1b8>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	2b40      	cmp	r3, #64	; 0x40
 8007a82:	d108      	bne.n	8007a96 <HAL_RCC_OscConfig+0x1a2>
 8007a84:	4b3d      	ldr	r3, [pc, #244]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a8c:	4a3b      	ldr	r2, [pc, #236]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a92:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a94:	e07a      	b.n	8007b8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a96:	4b39      	ldr	r3, [pc, #228]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	031b      	lsls	r3, r3, #12
 8007aa4:	4935      	ldr	r1, [pc, #212]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aaa:	e06f      	b.n	8007b8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aac:	4b33      	ldr	r3, [pc, #204]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	061b      	lsls	r3, r3, #24
 8007aba:	4930      	ldr	r1, [pc, #192]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ac0:	e064      	b.n	8007b8c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d045      	beq.n	8007b56 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007aca:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f023 0219 	bic.w	r2, r3, #25
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	4929      	ldr	r1, [pc, #164]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007adc:	f7f9 fe6a 	bl	80017b4 <HAL_GetTick>
 8007ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ae4:	f7f9 fe66 	bl	80017b4 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e307      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007af6:	4b21      	ldr	r3, [pc, #132]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f0      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b02:	f7f9 fe85 	bl	8001810 <HAL_GetREVID>
 8007b06:	4602      	mov	r2, r0
 8007b08:	f241 0303 	movw	r3, #4099	; 0x1003
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d817      	bhi.n	8007b40 <HAL_RCC_OscConfig+0x24c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d108      	bne.n	8007b2a <HAL_RCC_OscConfig+0x236>
 8007b18:	4b18      	ldr	r3, [pc, #96]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b20:	4a16      	ldr	r2, [pc, #88]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b26:	6053      	str	r3, [r2, #4]
 8007b28:	e030      	b.n	8007b8c <HAL_RCC_OscConfig+0x298>
 8007b2a:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	031b      	lsls	r3, r3, #12
 8007b38:	4910      	ldr	r1, [pc, #64]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	604b      	str	r3, [r1, #4]
 8007b3e:	e025      	b.n	8007b8c <HAL_RCC_OscConfig+0x298>
 8007b40:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	061b      	lsls	r3, r3, #24
 8007b4e:	490b      	ldr	r1, [pc, #44]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	604b      	str	r3, [r1, #4]
 8007b54:	e01a      	b.n	8007b8c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b56:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a08      	ldr	r2, [pc, #32]	; (8007b7c <HAL_RCC_OscConfig+0x288>)
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b62:	f7f9 fe27 	bl	80017b4 <HAL_GetTick>
 8007b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b68:	e00a      	b.n	8007b80 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b6a:	f7f9 fe23 	bl	80017b4 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d903      	bls.n	8007b80 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e2c4      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
 8007b7c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b80:	4ba4      	ldr	r3, [pc, #656]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1ee      	bne.n	8007b6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80a9 	beq.w	8007cec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b9a:	4b9e      	ldr	r3, [pc, #632]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ba2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ba4:	4b9b      	ldr	r3, [pc, #620]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d007      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x2cc>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b18      	cmp	r3, #24
 8007bb4:	d13a      	bne.n	8007c2c <HAL_RCC_OscConfig+0x338>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d135      	bne.n	8007c2c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bc0:	4b94      	ldr	r3, [pc, #592]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x2e4>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	2b80      	cmp	r3, #128	; 0x80
 8007bd2:	d001      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e296      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bd8:	f7f9 fe1a 	bl	8001810 <HAL_GetREVID>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	f241 0303 	movw	r3, #4099	; 0x1003
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d817      	bhi.n	8007c16 <HAL_RCC_OscConfig+0x322>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	2b20      	cmp	r3, #32
 8007bec:	d108      	bne.n	8007c00 <HAL_RCC_OscConfig+0x30c>
 8007bee:	4b89      	ldr	r3, [pc, #548]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007bf6:	4a87      	ldr	r2, [pc, #540]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bfe:	e075      	b.n	8007cec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c00:	4b84      	ldr	r3, [pc, #528]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	069b      	lsls	r3, r3, #26
 8007c0e:	4981      	ldr	r1, [pc, #516]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c14:	e06a      	b.n	8007cec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c16:	4b7f      	ldr	r3, [pc, #508]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	061b      	lsls	r3, r3, #24
 8007c24:	497b      	ldr	r1, [pc, #492]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c2a:	e05f      	b.n	8007cec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d042      	beq.n	8007cba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c34:	4b77      	ldr	r3, [pc, #476]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a76      	ldr	r2, [pc, #472]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c40:	f7f9 fdb8 	bl	80017b4 <HAL_GetTick>
 8007c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c46:	e008      	b.n	8007c5a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007c48:	f7f9 fdb4 	bl	80017b4 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d901      	bls.n	8007c5a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e255      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c5a:	4b6e      	ldr	r3, [pc, #440]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0f0      	beq.n	8007c48 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c66:	f7f9 fdd3 	bl	8001810 <HAL_GetREVID>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d817      	bhi.n	8007ca4 <HAL_RCC_OscConfig+0x3b0>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	2b20      	cmp	r3, #32
 8007c7a:	d108      	bne.n	8007c8e <HAL_RCC_OscConfig+0x39a>
 8007c7c:	4b65      	ldr	r3, [pc, #404]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c84:	4a63      	ldr	r2, [pc, #396]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c8a:	6053      	str	r3, [r2, #4]
 8007c8c:	e02e      	b.n	8007cec <HAL_RCC_OscConfig+0x3f8>
 8007c8e:	4b61      	ldr	r3, [pc, #388]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	069b      	lsls	r3, r3, #26
 8007c9c:	495d      	ldr	r1, [pc, #372]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	604b      	str	r3, [r1, #4]
 8007ca2:	e023      	b.n	8007cec <HAL_RCC_OscConfig+0x3f8>
 8007ca4:	4b5b      	ldr	r3, [pc, #364]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	061b      	lsls	r3, r3, #24
 8007cb2:	4958      	ldr	r1, [pc, #352]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60cb      	str	r3, [r1, #12]
 8007cb8:	e018      	b.n	8007cec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007cba:	4b56      	ldr	r3, [pc, #344]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a55      	ldr	r2, [pc, #340]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc6:	f7f9 fd75 	bl	80017b4 <HAL_GetTick>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007cce:	f7f9 fd71 	bl	80017b4 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e212      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ce0:	4b4c      	ldr	r3, [pc, #304]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f0      	bne.n	8007cce <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d036      	beq.n	8007d66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d019      	beq.n	8007d34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d00:	4b44      	ldr	r3, [pc, #272]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d04:	4a43      	ldr	r2, [pc, #268]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d06:	f043 0301 	orr.w	r3, r3, #1
 8007d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d0c:	f7f9 fd52 	bl	80017b4 <HAL_GetTick>
 8007d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d12:	e008      	b.n	8007d26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d14:	f7f9 fd4e 	bl	80017b4 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e1ef      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d26:	4b3b      	ldr	r3, [pc, #236]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f0      	beq.n	8007d14 <HAL_RCC_OscConfig+0x420>
 8007d32:	e018      	b.n	8007d66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d34:	4b37      	ldr	r3, [pc, #220]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d38:	4a36      	ldr	r2, [pc, #216]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d40:	f7f9 fd38 	bl	80017b4 <HAL_GetTick>
 8007d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d48:	f7f9 fd34 	bl	80017b4 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e1d5      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d5a:	4b2e      	ldr	r3, [pc, #184]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d036      	beq.n	8007de0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d019      	beq.n	8007dae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d7a:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a25      	ldr	r2, [pc, #148]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d86:	f7f9 fd15 	bl	80017b4 <HAL_GetTick>
 8007d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007d8e:	f7f9 fd11 	bl	80017b4 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e1b2      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007da0:	4b1c      	ldr	r3, [pc, #112]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0f0      	beq.n	8007d8e <HAL_RCC_OscConfig+0x49a>
 8007dac:	e018      	b.n	8007de0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dae:	4b19      	ldr	r3, [pc, #100]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a18      	ldr	r2, [pc, #96]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007db8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dba:	f7f9 fcfb 	bl	80017b4 <HAL_GetTick>
 8007dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007dc2:	f7f9 fcf7 	bl	80017b4 <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e198      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <HAL_RCC_OscConfig+0x520>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f0      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 8085 	beq.w	8007ef8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007dee:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <HAL_RCC_OscConfig+0x524>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a09      	ldr	r2, [pc, #36]	; (8007e18 <HAL_RCC_OscConfig+0x524>)
 8007df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dfa:	f7f9 fcdb 	bl	80017b4 <HAL_GetTick>
 8007dfe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e00:	e00c      	b.n	8007e1c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e02:	f7f9 fcd7 	bl	80017b4 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b64      	cmp	r3, #100	; 0x64
 8007e0e:	d905      	bls.n	8007e1c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e178      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
 8007e14:	58024400 	.word	0x58024400
 8007e18:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e1c:	4b96      	ldr	r3, [pc, #600]	; (8008078 <HAL_RCC_OscConfig+0x784>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d0ec      	beq.n	8007e02 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d106      	bne.n	8007e3e <HAL_RCC_OscConfig+0x54a>
 8007e30:	4b92      	ldr	r3, [pc, #584]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e34:	4a91      	ldr	r2, [pc, #580]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e3c:	e02d      	b.n	8007e9a <HAL_RCC_OscConfig+0x5a6>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10c      	bne.n	8007e60 <HAL_RCC_OscConfig+0x56c>
 8007e46:	4b8d      	ldr	r3, [pc, #564]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4a:	4a8c      	ldr	r2, [pc, #560]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e4c:	f023 0301 	bic.w	r3, r3, #1
 8007e50:	6713      	str	r3, [r2, #112]	; 0x70
 8007e52:	4b8a      	ldr	r3, [pc, #552]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e56:	4a89      	ldr	r2, [pc, #548]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e58:	f023 0304 	bic.w	r3, r3, #4
 8007e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e5e:	e01c      	b.n	8007e9a <HAL_RCC_OscConfig+0x5a6>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b05      	cmp	r3, #5
 8007e66:	d10c      	bne.n	8007e82 <HAL_RCC_OscConfig+0x58e>
 8007e68:	4b84      	ldr	r3, [pc, #528]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6c:	4a83      	ldr	r2, [pc, #524]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e6e:	f043 0304 	orr.w	r3, r3, #4
 8007e72:	6713      	str	r3, [r2, #112]	; 0x70
 8007e74:	4b81      	ldr	r3, [pc, #516]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e78:	4a80      	ldr	r2, [pc, #512]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e7a:	f043 0301 	orr.w	r3, r3, #1
 8007e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007e80:	e00b      	b.n	8007e9a <HAL_RCC_OscConfig+0x5a6>
 8007e82:	4b7e      	ldr	r3, [pc, #504]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e86:	4a7d      	ldr	r2, [pc, #500]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e8e:	4b7b      	ldr	r3, [pc, #492]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e92:	4a7a      	ldr	r2, [pc, #488]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007e94:	f023 0304 	bic.w	r3, r3, #4
 8007e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d015      	beq.n	8007ece <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea2:	f7f9 fc87 	bl	80017b4 <HAL_GetTick>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ea8:	e00a      	b.n	8007ec0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eaa:	f7f9 fc83 	bl	80017b4 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d901      	bls.n	8007ec0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e122      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ec0:	4b6e      	ldr	r3, [pc, #440]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0ee      	beq.n	8007eaa <HAL_RCC_OscConfig+0x5b6>
 8007ecc:	e014      	b.n	8007ef8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ece:	f7f9 fc71 	bl	80017b4 <HAL_GetTick>
 8007ed2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ed4:	e00a      	b.n	8007eec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ed6:	f7f9 fc6d 	bl	80017b4 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e10c      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007eec:	4b63      	ldr	r3, [pc, #396]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1ee      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8101 	beq.w	8008104 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f02:	4b5e      	ldr	r3, [pc, #376]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f0a:	2b18      	cmp	r3, #24
 8007f0c:	f000 80bc 	beq.w	8008088 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	f040 8095 	bne.w	8008044 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f1a:	4b58      	ldr	r3, [pc, #352]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a57      	ldr	r2, [pc, #348]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f26:	f7f9 fc45 	bl	80017b4 <HAL_GetTick>
 8007f2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f2e:	f7f9 fc41 	bl	80017b4 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e0e2      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f40:	4b4e      	ldr	r3, [pc, #312]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f0      	bne.n	8007f2e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f4c:	4b4b      	ldr	r3, [pc, #300]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f50:	4b4b      	ldr	r3, [pc, #300]	; (8008080 <HAL_RCC_OscConfig+0x78c>)
 8007f52:	4013      	ands	r3, r2
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f5c:	0112      	lsls	r2, r2, #4
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	4946      	ldr	r1, [pc, #280]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	628b      	str	r3, [r1, #40]	; 0x28
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	3b01      	subs	r3, #1
 8007f76:	025b      	lsls	r3, r3, #9
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	3b01      	subs	r3, #1
 8007f82:	041b      	lsls	r3, r3, #16
 8007f84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f96:	4939      	ldr	r1, [pc, #228]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007f9c:	4b37      	ldr	r3, [pc, #220]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	4a36      	ldr	r2, [pc, #216]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fa8:	4b34      	ldr	r3, [pc, #208]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fac:	4b35      	ldr	r3, [pc, #212]	; (8008084 <HAL_RCC_OscConfig+0x790>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fb4:	00d2      	lsls	r2, r2, #3
 8007fb6:	4931      	ldr	r1, [pc, #196]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fbc:	4b2f      	ldr	r3, [pc, #188]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	f023 020c 	bic.w	r2, r3, #12
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	492c      	ldr	r1, [pc, #176]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007fce:	4b2b      	ldr	r3, [pc, #172]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	f023 0202 	bic.w	r2, r3, #2
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	4928      	ldr	r1, [pc, #160]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fe0:	4b26      	ldr	r3, [pc, #152]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	4a25      	ldr	r2, [pc, #148]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fec:	4b23      	ldr	r3, [pc, #140]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	4a22      	ldr	r2, [pc, #136]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ff8:	4b20      	ldr	r3, [pc, #128]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8007ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008004:	4b1d      	ldr	r3, [pc, #116]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4a1c      	ldr	r2, [pc, #112]	; (800807c <HAL_RCC_OscConfig+0x788>)
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008010:	4b1a      	ldr	r3, [pc, #104]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a19      	ldr	r2, [pc, #100]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8008016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800801a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801c:	f7f9 fbca 	bl	80017b4 <HAL_GetTick>
 8008020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008024:	f7f9 fbc6 	bl	80017b4 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e067      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008036:	4b11      	ldr	r3, [pc, #68]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f0      	beq.n	8008024 <HAL_RCC_OscConfig+0x730>
 8008042:	e05f      	b.n	8008104 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <HAL_RCC_OscConfig+0x788>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a0c      	ldr	r2, [pc, #48]	; (800807c <HAL_RCC_OscConfig+0x788>)
 800804a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800804e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008050:	f7f9 fbb0 	bl	80017b4 <HAL_GetTick>
 8008054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008058:	f7f9 fbac 	bl	80017b4 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e04d      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800806a:	4b04      	ldr	r3, [pc, #16]	; (800807c <HAL_RCC_OscConfig+0x788>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f0      	bne.n	8008058 <HAL_RCC_OscConfig+0x764>
 8008076:	e045      	b.n	8008104 <HAL_RCC_OscConfig+0x810>
 8008078:	58024800 	.word	0x58024800
 800807c:	58024400 	.word	0x58024400
 8008080:	fffffc0c 	.word	0xfffffc0c
 8008084:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008088:	4b21      	ldr	r3, [pc, #132]	; (8008110 <HAL_RCC_OscConfig+0x81c>)
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800808e:	4b20      	ldr	r3, [pc, #128]	; (8008110 <HAL_RCC_OscConfig+0x81c>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b01      	cmp	r3, #1
 800809a:	d031      	beq.n	8008100 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f003 0203 	and.w	r2, r3, #3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d12a      	bne.n	8008100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	091b      	lsrs	r3, r3, #4
 80080ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d122      	bne.n	8008100 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d11a      	bne.n	8008100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	0a5b      	lsrs	r3, r3, #9
 80080ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080d8:	429a      	cmp	r2, r3
 80080da:	d111      	bne.n	8008100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	0c1b      	lsrs	r3, r3, #16
 80080e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d108      	bne.n	8008100 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	0e1b      	lsrs	r3, r3, #24
 80080f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d001      	beq.n	8008104 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3730      	adds	r7, #48	; 0x30
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	58024400 	.word	0x58024400

08008114 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e19c      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008128:	4b8a      	ldr	r3, [pc, #552]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 030f 	and.w	r3, r3, #15
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d910      	bls.n	8008158 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008136:	4b87      	ldr	r3, [pc, #540]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f023 020f 	bic.w	r2, r3, #15
 800813e:	4985      	ldr	r1, [pc, #532]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	4313      	orrs	r3, r2
 8008144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008146:	4b83      	ldr	r3, [pc, #524]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 030f 	and.w	r3, r3, #15
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d001      	beq.n	8008158 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e184      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b00      	cmp	r3, #0
 8008162:	d010      	beq.n	8008186 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	4b7b      	ldr	r3, [pc, #492]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008170:	429a      	cmp	r2, r3
 8008172:	d908      	bls.n	8008186 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008174:	4b78      	ldr	r3, [pc, #480]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	4975      	ldr	r1, [pc, #468]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008182:	4313      	orrs	r3, r2
 8008184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d010      	beq.n	80081b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695a      	ldr	r2, [r3, #20]
 8008196:	4b70      	ldr	r3, [pc, #448]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800819e:	429a      	cmp	r2, r3
 80081a0:	d908      	bls.n	80081b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081a2:	4b6d      	ldr	r3, [pc, #436]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	496a      	ldr	r1, [pc, #424]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d010      	beq.n	80081e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	4b64      	ldr	r3, [pc, #400]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d908      	bls.n	80081e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081d0:	4b61      	ldr	r3, [pc, #388]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	495e      	ldr	r1, [pc, #376]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d010      	beq.n	8008210 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69da      	ldr	r2, [r3, #28]
 80081f2:	4b59      	ldr	r3, [pc, #356]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d908      	bls.n	8008210 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80081fe:	4b56      	ldr	r3, [pc, #344]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	4953      	ldr	r1, [pc, #332]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 800820c:	4313      	orrs	r3, r2
 800820e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d010      	beq.n	800823e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	4b4d      	ldr	r3, [pc, #308]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	429a      	cmp	r2, r3
 800822a:	d908      	bls.n	800823e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800822c:	4b4a      	ldr	r3, [pc, #296]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f023 020f 	bic.w	r2, r3, #15
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	4947      	ldr	r1, [pc, #284]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 800823a:	4313      	orrs	r3, r2
 800823c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d055      	beq.n	80082f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800824a:	4b43      	ldr	r3, [pc, #268]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	4940      	ldr	r1, [pc, #256]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008258:	4313      	orrs	r3, r2
 800825a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d107      	bne.n	8008274 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008264:	4b3c      	ldr	r3, [pc, #240]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d121      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e0f6      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d107      	bne.n	800828c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800827c:	4b36      	ldr	r3, [pc, #216]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d115      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e0ea      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d107      	bne.n	80082a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008294:	4b30      	ldr	r3, [pc, #192]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e0de      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082a4:	4b2c      	ldr	r3, [pc, #176]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0d6      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082b4:	4b28      	ldr	r3, [pc, #160]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f023 0207 	bic.w	r2, r3, #7
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4925      	ldr	r1, [pc, #148]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c6:	f7f9 fa75 	bl	80017b4 <HAL_GetTick>
 80082ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082cc:	e00a      	b.n	80082e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082ce:	f7f9 fa71 	bl	80017b4 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082dc:	4293      	cmp	r3, r2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e0be      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082e4:	4b1c      	ldr	r3, [pc, #112]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d1eb      	bne.n	80082ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d010      	beq.n	8008324 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	4b14      	ldr	r3, [pc, #80]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f003 030f 	and.w	r3, r3, #15
 800830e:	429a      	cmp	r2, r3
 8008310:	d208      	bcs.n	8008324 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f023 020f 	bic.w	r2, r3, #15
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	490e      	ldr	r1, [pc, #56]	; (8008358 <HAL_RCC_ClockConfig+0x244>)
 8008320:	4313      	orrs	r3, r2
 8008322:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	429a      	cmp	r2, r3
 8008330:	d214      	bcs.n	800835c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008332:	4b08      	ldr	r3, [pc, #32]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f023 020f 	bic.w	r2, r3, #15
 800833a:	4906      	ldr	r1, [pc, #24]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	4313      	orrs	r3, r2
 8008340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008342:	4b04      	ldr	r3, [pc, #16]	; (8008354 <HAL_RCC_ClockConfig+0x240>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	d005      	beq.n	800835c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e086      	b.n	8008462 <HAL_RCC_ClockConfig+0x34e>
 8008354:	52002000 	.word	0x52002000
 8008358:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d010      	beq.n	800838a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	4b3f      	ldr	r3, [pc, #252]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008374:	429a      	cmp	r2, r3
 8008376:	d208      	bcs.n	800838a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008378:	4b3c      	ldr	r3, [pc, #240]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	4939      	ldr	r1, [pc, #228]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 8008386:	4313      	orrs	r3, r2
 8008388:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d010      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	4b34      	ldr	r3, [pc, #208]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d208      	bcs.n	80083b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083a6:	4b31      	ldr	r3, [pc, #196]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	492e      	ldr	r1, [pc, #184]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d010      	beq.n	80083e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	4b28      	ldr	r3, [pc, #160]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d208      	bcs.n	80083e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083d4:	4b25      	ldr	r3, [pc, #148]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	4922      	ldr	r1, [pc, #136]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d010      	beq.n	8008414 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69da      	ldr	r2, [r3, #28]
 80083f6:	4b1d      	ldr	r3, [pc, #116]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083fe:	429a      	cmp	r2, r3
 8008400:	d208      	bcs.n	8008414 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008402:	4b1a      	ldr	r3, [pc, #104]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	4917      	ldr	r1, [pc, #92]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 8008410:	4313      	orrs	r3, r2
 8008412:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008414:	f000 f834 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 8008418:	4601      	mov	r1, r0
 800841a:	4b14      	ldr	r3, [pc, #80]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	0a1b      	lsrs	r3, r3, #8
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	4a12      	ldr	r2, [pc, #72]	; (8008470 <HAL_RCC_ClockConfig+0x35c>)
 8008426:	5cd3      	ldrb	r3, [r2, r3]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	fa21 f303 	lsr.w	r3, r1, r3
 8008430:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008432:	4b0e      	ldr	r3, [pc, #56]	; (800846c <HAL_RCC_ClockConfig+0x358>)
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	4a0d      	ldr	r2, [pc, #52]	; (8008470 <HAL_RCC_ClockConfig+0x35c>)
 800843c:	5cd3      	ldrb	r3, [r2, r3]
 800843e:	f003 031f 	and.w	r3, r3, #31
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	fa22 f303 	lsr.w	r3, r2, r3
 8008448:	4a0a      	ldr	r2, [pc, #40]	; (8008474 <HAL_RCC_ClockConfig+0x360>)
 800844a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800844c:	4a0a      	ldr	r2, [pc, #40]	; (8008478 <HAL_RCC_ClockConfig+0x364>)
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008452:	4b0a      	ldr	r3, [pc, #40]	; (800847c <HAL_RCC_ClockConfig+0x368>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7f9 f962 	bl	8001720 <HAL_InitTick>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	58024400 	.word	0x58024400
 8008470:	0800ffe0 	.word	0x0800ffe0
 8008474:	24000004 	.word	0x24000004
 8008478:	24000000 	.word	0x24000000
 800847c:	24000008 	.word	0x24000008

08008480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008480:	b480      	push	{r7}
 8008482:	b089      	sub	sp, #36	; 0x24
 8008484:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008486:	4baf      	ldr	r3, [pc, #700]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800848e:	2b18      	cmp	r3, #24
 8008490:	f200 814e 	bhi.w	8008730 <HAL_RCC_GetSysClockFreq+0x2b0>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	08008501 	.word	0x08008501
 80084a0:	08008731 	.word	0x08008731
 80084a4:	08008731 	.word	0x08008731
 80084a8:	08008731 	.word	0x08008731
 80084ac:	08008731 	.word	0x08008731
 80084b0:	08008731 	.word	0x08008731
 80084b4:	08008731 	.word	0x08008731
 80084b8:	08008731 	.word	0x08008731
 80084bc:	08008527 	.word	0x08008527
 80084c0:	08008731 	.word	0x08008731
 80084c4:	08008731 	.word	0x08008731
 80084c8:	08008731 	.word	0x08008731
 80084cc:	08008731 	.word	0x08008731
 80084d0:	08008731 	.word	0x08008731
 80084d4:	08008731 	.word	0x08008731
 80084d8:	08008731 	.word	0x08008731
 80084dc:	0800852d 	.word	0x0800852d
 80084e0:	08008731 	.word	0x08008731
 80084e4:	08008731 	.word	0x08008731
 80084e8:	08008731 	.word	0x08008731
 80084ec:	08008731 	.word	0x08008731
 80084f0:	08008731 	.word	0x08008731
 80084f4:	08008731 	.word	0x08008731
 80084f8:	08008731 	.word	0x08008731
 80084fc:	08008533 	.word	0x08008533
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008500:	4b90      	ldr	r3, [pc, #576]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800850c:	4b8d      	ldr	r3, [pc, #564]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	08db      	lsrs	r3, r3, #3
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	4a8c      	ldr	r2, [pc, #560]	; (8008748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
 800851c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800851e:	e10a      	b.n	8008736 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008520:	4b89      	ldr	r3, [pc, #548]	; (8008748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008522:	61bb      	str	r3, [r7, #24]
    break;
 8008524:	e107      	b.n	8008736 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008526:	4b89      	ldr	r3, [pc, #548]	; (800874c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008528:	61bb      	str	r3, [r7, #24]
    break;
 800852a:	e104      	b.n	8008736 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800852c:	4b88      	ldr	r3, [pc, #544]	; (8008750 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800852e:	61bb      	str	r3, [r7, #24]
    break;
 8008530:	e101      	b.n	8008736 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008532:	4b84      	ldr	r3, [pc, #528]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008536:	f003 0303 	and.w	r3, r3, #3
 800853a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800853c:	4b81      	ldr	r3, [pc, #516]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	091b      	lsrs	r3, r3, #4
 8008542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008546:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008548:	4b7e      	ldr	r3, [pc, #504]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008552:	4b7c      	ldr	r3, [pc, #496]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008556:	08db      	lsrs	r3, r3, #3
 8008558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	fb02 f303 	mul.w	r3, r2, r3
 8008562:	ee07 3a90 	vmov	s15, r3
 8008566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80da 	beq.w	800872a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d05a      	beq.n	8008632 <HAL_RCC_GetSysClockFreq+0x1b2>
 800857c:	2b01      	cmp	r3, #1
 800857e:	d302      	bcc.n	8008586 <HAL_RCC_GetSysClockFreq+0x106>
 8008580:	2b02      	cmp	r3, #2
 8008582:	d078      	beq.n	8008676 <HAL_RCC_GetSysClockFreq+0x1f6>
 8008584:	e099      	b.n	80086ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008586:	4b6f      	ldr	r3, [pc, #444]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	d02d      	beq.n	80085ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008592:	4b6c      	ldr	r3, [pc, #432]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	08db      	lsrs	r3, r3, #3
 8008598:	f003 0303 	and.w	r3, r3, #3
 800859c:	4a6a      	ldr	r2, [pc, #424]	; (8008748 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800859e:	fa22 f303 	lsr.w	r3, r2, r3
 80085a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	ee07 3a90 	vmov	s15, r3
 80085b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085bc:	4b61      	ldr	r3, [pc, #388]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c4:	ee07 3a90 	vmov	s15, r3
 80085c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80085d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80085d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80085ec:	e087      	b.n	80086fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008758 <HAL_RCC_GetSysClockFreq+0x2d8>
 80085fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008600:	4b50      	ldr	r3, [pc, #320]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008608:	ee07 3a90 	vmov	s15, r3
 800860c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008610:	ed97 6a02 	vldr	s12, [r7, #8]
 8008614:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008754 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008630:	e065      	b.n	80086fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800875c <HAL_RCC_GetSysClockFreq+0x2dc>
 8008640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008644:	4b3f      	ldr	r3, [pc, #252]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864c:	ee07 3a90 	vmov	s15, r3
 8008650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008654:	ed97 6a02 	vldr	s12, [r7, #8]
 8008658:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008754 <HAL_RCC_GetSysClockFreq+0x2d4>
 800865c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008674:	e043      	b.n	80086fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008680:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008760 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008688:	4b2e      	ldr	r3, [pc, #184]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008690:	ee07 3a90 	vmov	s15, r3
 8008694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008698:	ed97 6a02 	vldr	s12, [r7, #8]
 800869c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80086a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086b8:	e021      	b.n	80086fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	ee07 3a90 	vmov	s15, r3
 80086c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800875c <HAL_RCC_GetSysClockFreq+0x2dc>
 80086c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086cc:	4b1d      	ldr	r3, [pc, #116]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d4:	ee07 3a90 	vmov	s15, r3
 80086d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80086e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008754 <HAL_RCC_GetSysClockFreq+0x2d4>
 80086e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	0a5b      	lsrs	r3, r3, #9
 8008704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008708:	3301      	adds	r3, #1
 800870a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008716:	edd7 6a07 	vldr	s13, [r7, #28]
 800871a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800871e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008722:	ee17 3a90 	vmov	r3, s15
 8008726:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008728:	e005      	b.n	8008736 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	61bb      	str	r3, [r7, #24]
    break;
 800872e:	e002      	b.n	8008736 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008732:	61bb      	str	r3, [r7, #24]
    break;
 8008734:	bf00      	nop
  }

  return sysclockfreq;
 8008736:	69bb      	ldr	r3, [r7, #24]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3724      	adds	r7, #36	; 0x24
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	58024400 	.word	0x58024400
 8008748:	03d09000 	.word	0x03d09000
 800874c:	003d0900 	.word	0x003d0900
 8008750:	007a1200 	.word	0x007a1200
 8008754:	46000000 	.word	0x46000000
 8008758:	4c742400 	.word	0x4c742400
 800875c:	4a742400 	.word	0x4a742400
 8008760:	4af42400 	.word	0x4af42400

08008764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800876a:	f7ff fe89 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 800876e:	4601      	mov	r1, r0
 8008770:	4b10      	ldr	r3, [pc, #64]	; (80087b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	0a1b      	lsrs	r3, r3, #8
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	4a0f      	ldr	r2, [pc, #60]	; (80087b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800877c:	5cd3      	ldrb	r3, [r2, r3]
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	fa21 f303 	lsr.w	r3, r1, r3
 8008786:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008788:	4b0a      	ldr	r3, [pc, #40]	; (80087b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008792:	5cd3      	ldrb	r3, [r2, r3]
 8008794:	f003 031f 	and.w	r3, r3, #31
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	fa22 f303 	lsr.w	r3, r2, r3
 800879e:	4a07      	ldr	r2, [pc, #28]	; (80087bc <HAL_RCC_GetHCLKFreq+0x58>)
 80087a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087a2:	4a07      	ldr	r2, [pc, #28]	; (80087c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80087a8:	4b04      	ldr	r3, [pc, #16]	; (80087bc <HAL_RCC_GetHCLKFreq+0x58>)
 80087aa:	681b      	ldr	r3, [r3, #0]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	58024400 	.word	0x58024400
 80087b8:	0800ffe0 	.word	0x0800ffe0
 80087bc:	24000004 	.word	0x24000004
 80087c0:	24000000 	.word	0x24000000

080087c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80087c8:	f7ff ffcc 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 80087cc:	4601      	mov	r1, r0
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	091b      	lsrs	r3, r3, #4
 80087d4:	f003 0307 	and.w	r3, r3, #7
 80087d8:	4a04      	ldr	r2, [pc, #16]	; (80087ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80087da:	5cd3      	ldrb	r3, [r2, r3]
 80087dc:	f003 031f 	and.w	r3, r3, #31
 80087e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	58024400 	.word	0x58024400
 80087ec:	0800ffe0 	.word	0x0800ffe0

080087f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80087f4:	f7ff ffb6 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 80087f8:	4601      	mov	r1, r0
 80087fa:	4b06      	ldr	r3, [pc, #24]	; (8008814 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	0a1b      	lsrs	r3, r3, #8
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	4a04      	ldr	r2, [pc, #16]	; (8008818 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008806:	5cd3      	ldrb	r3, [r2, r3]
 8008808:	f003 031f 	and.w	r3, r3, #31
 800880c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008810:	4618      	mov	r0, r3
 8008812:	bd80      	pop	{r7, pc}
 8008814:	58024400 	.word	0x58024400
 8008818:	0800ffe0 	.word	0x0800ffe0

0800881c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008824:	2300      	movs	r3, #0
 8008826:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008828:	2300      	movs	r3, #0
 800882a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d03d      	beq.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008840:	d013      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008846:	d802      	bhi.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008848:	2b00      	cmp	r3, #0
 800884a:	d007      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800884c:	e01f      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800884e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008852:	d013      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008854:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008858:	d01c      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800885a:	e018      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885c:	4baf      	ldr	r3, [pc, #700]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	4aae      	ldr	r2, [pc, #696]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008868:	e015      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3304      	adds	r3, #4
 800886e:	2102      	movs	r1, #2
 8008870:	4618      	mov	r0, r3
 8008872:	f001 fd33 	bl	800a2dc <RCCEx_PLL2_Config>
 8008876:	4603      	mov	r3, r0
 8008878:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800887a:	e00c      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3324      	adds	r3, #36	; 0x24
 8008880:	2102      	movs	r1, #2
 8008882:	4618      	mov	r0, r3
 8008884:	f001 fddc 	bl	800a440 <RCCEx_PLL3_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800888c:	e003      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	75fb      	strb	r3, [r7, #23]
      break;
 8008892:	e000      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d109      	bne.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800889c:	4b9f      	ldr	r3, [pc, #636]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800889e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088a8:	499c      	ldr	r1, [pc, #624]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	650b      	str	r3, [r1, #80]	; 0x50
 80088ae:	e001      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d03d      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	d826      	bhi.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80088c8:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	080088e5 	.word	0x080088e5
 80088d4:	080088f3 	.word	0x080088f3
 80088d8:	08008905 	.word	0x08008905
 80088dc:	0800891d 	.word	0x0800891d
 80088e0:	0800891d 	.word	0x0800891d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088e4:	4b8d      	ldr	r3, [pc, #564]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	4a8c      	ldr	r2, [pc, #560]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80088ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088f0:	e015      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3304      	adds	r3, #4
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 fcef 	bl	800a2dc <RCCEx_PLL2_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008902:	e00c      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	3324      	adds	r3, #36	; 0x24
 8008908:	2100      	movs	r1, #0
 800890a:	4618      	mov	r0, r3
 800890c:	f001 fd98 	bl	800a440 <RCCEx_PLL3_Config>
 8008910:	4603      	mov	r3, r0
 8008912:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008914:	e003      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	75fb      	strb	r3, [r7, #23]
      break;
 800891a:	e000      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800891c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800891e:	7dfb      	ldrb	r3, [r7, #23]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d109      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008924:	4b7d      	ldr	r3, [pc, #500]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008928:	f023 0207 	bic.w	r2, r3, #7
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008930:	497a      	ldr	r1, [pc, #488]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008932:	4313      	orrs	r3, r2
 8008934:	650b      	str	r3, [r1, #80]	; 0x50
 8008936:	e001      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008944:	2b00      	cmp	r3, #0
 8008946:	d03e      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d01c      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008950:	2b80      	cmp	r3, #128	; 0x80
 8008952:	d804      	bhi.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008954:	2b00      	cmp	r3, #0
 8008956:	d008      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008958:	2b40      	cmp	r3, #64	; 0x40
 800895a:	d00d      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800895c:	e01e      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800895e:	2bc0      	cmp	r3, #192	; 0xc0
 8008960:	d01f      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008966:	d01e      	beq.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008968:	e018      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800896a:	4b6c      	ldr	r3, [pc, #432]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	4a6b      	ldr	r2, [pc, #428]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008974:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008976:	e017      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3304      	adds	r3, #4
 800897c:	2100      	movs	r1, #0
 800897e:	4618      	mov	r0, r3
 8008980:	f001 fcac 	bl	800a2dc <RCCEx_PLL2_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008988:	e00e      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3324      	adds	r3, #36	; 0x24
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f001 fd55 	bl	800a440 <RCCEx_PLL3_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800899a:	e005      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	75fb      	strb	r3, [r7, #23]
      break;
 80089a0:	e002      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80089a2:	bf00      	nop
 80089a4:	e000      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80089a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089a8:	7dfb      	ldrb	r3, [r7, #23]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80089ae:	4b5b      	ldr	r3, [pc, #364]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ba:	4958      	ldr	r1, [pc, #352]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	650b      	str	r3, [r1, #80]	; 0x50
 80089c0:	e001      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d044      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80089d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089dc:	d01f      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80089de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089e2:	d805      	bhi.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ec:	d00e      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80089ee:	e01f      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80089f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089f4:	d01f      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80089f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089fa:	d01e      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80089fc:	e018      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089fe:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	4a46      	ldr	r2, [pc, #280]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a0a:	e017      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	2100      	movs	r1, #0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 fc62 	bl	800a2dc <RCCEx_PLL2_Config>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008a1c:	e00e      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	3324      	adds	r3, #36	; 0x24
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f001 fd0b 	bl	800a440 <RCCEx_PLL3_Config>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008a2e:	e005      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	75fb      	strb	r3, [r7, #23]
      break;
 8008a34:	e002      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008a36:	bf00      	nop
 8008a38:	e000      	b.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a42:	4b36      	ldr	r3, [pc, #216]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a46:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008a50:	4932      	ldr	r1, [pc, #200]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	658b      	str	r3, [r1, #88]	; 0x58
 8008a56:	e001      	b.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d044      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a72:	d01f      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a78:	d805      	bhi.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008a7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a82:	d00e      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008a84:	e01f      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008a86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a8a:	d01f      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a90:	d01e      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008a92:	e018      	b.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a94:	4b21      	ldr	r3, [pc, #132]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	4a20      	ldr	r2, [pc, #128]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008aa0:	e017      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 fc17 	bl	800a2dc <RCCEx_PLL2_Config>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008ab2:	e00e      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3324      	adds	r3, #36	; 0x24
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f001 fcc0 	bl	800a440 <RCCEx_PLL3_Config>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ac4:	e005      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	75fb      	strb	r3, [r7, #23]
      break;
 8008aca:	e002      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008acc:	bf00      	nop
 8008ace:	e000      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008ad0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10a      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ad8:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008adc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008ae6:	490d      	ldr	r1, [pc, #52]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	658b      	str	r3, [r1, #88]	; 0x58
 8008aec:	e001      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d035      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b02:	2b10      	cmp	r3, #16
 8008b04:	d00c      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008b06:	2b10      	cmp	r3, #16
 8008b08:	d802      	bhi.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01b      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008b0e:	e017      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008b10:	2b20      	cmp	r3, #32
 8008b12:	d00c      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008b14:	2b30      	cmp	r3, #48	; 0x30
 8008b16:	d018      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008b18:	e012      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008b1a:	bf00      	nop
 8008b1c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b20:	4baf      	ldr	r3, [pc, #700]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b24:	4aae      	ldr	r2, [pc, #696]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008b2c:	e00e      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	3304      	adds	r3, #4
 8008b32:	2102      	movs	r1, #2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f001 fbd1 	bl	800a2dc <RCCEx_PLL2_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008b3e:	e005      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	75fb      	strb	r3, [r7, #23]
      break;
 8008b44:	e002      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008b46:	bf00      	nop
 8008b48:	e000      	b.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b4c:	7dfb      	ldrb	r3, [r7, #23]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d109      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b52:	4ba3      	ldr	r3, [pc, #652]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5e:	49a0      	ldr	r1, [pc, #640]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b64:	e001      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d042      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b7e:	d01f      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b84:	d805      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8e:	d00e      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008b90:	e01f      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008b92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b96:	d01f      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b9c:	d01e      	beq.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008b9e:	e018      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba0:	4b8f      	ldr	r3, [pc, #572]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	4a8e      	ldr	r2, [pc, #568]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008bac:	e017      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 fb91 	bl	800a2dc <RCCEx_PLL2_Config>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008bbe:	e00e      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	3324      	adds	r3, #36	; 0x24
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f001 fc3a 	bl	800a440 <RCCEx_PLL3_Config>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008bd0:	e005      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
      break;
 8008bd6:	e002      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008bd8:	bf00      	nop
 8008bda:	e000      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d109      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008be4:	4b7e      	ldr	r3, [pc, #504]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf0:	497b      	ldr	r1, [pc, #492]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	650b      	str	r3, [r1, #80]	; 0x50
 8008bf6:	e001      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d042      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c10:	d01b      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c16:	d805      	bhi.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d022      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8008c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c20:	d00a      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008c22:	e01b      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8008c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c28:	d01d      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8008c2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c2e:	d01c      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8008c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c34:	d01b      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8008c36:	e011      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 fb4c 	bl	800a2dc <RCCEx_PLL2_Config>
 8008c44:	4603      	mov	r3, r0
 8008c46:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008c48:	e012      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3324      	adds	r3, #36	; 0x24
 8008c4e:	2101      	movs	r1, #1
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 fbf5 	bl	800a440 <RCCEx_PLL3_Config>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008c5a:	e009      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c60:	e006      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008c62:	bf00      	nop
 8008c64:	e004      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8008c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c76:	4b5a      	ldr	r3, [pc, #360]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c82:	4957      	ldr	r1, [pc, #348]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	650b      	str	r3, [r1, #80]	; 0x50
 8008c88:	e001      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8a:	7dfb      	ldrb	r3, [r7, #23]
 8008c8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d044      	beq.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca4:	d01b      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008caa:	d805      	bhi.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d022      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cb4:	d00a      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008cb6:	e01b      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8008cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cbc:	d01d      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cc2:	d01c      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8008cc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cc8:	d01b      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008cca:	e011      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	2101      	movs	r1, #1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f001 fb02 	bl	800a2dc <RCCEx_PLL2_Config>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008cdc:	e012      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3324      	adds	r3, #36	; 0x24
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 fbab 	bl	800a440 <RCCEx_PLL3_Config>
 8008cea:	4603      	mov	r3, r0
 8008cec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008cee:	e009      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf4:	e006      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008cf6:	bf00      	nop
 8008cf8:	e004      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008cfa:	bf00      	nop
 8008cfc:	e002      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008cfe:	bf00      	nop
 8008d00:	e000      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8008d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10a      	bne.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d0a:	4b35      	ldr	r3, [pc, #212]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d18:	4931      	ldr	r1, [pc, #196]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	658b      	str	r3, [r1, #88]	; 0x58
 8008d1e:	e001      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d02d      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d38:	d005      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d3e:	d009      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d013      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008d44:	e00f      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d46:	4b26      	ldr	r3, [pc, #152]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	4a25      	ldr	r2, [pc, #148]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008d52:	e00c      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	2101      	movs	r1, #1
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f001 fabe 	bl	800a2dc <RCCEx_PLL2_Config>
 8008d60:	4603      	mov	r3, r0
 8008d62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008d64:	e003      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	75fb      	strb	r3, [r7, #23]
      break;
 8008d6a:	e000      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8008d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008d74:	4b1a      	ldr	r3, [pc, #104]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d80:	4917      	ldr	r1, [pc, #92]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	650b      	str	r3, [r1, #80]	; 0x50
 8008d86:	e001      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d035      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d81b      	bhi.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008da0:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008de5 	.word	0x08008de5
 8008dac:	08008db9 	.word	0x08008db9
 8008db0:	08008dc7 	.word	0x08008dc7
 8008db4:	08008de5 	.word	0x08008de5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db8:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbc:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008dc4:	e00f      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	2102      	movs	r1, #2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 fa85 	bl	800a2dc <RCCEx_PLL2_Config>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008dd6:	e006      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	75fb      	strb	r3, [r7, #23]
      break;
 8008ddc:	e003      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8008dde:	bf00      	nop
 8008de0:	58024400 	.word	0x58024400
      break;
 8008de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008dec:	4bba      	ldr	r3, [pc, #744]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df0:	f023 0203 	bic.w	r2, r3, #3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df8:	49b7      	ldr	r1, [pc, #732]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008dfe:	e001      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f000 8086 	beq.w	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e12:	4bb2      	ldr	r3, [pc, #712]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4ab1      	ldr	r2, [pc, #708]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e1e:	f7f8 fcc9 	bl	80017b4 <HAL_GetTick>
 8008e22:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e24:	e009      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e26:	f7f8 fcc5 	bl	80017b4 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b64      	cmp	r3, #100	; 0x64
 8008e32:	d902      	bls.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	75fb      	strb	r3, [r7, #23]
        break;
 8008e38:	e005      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e3a:	4ba8      	ldr	r3, [pc, #672]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0ef      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d166      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008e4c:	4ba2      	ldr	r3, [pc, #648]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e56:	4053      	eors	r3, r2
 8008e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d013      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e60:	4b9d      	ldr	r3, [pc, #628]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e68:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e6a:	4b9b      	ldr	r3, [pc, #620]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6e:	4a9a      	ldr	r2, [pc, #616]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e76:	4b98      	ldr	r3, [pc, #608]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7a:	4a97      	ldr	r2, [pc, #604]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008e82:	4a95      	ldr	r2, [pc, #596]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e92:	d115      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e94:	f7f8 fc8e 	bl	80017b4 <HAL_GetTick>
 8008e98:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e9a:	e00b      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e9c:	f7f8 fc8a 	bl	80017b4 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d902      	bls.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	75fb      	strb	r3, [r7, #23]
            break;
 8008eb2:	e005      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008eb4:	4b88      	ldr	r3, [pc, #544]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb8:	f003 0302 	and.w	r3, r3, #2
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0ed      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d126      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ed4:	d10d      	bne.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8008ed6:	4b80      	ldr	r3, [pc, #512]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ee4:	0919      	lsrs	r1, r3, #4
 8008ee6:	4b7e      	ldr	r3, [pc, #504]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8008ee8:	400b      	ands	r3, r1
 8008eea:	497b      	ldr	r1, [pc, #492]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	610b      	str	r3, [r1, #16]
 8008ef0:	e005      	b.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8008ef2:	4b79      	ldr	r3, [pc, #484]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	4a78      	ldr	r2, [pc, #480]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008ef8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008efc:	6113      	str	r3, [r2, #16]
 8008efe:	4b76      	ldr	r3, [pc, #472]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f0c:	4972      	ldr	r1, [pc, #456]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	670b      	str	r3, [r1, #112]	; 0x70
 8008f12:	e004      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	75bb      	strb	r3, [r7, #22]
 8008f18:	e001      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d07d      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f2e:	2b28      	cmp	r3, #40	; 0x28
 8008f30:	d866      	bhi.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8008f32:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08009007 	.word	0x08009007
 8008f3c:	08009001 	.word	0x08009001
 8008f40:	08009001 	.word	0x08009001
 8008f44:	08009001 	.word	0x08009001
 8008f48:	08009001 	.word	0x08009001
 8008f4c:	08009001 	.word	0x08009001
 8008f50:	08009001 	.word	0x08009001
 8008f54:	08009001 	.word	0x08009001
 8008f58:	08008fdd 	.word	0x08008fdd
 8008f5c:	08009001 	.word	0x08009001
 8008f60:	08009001 	.word	0x08009001
 8008f64:	08009001 	.word	0x08009001
 8008f68:	08009001 	.word	0x08009001
 8008f6c:	08009001 	.word	0x08009001
 8008f70:	08009001 	.word	0x08009001
 8008f74:	08009001 	.word	0x08009001
 8008f78:	08008fef 	.word	0x08008fef
 8008f7c:	08009001 	.word	0x08009001
 8008f80:	08009001 	.word	0x08009001
 8008f84:	08009001 	.word	0x08009001
 8008f88:	08009001 	.word	0x08009001
 8008f8c:	08009001 	.word	0x08009001
 8008f90:	08009001 	.word	0x08009001
 8008f94:	08009001 	.word	0x08009001
 8008f98:	08009007 	.word	0x08009007
 8008f9c:	08009001 	.word	0x08009001
 8008fa0:	08009001 	.word	0x08009001
 8008fa4:	08009001 	.word	0x08009001
 8008fa8:	08009001 	.word	0x08009001
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	08009001 	.word	0x08009001
 8008fb4:	08009001 	.word	0x08009001
 8008fb8:	08009007 	.word	0x08009007
 8008fbc:	08009001 	.word	0x08009001
 8008fc0:	08009001 	.word	0x08009001
 8008fc4:	08009001 	.word	0x08009001
 8008fc8:	08009001 	.word	0x08009001
 8008fcc:	08009001 	.word	0x08009001
 8008fd0:	08009001 	.word	0x08009001
 8008fd4:	08009001 	.word	0x08009001
 8008fd8:	08009007 	.word	0x08009007
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 f97a 	bl	800a2dc <RCCEx_PLL2_Config>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008fec:	e00c      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3324      	adds	r3, #36	; 0x24
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f001 fa23 	bl	800a440 <RCCEx_PLL3_Config>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ffe:	e003      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]
      break;
 8009004:	e000      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8009006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009008:	7dfb      	ldrb	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800900e:	4b32      	ldr	r3, [pc, #200]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009012:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800901a:	492f      	ldr	r1, [pc, #188]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800901c:	4313      	orrs	r3, r2
 800901e:	654b      	str	r3, [r1, #84]	; 0x54
 8009020:	e001      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d037      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009036:	2b05      	cmp	r3, #5
 8009038:	d820      	bhi.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800903a:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009083 	.word	0x08009083
 8009044:	08009059 	.word	0x08009059
 8009048:	0800906b 	.word	0x0800906b
 800904c:	08009083 	.word	0x08009083
 8009050:	08009083 	.word	0x08009083
 8009054:	08009083 	.word	0x08009083
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	2101      	movs	r1, #1
 800905e:	4618      	mov	r0, r3
 8009060:	f001 f93c 	bl	800a2dc <RCCEx_PLL2_Config>
 8009064:	4603      	mov	r3, r0
 8009066:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009068:	e00c      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3324      	adds	r3, #36	; 0x24
 800906e:	2101      	movs	r1, #1
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f9e5 	bl	800a440 <RCCEx_PLL3_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800907a:	e003      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]
      break;
 8009080:	e000      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8009082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d109      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800908a:	4b13      	ldr	r3, [pc, #76]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	f023 0207 	bic.w	r2, r3, #7
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009096:	4910      	ldr	r1, [pc, #64]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009098:	4313      	orrs	r3, r2
 800909a:	654b      	str	r3, [r1, #84]	; 0x54
 800909c:	e001      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d040      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090b4:	2b05      	cmp	r3, #5
 80090b6:	d827      	bhi.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80090b8:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80090ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090be:	bf00      	nop
 80090c0:	0800910f 	.word	0x0800910f
 80090c4:	080090e5 	.word	0x080090e5
 80090c8:	080090f7 	.word	0x080090f7
 80090cc:	0800910f 	.word	0x0800910f
 80090d0:	0800910f 	.word	0x0800910f
 80090d4:	0800910f 	.word	0x0800910f
 80090d8:	58024400 	.word	0x58024400
 80090dc:	58024800 	.word	0x58024800
 80090e0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3304      	adds	r3, #4
 80090e8:	2101      	movs	r1, #1
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 f8f6 	bl	800a2dc <RCCEx_PLL2_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80090f4:	e00c      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3324      	adds	r3, #36	; 0x24
 80090fa:	2101      	movs	r1, #1
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 f99f 	bl	800a440 <RCCEx_PLL3_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009106:	e003      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
      break;
 800910c:	e000      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800910e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009116:	4bb2      	ldr	r3, [pc, #712]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911a:	f023 0207 	bic.w	r2, r3, #7
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009124:	49ae      	ldr	r1, [pc, #696]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009126:	4313      	orrs	r3, r2
 8009128:	658b      	str	r3, [r1, #88]	; 0x58
 800912a:	e001      	b.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d044      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009146:	d01b      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8009148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800914c:	d805      	bhi.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d022      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009156:	d00a      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8009158:	e01b      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800915a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915e:	d01d      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009164:	d01c      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8009166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800916a:	d01b      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800916c:	e011      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	3304      	adds	r3, #4
 8009172:	2100      	movs	r1, #0
 8009174:	4618      	mov	r0, r3
 8009176:	f001 f8b1 	bl	800a2dc <RCCEx_PLL2_Config>
 800917a:	4603      	mov	r3, r0
 800917c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800917e:	e012      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3324      	adds	r3, #36	; 0x24
 8009184:	2102      	movs	r1, #2
 8009186:	4618      	mov	r0, r3
 8009188:	f001 f95a 	bl	800a440 <RCCEx_PLL3_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009190:	e009      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	75fb      	strb	r3, [r7, #23]
      break;
 8009196:	e006      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8009198:	bf00      	nop
 800919a:	e004      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800919c:	bf00      	nop
 800919e:	e002      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80091a0:	bf00      	nop
 80091a2:	e000      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80091a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091ac:	4b8c      	ldr	r3, [pc, #560]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091ba:	4989      	ldr	r1, [pc, #548]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80091bc:	4313      	orrs	r3, r2
 80091be:	654b      	str	r3, [r1, #84]	; 0x54
 80091c0:	e001      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d044      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091dc:	d01b      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80091de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e2:	d805      	bhi.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d022      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80091e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ec:	d00a      	beq.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80091ee:	e01b      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80091f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f4:	d01d      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80091f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80091fa:	d01c      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80091fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009200:	d01b      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009202:	e011      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	2100      	movs	r1, #0
 800920a:	4618      	mov	r0, r3
 800920c:	f001 f866 	bl	800a2dc <RCCEx_PLL2_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009214:	e012      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3324      	adds	r3, #36	; 0x24
 800921a:	2102      	movs	r1, #2
 800921c:	4618      	mov	r0, r3
 800921e:	f001 f90f 	bl	800a440 <RCCEx_PLL3_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009226:	e009      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
      break;
 800922c:	e006      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800922e:	bf00      	nop
 8009230:	e004      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009232:	bf00      	nop
 8009234:	e002      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009236:	bf00      	nop
 8009238:	e000      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800923a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009242:	4b67      	ldr	r3, [pc, #412]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009250:	4963      	ldr	r1, [pc, #396]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009252:	4313      	orrs	r3, r2
 8009254:	658b      	str	r3, [r1, #88]	; 0x58
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009264:	2b00      	cmp	r3, #0
 8009266:	d044      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800926e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009272:	d01b      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009278:	d805      	bhi.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d022      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800927e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009282:	d00a      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009284:	e01b      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8009286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800928a:	d01d      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800928c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009290:	d01c      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8009292:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009296:	d01b      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8009298:	e011      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	3304      	adds	r3, #4
 800929e:	2100      	movs	r1, #0
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 f81b 	bl	800a2dc <RCCEx_PLL2_Config>
 80092a6:	4603      	mov	r3, r0
 80092a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80092aa:	e012      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3324      	adds	r3, #36	; 0x24
 80092b0:	2102      	movs	r1, #2
 80092b2:	4618      	mov	r0, r3
 80092b4:	f001 f8c4 	bl	800a440 <RCCEx_PLL3_Config>
 80092b8:	4603      	mov	r3, r0
 80092ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80092bc:	e009      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
      break;
 80092c2:	e006      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80092c4:	bf00      	nop
 80092c6:	e004      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80092c8:	bf00      	nop
 80092ca:	e002      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80092cc:	bf00      	nop
 80092ce:	e000      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80092d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10a      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80092d8:	4b41      	ldr	r3, [pc, #260]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092e6:	493e      	ldr	r1, [pc, #248]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	658b      	str	r3, [r1, #88]	; 0x58
 80092ec:	e001      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0308 	and.w	r3, r3, #8
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d01a      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009308:	d10a      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3324      	adds	r3, #36	; 0x24
 800930e:	2102      	movs	r1, #2
 8009310:	4618      	mov	r0, r3
 8009312:	f001 f895 	bl	800a440 <RCCEx_PLL3_Config>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009320:	4b2f      	ldr	r3, [pc, #188]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009324:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800932e:	492c      	ldr	r1, [pc, #176]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009330:	4313      	orrs	r3, r2
 8009332:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0310 	and.w	r3, r3, #16
 800933c:	2b00      	cmp	r3, #0
 800933e:	d01a      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800934a:	d10a      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3324      	adds	r3, #36	; 0x24
 8009350:	2102      	movs	r1, #2
 8009352:	4618      	mov	r0, r3
 8009354:	f001 f874 	bl	800a440 <RCCEx_PLL3_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009362:	4b1f      	ldr	r3, [pc, #124]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009370:	491b      	ldr	r1, [pc, #108]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009372:	4313      	orrs	r3, r2
 8009374:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d032      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938c:	d00d      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800938e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009392:	d016      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8009394:	2b00      	cmp	r3, #0
 8009396:	d111      	bne.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	2100      	movs	r1, #0
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 ff9c 	bl	800a2dc <RCCEx_PLL2_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80093a8:	e00c      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3324      	adds	r3, #36	; 0x24
 80093ae:	2102      	movs	r1, #2
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 f845 	bl	800a440 <RCCEx_PLL3_Config>
 80093b6:	4603      	mov	r3, r0
 80093b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80093ba:	e003      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
      break;
 80093c0:	e000      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80093c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10c      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80093cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093d8:	4901      	ldr	r1, [pc, #4]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	658b      	str	r3, [r1, #88]	; 0x58
 80093de:	e003      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80093e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e4:	7dfb      	ldrb	r3, [r7, #23]
 80093e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d02f      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093fe:	d00c      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009400:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009404:	d015      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8009406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800940a:	d10f      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800940c:	4b79      	ldr	r3, [pc, #484]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a78      	ldr	r2, [pc, #480]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009418:	e00c      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	3324      	adds	r3, #36	; 0x24
 800941e:	2101      	movs	r1, #1
 8009420:	4618      	mov	r0, r3
 8009422:	f001 f80d 	bl	800a440 <RCCEx_PLL3_Config>
 8009426:	4603      	mov	r3, r0
 8009428:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800942a:	e003      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	75fb      	strb	r3, [r7, #23]
      break;
 8009430:	e000      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009432:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10a      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800943a:	4b6e      	ldr	r3, [pc, #440]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800943c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009448:	496a      	ldr	r1, [pc, #424]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800944a:	4313      	orrs	r3, r2
 800944c:	654b      	str	r3, [r1, #84]	; 0x54
 800944e:	e001      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d029      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8009468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800946c:	d007      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800946e:	e00f      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009470:	4b60      	ldr	r3, [pc, #384]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	4a5f      	ldr	r2, [pc, #380]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800947a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800947c:	e00b      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	3304      	adds	r3, #4
 8009482:	2102      	movs	r1, #2
 8009484:	4618      	mov	r0, r3
 8009486:	f000 ff29 	bl	800a2dc <RCCEx_PLL2_Config>
 800948a:	4603      	mov	r3, r0
 800948c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800948e:	e002      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d109      	bne.n	80094b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800949c:	4b55      	ldr	r3, [pc, #340]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800949e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a8:	4952      	ldr	r1, [pc, #328]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094ae:	e001      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00a      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3324      	adds	r3, #36	; 0x24
 80094c4:	2102      	movs	r1, #2
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 ffba 	bl	800a440 <RCCEx_PLL3_Config>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d02f      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ea:	d00c      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80094ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f0:	d802      	bhi.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d011      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80094f6:	e00d      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80094f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094fc:	d00f      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80094fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009502:	d00e      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009504:	e006      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009506:	4b3b      	ldr	r3, [pc, #236]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a3a      	ldr	r2, [pc, #232]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800950c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009512:	e007      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
      break;
 8009518:	e004      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800951a:	bf00      	nop
 800951c:	e002      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800951e:	bf00      	nop
 8009520:	e000      	b.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009524:	7dfb      	ldrb	r3, [r7, #23]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d109      	bne.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800952a:	4b32      	ldr	r3, [pc, #200]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800952c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009536:	492f      	ldr	r1, [pc, #188]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009538:	4313      	orrs	r3, r2
 800953a:	654b      	str	r3, [r1, #84]	; 0x54
 800953c:	e001      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d008      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800954e:	4b29      	ldr	r3, [pc, #164]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009552:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955a:	4926      	ldr	r1, [pc, #152]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800955c:	4313      	orrs	r3, r2
 800955e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800956c:	4b21      	ldr	r3, [pc, #132]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800957a:	491e      	ldr	r1, [pc, #120]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800957c:	4313      	orrs	r3, r2
 800957e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d008      	beq.n	800959e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800958c:	4b19      	ldr	r3, [pc, #100]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800958e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009590:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009598:	4916      	ldr	r1, [pc, #88]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800959a:	4313      	orrs	r3, r2
 800959c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00d      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095aa:	4b12      	ldr	r3, [pc, #72]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	4a11      	ldr	r2, [pc, #68]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80095b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095b4:	6113      	str	r3, [r2, #16]
 80095b6:	4b0f      	ldr	r3, [pc, #60]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80095b8:	691a      	ldr	r2, [r3, #16]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80095c0:	490c      	ldr	r1, [pc, #48]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	da08      	bge.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80095ce:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80095d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095da:	4906      	ldr	r1, [pc, #24]	; (80095f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80095e0:	7dbb      	ldrb	r3, [r7, #22]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d101      	bne.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e000      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	58024400 	.word	0x58024400

080095f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b090      	sub	sp, #64	; 0x40
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009606:	d150      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009608:	4ba1      	ldr	r3, [pc, #644]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800960a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	2b04      	cmp	r3, #4
 8009616:	d844      	bhi.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009618:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800961a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961e:	bf00      	nop
 8009620:	08009635 	.word	0x08009635
 8009624:	08009645 	.word	0x08009645
 8009628:	08009655 	.word	0x08009655
 800962c:	0800969d 	.word	0x0800969d
 8009630:	08009665 	.word	0x08009665
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fd03 	bl	800a044 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009642:	e241      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009644:	f107 0318 	add.w	r3, r7, #24
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fa63 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009652:	e239      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fba7 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009662:	e231      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009664:	4b8a      	ldr	r3, [pc, #552]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800966c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800966e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009674:	4b87      	ldr	r3, [pc, #540]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009678:	e226      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800967a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009680:	d102      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009682:	4b85      	ldr	r3, [pc, #532]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009684:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009686:	e21f      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800968e:	d102      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009690:	4b82      	ldr	r3, [pc, #520]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009692:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009694:	e218      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800969a:	e215      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800969c:	4b80      	ldr	r3, [pc, #512]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800969e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a0:	e212      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096a6:	bf00      	nop
 80096a8:	e20e      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b0:	d14f      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80096b2:	4b77      	ldr	r3, [pc, #476]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80096b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80096ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	2b80      	cmp	r3, #128	; 0x80
 80096c0:	d01c      	beq.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80096c2:	2b80      	cmp	r3, #128	; 0x80
 80096c4:	d804      	bhi.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d008      	beq.n	80096dc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	d00e      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80096ce:	e03c      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80096d0:	2bc0      	cmp	r3, #192	; 0xc0
 80096d2:	d037      	beq.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80096d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d8:	d018      	beq.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80096da:	e036      	b.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 fcaf 	bl	800a044 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096ea:	e1ed      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096ec:	f107 0318 	add.w	r3, r7, #24
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fa0f 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096fa:	e1e5      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096fc:	f107 030c 	add.w	r3, r7, #12
 8009700:	4618      	mov	r0, r3
 8009702:	f000 fb53 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800970a:	e1dd      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800970c:	4b60      	ldr	r3, [pc, #384]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800970e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009714:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800971c:	4b5d      	ldr	r3, [pc, #372]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009720:	e1d2      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009728:	d102      	bne.n	8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800972a:	4b5b      	ldr	r3, [pc, #364]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800972c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800972e:	e1cb      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009736:	d102      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8009738:	4b58      	ldr	r3, [pc, #352]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800973c:	e1c4      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009742:	e1c1      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009744:	4b56      	ldr	r3, [pc, #344]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009748:	e1be      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800974e:	bf00      	nop
 8009750:	e1ba      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009758:	d153      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800975a:	4b4d      	ldr	r3, [pc, #308]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800975c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009762:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800976a:	d01f      	beq.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800976c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009770:	d805      	bhi.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800977a:	d00f      	beq.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800977c:	e03d      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800977e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009782:	d037      	beq.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009788:	d018      	beq.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800978a:	e036      	b.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800978c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fc57 	bl	800a044 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800979a:	e195      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800979c:	f107 0318 	add.w	r3, r7, #24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f9b7 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097aa:	e18d      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ac:	f107 030c 	add.w	r3, r7, #12
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 fafb 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ba:	e185      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80097bc:	4b34      	ldr	r3, [pc, #208]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80097be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80097c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80097cc:	4b31      	ldr	r3, [pc, #196]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80097ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80097d0:	e17a      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80097d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097d8:	d102      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80097da:	4b2f      	ldr	r3, [pc, #188]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80097dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097de:	e173      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80097e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e6:	d102      	bne.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80097e8:	4b2c      	ldr	r3, [pc, #176]	; (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ec:	e16c      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f2:	e169      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80097f4:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f8:	e166      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097fe:	bf00      	nop
 8009800:	e162      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009808:	d15d      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800980a:	4b21      	ldr	r3, [pc, #132]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800980c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800980e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009812:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800981a:	d01f      	beq.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800981c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009820:	d805      	bhi.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009826:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800982a:	d00f      	beq.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800982c:	e047      	b.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800982e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009832:	d041      	beq.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009838:	d018      	beq.n	800986c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800983a:	e040      	b.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800983c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fbff 	bl	800a044 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800984a:	e13d      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800984c:	f107 0318 	add.w	r3, r7, #24
 8009850:	4618      	mov	r0, r3
 8009852:	f000 f95f 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800985a:	e135      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800985c:	f107 030c 	add.w	r3, r7, #12
 8009860:	4618      	mov	r0, r3
 8009862:	f000 faa3 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800986a:	e12d      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800986c:	4b08      	ldr	r3, [pc, #32]	; (8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800986e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009874:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009878:	2b00      	cmp	r3, #0
 800987a:	d102      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800987e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009880:	e122      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009888:	d10c      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800988a:	4b03      	ldr	r3, [pc, #12]	; (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800988c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800988e:	e11b      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009890:	58024400 	.word	0x58024400
 8009894:	03d09000 	.word	0x03d09000
 8009898:	003d0900 	.word	0x003d0900
 800989c:	007a1200 	.word	0x007a1200
 80098a0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80098a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098aa:	d102      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80098ac:	4b89      	ldr	r3, [pc, #548]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80098ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098b0:	e10a      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098b6:	e107      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80098b8:	4b87      	ldr	r3, [pc, #540]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098bc:	e104      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80098be:	2300      	movs	r3, #0
 80098c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098c2:	bf00      	nop
 80098c4:	e100      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098cc:	d153      	bne.n	8009976 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80098ce:	4b83      	ldr	r3, [pc, #524]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80098d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80098d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098de:	d01f      	beq.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80098e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098e4:	d805      	bhi.n	80098f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80098ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098ee:	d00f      	beq.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80098f0:	e03d      	b.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80098f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80098f6:	d037      	beq.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80098f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098fc:	d018      	beq.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80098fe:	e036      	b.n	800996e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fb9d 	bl	800a044 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800990e:	e0db      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009910:	f107 0318 	add.w	r3, r7, #24
 8009914:	4618      	mov	r0, r3
 8009916:	f000 f8fd 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800991e:	e0d3      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009920:	f107 030c 	add.w	r3, r7, #12
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fa41 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800992e:	e0cb      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009930:	4b6a      	ldr	r3, [pc, #424]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009938:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009940:	4b67      	ldr	r3, [pc, #412]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009942:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009944:	e0c0      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800994c:	d102      	bne.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800994e:	4b65      	ldr	r3, [pc, #404]	; (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009952:	e0b9      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800995a:	d102      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800995c:	4b5d      	ldr	r3, [pc, #372]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800995e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009960:	e0b2      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009966:	e0af      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009968:	4b5b      	ldr	r3, [pc, #364]	; (8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800996c:	e0ac      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009972:	bf00      	nop
 8009974:	e0a8      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800997c:	d13d      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800997e:	4b57      	ldr	r3, [pc, #348]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009986:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800998e:	d00c      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009990:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009994:	d011      	beq.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d12b      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800999a:	f107 0318 	add.w	r3, r7, #24
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f8b8 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099a8:	e08e      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099aa:	f107 030c 	add.w	r3, r7, #12
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 f9fc 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099b8:	e086      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80099ba:	4b48      	ldr	r3, [pc, #288]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80099bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d102      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80099ca:	4b45      	ldr	r3, [pc, #276]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80099ce:	e07b      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80099d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099d6:	d102      	bne.n	80099de <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80099d8:	4b42      	ldr	r3, [pc, #264]	; (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099dc:	e074      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099e4:	d102      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80099e6:	4b3b      	ldr	r3, [pc, #236]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80099e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099ea:	e06d      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f0:	e06a      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099f6:	bf00      	nop
 80099f8:	e066      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a00:	d11f      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009a02:	4b36      	ldr	r3, [pc, #216]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a0a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a16:	d008      	beq.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009a18:	e00f      	b.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fb10 	bl	800a044 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a28:	e04e      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a2a:	f107 0318 	add.w	r3, r7, #24
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f870 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a38:	e046      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a3e:	bf00      	nop
 8009a40:	e042      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a48:	d13c      	bne.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009a4a:	4b24      	ldr	r3, [pc, #144]	; (8009adc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009a52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a5a:	d01e      	beq.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a60:	d805      	bhi.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00d      	beq.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009a66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a6a:	d00e      	beq.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009a6c:	e026      	b.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a72:	d01d      	beq.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a78:	d01d      	beq.n	8009ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009a7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a7e:	d014      	beq.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009a80:	e01c      	b.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a82:	f000 f831 	bl	8009ae8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a86:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009a88:	e01e      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a8a:	f107 0318 	add.w	r3, r7, #24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f840 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a98:	e016      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a9a:	f107 030c 	add.w	r3, r7, #12
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 f984 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aa8:	e00e      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8009aaa:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009aac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aae:	e00b      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009ab0:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ab4:	e008      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8009ab6:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aba:	e005      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac0:	bf00      	nop
 8009ac2:	e001      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3740      	adds	r7, #64	; 0x40
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	007a1200 	.word	0x007a1200
 8009ad8:	00bb8000 	.word	0x00bb8000
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	03d09000 	.word	0x03d09000
 8009ae4:	003d0900 	.word	0x003d0900

08009ae8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009aec:	f7fe fe3a 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8009af0:	4601      	mov	r1, r0
 8009af2:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	091b      	lsrs	r3, r3, #4
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009afe:	5cd3      	ldrb	r3, [r2, r3]
 8009b00:	f003 031f 	and.w	r3, r3, #31
 8009b04:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	0800ffe0 	.word	0x0800ffe0

08009b14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b089      	sub	sp, #36	; 0x24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b1c:	4b9d      	ldr	r3, [pc, #628]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009b26:	4b9b      	ldr	r3, [pc, #620]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	0b1b      	lsrs	r3, r3, #12
 8009b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b32:	4b98      	ldr	r3, [pc, #608]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b36:	091b      	lsrs	r3, r3, #4
 8009b38:	f003 0301 	and.w	r3, r3, #1
 8009b3c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b3e:	4b95      	ldr	r3, [pc, #596]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b42:	08db      	lsrs	r3, r3, #3
 8009b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	fb02 f303 	mul.w	r3, r2, r3
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 810a 	beq.w	8009d76 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d05a      	beq.n	8009c1e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d302      	bcc.n	8009b72 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d078      	beq.n	8009c62 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009b70:	e099      	b.n	8009ca6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b72:	4b88      	ldr	r3, [pc, #544]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d02d      	beq.n	8009bda <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b7e:	4b85      	ldr	r3, [pc, #532]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	08db      	lsrs	r3, r3, #3
 8009b84:	f003 0303 	and.w	r3, r3, #3
 8009b88:	4a83      	ldr	r2, [pc, #524]	; (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8009b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	ee07 3a90 	vmov	s15, r3
 8009ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba8:	4b7a      	ldr	r3, [pc, #488]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb0:	ee07 3a90 	vmov	s15, r3
 8009bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bd8:	e087      	b.n	8009cea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8009be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bec:	4b69      	ldr	r3, [pc, #420]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf4:	ee07 3a90 	vmov	s15, r3
 8009bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c1c:	e065      	b.n	8009cea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	ee07 3a90 	vmov	s15, r3
 8009c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c30:	4b58      	ldr	r3, [pc, #352]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c38:	ee07 3a90 	vmov	s15, r3
 8009c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c40:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c60:	e043      	b.n	8009cea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8009c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c74:	4b47      	ldr	r3, [pc, #284]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c7c:	ee07 3a90 	vmov	s15, r3
 8009c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c84:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ca4:	e021      	b.n	8009cea <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	ee07 3a90 	vmov	s15, r3
 8009cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009da4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8009cb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb8:	4b36      	ldr	r3, [pc, #216]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc0:	ee07 3a90 	vmov	s15, r3
 8009cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ccc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009cd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ce8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009cea:	4b2a      	ldr	r3, [pc, #168]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cee:	0a5b      	lsrs	r3, r3, #9
 8009cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cf4:	ee07 3a90 	vmov	s15, r3
 8009cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d10:	ee17 2a90 	vmov	r2, s15
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009d18:	4b1e      	ldr	r3, [pc, #120]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	0c1b      	lsrs	r3, r3, #16
 8009d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d3e:	ee17 2a90 	vmov	r2, s15
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4a:	0e1b      	lsrs	r3, r3, #24
 8009d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d50:	ee07 3a90 	vmov	s15, r3
 8009d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d60:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d6c:	ee17 2a90 	vmov	r2, s15
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d74:	e008      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	609a      	str	r2, [r3, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	3724      	adds	r7, #36	; 0x24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	58024400 	.word	0x58024400
 8009d98:	03d09000 	.word	0x03d09000
 8009d9c:	46000000 	.word	0x46000000
 8009da0:	4c742400 	.word	0x4c742400
 8009da4:	4a742400 	.word	0x4a742400
 8009da8:	4af42400 	.word	0x4af42400

08009dac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b089      	sub	sp, #36	; 0x24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009db4:	4b9d      	ldr	r3, [pc, #628]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db8:	f003 0303 	and.w	r3, r3, #3
 8009dbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009dbe:	4b9b      	ldr	r3, [pc, #620]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	0d1b      	lsrs	r3, r3, #20
 8009dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009dca:	4b98      	ldr	r3, [pc, #608]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	0a1b      	lsrs	r3, r3, #8
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009dd6:	4b95      	ldr	r3, [pc, #596]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dda:	08db      	lsrs	r3, r3, #3
 8009ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	fb02 f303 	mul.w	r3, r2, r3
 8009de6:	ee07 3a90 	vmov	s15, r3
 8009dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 810a 	beq.w	800a00e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d05a      	beq.n	8009eb6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d302      	bcc.n	8009e0a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d078      	beq.n	8009efa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8009e08:	e099      	b.n	8009f3e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e0a:	4b88      	ldr	r3, [pc, #544]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d02d      	beq.n	8009e72 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e16:	4b85      	ldr	r3, [pc, #532]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	08db      	lsrs	r3, r3, #3
 8009e1c:	f003 0303 	and.w	r3, r3, #3
 8009e20:	4a83      	ldr	r2, [pc, #524]	; (800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8009e22:	fa22 f303 	lsr.w	r3, r2, r3
 8009e26:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	ee07 3a90 	vmov	s15, r3
 8009e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e40:	4b7a      	ldr	r3, [pc, #488]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e48:	ee07 3a90 	vmov	s15, r3
 8009e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e50:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e54:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e70:	e087      	b.n	8009f82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	ee07 3a90 	vmov	s15, r3
 8009e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8009e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e84:	4b69      	ldr	r3, [pc, #420]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8c:	ee07 3a90 	vmov	s15, r3
 8009e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e94:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e98:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eb4:	e065      	b.n	8009f82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	ee07 3a90 	vmov	s15, r3
 8009ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec8:	4b58      	ldr	r3, [pc, #352]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed0:	ee07 3a90 	vmov	s15, r3
 8009ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009edc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ef8:	e043      	b.n	8009f82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	ee07 3a90 	vmov	s15, r3
 8009f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a040 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8009f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f0c:	4b47      	ldr	r3, [pc, #284]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f14:	ee07 3a90 	vmov	s15, r3
 8009f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f20:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f3c:	e021      	b.n	8009f82 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	ee07 3a90 	vmov	s15, r3
 8009f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f48:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8009f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f50:	4b36      	ldr	r3, [pc, #216]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f64:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8009f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f80:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009f82:	4b2a      	ldr	r3, [pc, #168]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f86:	0a5b      	lsrs	r3, r3, #9
 8009f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f8c:	ee07 3a90 	vmov	s15, r3
 8009f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fa8:	ee17 2a90 	vmov	r2, s15
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009fb0:	4b1e      	ldr	r3, [pc, #120]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	0c1b      	lsrs	r3, r3, #16
 8009fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd6:	ee17 2a90 	vmov	r2, s15
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe2:	0e1b      	lsrs	r3, r3, #24
 8009fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe8:	ee07 3a90 	vmov	s15, r3
 8009fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a004:	ee17 2a90 	vmov	r2, s15
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a00c:	e008      	b.n	800a020 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	609a      	str	r2, [r3, #8]
}
 800a020:	bf00      	nop
 800a022:	3724      	adds	r7, #36	; 0x24
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	58024400 	.word	0x58024400
 800a030:	03d09000 	.word	0x03d09000
 800a034:	46000000 	.word	0x46000000
 800a038:	4c742400 	.word	0x4c742400
 800a03c:	4a742400 	.word	0x4a742400
 800a040:	4af42400 	.word	0x4af42400

0800a044 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a044:	b480      	push	{r7}
 800a046:	b089      	sub	sp, #36	; 0x24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a04c:	4b9d      	ldr	r3, [pc, #628]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a050:	f003 0303 	and.w	r3, r3, #3
 800a054:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a056:	4b9b      	ldr	r3, [pc, #620]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05a:	091b      	lsrs	r3, r3, #4
 800a05c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a060:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a062:	4b98      	ldr	r3, [pc, #608]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a06c:	4b95      	ldr	r3, [pc, #596]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a070:	08db      	lsrs	r3, r3, #3
 800a072:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	fb02 f303 	mul.w	r3, r2, r3
 800a07c:	ee07 3a90 	vmov	s15, r3
 800a080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a084:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 810a 	beq.w	800a2a4 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d05a      	beq.n	800a14c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800a096:	2b01      	cmp	r3, #1
 800a098:	d302      	bcc.n	800a0a0 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d078      	beq.n	800a190 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800a09e:	e099      	b.n	800a1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0a0:	4b88      	ldr	r3, [pc, #544]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0320 	and.w	r3, r3, #32
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d02d      	beq.n	800a108 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0ac:	4b85      	ldr	r3, [pc, #532]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	08db      	lsrs	r3, r3, #3
 800a0b2:	f003 0303 	and.w	r3, r3, #3
 800a0b6:	4a84      	ldr	r2, [pc, #528]	; (800a2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800a0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0bc:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	ee07 3a90 	vmov	s15, r3
 800a0c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	ee07 3a90 	vmov	s15, r3
 800a0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d6:	4b7b      	ldr	r3, [pc, #492]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a102:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a106:	e087      	b.n	800a218 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800a116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a11a:	4b6a      	ldr	r3, [pc, #424]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a12e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a13a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a13e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a14a:	e065      	b.n	800a218 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	ee07 3a90 	vmov	s15, r3
 800a152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a156:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a15a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a15e:	4b59      	ldr	r3, [pc, #356]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a16e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a172:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a17a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a17e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a18a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a18e:	e043      	b.n	800a218 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	ee07 3a90 	vmov	s15, r3
 800a196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a19a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1a2:	4b48      	ldr	r3, [pc, #288]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1d2:	e021      	b.n	800a218 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	ee07 3a90 	vmov	s15, r3
 800a1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1e6:	4b37      	ldr	r3, [pc, #220]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2cc <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a216:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a218:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21c:	0a5b      	lsrs	r3, r3, #9
 800a21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a222:	ee07 3a90 	vmov	s15, r3
 800a226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a22a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a22e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a232:	edd7 6a07 	vldr	s13, [r7, #28]
 800a236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a23a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a23e:	ee17 2a90 	vmov	r2, s15
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a246:	4b1f      	ldr	r3, [pc, #124]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24a:	0c1b      	lsrs	r3, r3, #16
 800a24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a258:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a25c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a260:	edd7 6a07 	vldr	s13, [r7, #28]
 800a264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a26c:	ee17 2a90 	vmov	r2, s15
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a274:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a278:	0e1b      	lsrs	r3, r3, #24
 800a27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a27e:	ee07 3a90 	vmov	s15, r3
 800a282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a28a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a28e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a29a:	ee17 2a90 	vmov	r2, s15
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a2a2:	e008      	b.n	800a2b6 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	609a      	str	r2, [r3, #8]
}
 800a2b6:	bf00      	nop
 800a2b8:	3724      	adds	r7, #36	; 0x24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	58024400 	.word	0x58024400
 800a2c8:	03d09000 	.word	0x03d09000
 800a2cc:	46000000 	.word	0x46000000
 800a2d0:	4c742400 	.word	0x4c742400
 800a2d4:	4a742400 	.word	0x4a742400
 800a2d8:	4af42400 	.word	0x4af42400

0800a2dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2ea:	4b53      	ldr	r3, [pc, #332]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	f003 0303 	and.w	r3, r3, #3
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d101      	bne.n	800a2fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e099      	b.n	800a42e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a2fa:	4b4f      	ldr	r3, [pc, #316]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a4e      	ldr	r2, [pc, #312]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a300:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a306:	f7f7 fa55 	bl	80017b4 <HAL_GetTick>
 800a30a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a30c:	e008      	b.n	800a320 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a30e:	f7f7 fa51 	bl	80017b4 <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d901      	bls.n	800a320 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e086      	b.n	800a42e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a320:	4b45      	ldr	r3, [pc, #276]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1f0      	bne.n	800a30e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a32c:	4b42      	ldr	r3, [pc, #264]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a330:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	031b      	lsls	r3, r3, #12
 800a33a:	493f      	ldr	r1, [pc, #252]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	628b      	str	r3, [r1, #40]	; 0x28
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	3b01      	subs	r3, #1
 800a346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	3b01      	subs	r3, #1
 800a350:	025b      	lsls	r3, r3, #9
 800a352:	b29b      	uxth	r3, r3
 800a354:	431a      	orrs	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	041b      	lsls	r3, r3, #16
 800a35e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a362:	431a      	orrs	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	3b01      	subs	r3, #1
 800a36a:	061b      	lsls	r3, r3, #24
 800a36c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a370:	4931      	ldr	r1, [pc, #196]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a376:	4b30      	ldr	r3, [pc, #192]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	492d      	ldr	r1, [pc, #180]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a384:	4313      	orrs	r3, r2
 800a386:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a388:	4b2b      	ldr	r3, [pc, #172]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	f023 0220 	bic.w	r2, r3, #32
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	4928      	ldr	r1, [pc, #160]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a396:	4313      	orrs	r3, r2
 800a398:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a39a:	4b27      	ldr	r3, [pc, #156]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	4a26      	ldr	r2, [pc, #152]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3a0:	f023 0310 	bic.w	r3, r3, #16
 800a3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3a6:	4b24      	ldr	r3, [pc, #144]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3aa:	4b24      	ldr	r3, [pc, #144]	; (800a43c <RCCEx_PLL2_Config+0x160>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	69d2      	ldr	r2, [r2, #28]
 800a3b2:	00d2      	lsls	r2, r2, #3
 800a3b4:	4920      	ldr	r1, [pc, #128]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3ba:	4b1f      	ldr	r3, [pc, #124]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3be:	4a1e      	ldr	r2, [pc, #120]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3c0:	f043 0310 	orr.w	r3, r3, #16
 800a3c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d106      	bne.n	800a3da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	4a19      	ldr	r2, [pc, #100]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3d8:	e00f      	b.n	800a3fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d106      	bne.n	800a3ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a3e0:	4b15      	ldr	r3, [pc, #84]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e4:	4a14      	ldr	r2, [pc, #80]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3ec:	e005      	b.n	800a3fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a3ee:	4b12      	ldr	r3, [pc, #72]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	4a11      	ldr	r2, [pc, #68]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a3fa:	4b0f      	ldr	r3, [pc, #60]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a0e      	ldr	r2, [pc, #56]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a400:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a406:	f7f7 f9d5 	bl	80017b4 <HAL_GetTick>
 800a40a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a40c:	e008      	b.n	800a420 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a40e:	f7f7 f9d1 	bl	80017b4 <HAL_GetTick>
 800a412:	4602      	mov	r2, r0
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d901      	bls.n	800a420 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a41c:	2303      	movs	r3, #3
 800a41e:	e006      	b.n	800a42e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a420:	4b05      	ldr	r3, [pc, #20]	; (800a438 <RCCEx_PLL2_Config+0x15c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d0f0      	beq.n	800a40e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	58024400 	.word	0x58024400
 800a43c:	ffff0007 	.word	0xffff0007

0800a440 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a44e:	4b53      	ldr	r3, [pc, #332]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	2b03      	cmp	r3, #3
 800a458:	d101      	bne.n	800a45e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e099      	b.n	800a592 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a45e:	4b4f      	ldr	r3, [pc, #316]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a4e      	ldr	r2, [pc, #312]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a46a:	f7f7 f9a3 	bl	80017b4 <HAL_GetTick>
 800a46e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a470:	e008      	b.n	800a484 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a472:	f7f7 f99f 	bl	80017b4 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d901      	bls.n	800a484 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e086      	b.n	800a592 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a484:	4b45      	ldr	r3, [pc, #276]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1f0      	bne.n	800a472 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a490:	4b42      	ldr	r3, [pc, #264]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a494:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	051b      	lsls	r3, r3, #20
 800a49e:	493f      	ldr	r1, [pc, #252]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	628b      	str	r3, [r1, #40]	; 0x28
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	025b      	lsls	r3, r3, #9
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	041b      	lsls	r3, r3, #16
 800a4c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	061b      	lsls	r3, r3, #24
 800a4d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4d4:	4931      	ldr	r1, [pc, #196]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a4da:	4b30      	ldr	r3, [pc, #192]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	492d      	ldr	r1, [pc, #180]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a4ec:	4b2b      	ldr	r3, [pc, #172]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	4928      	ldr	r1, [pc, #160]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a4fe:	4b27      	ldr	r3, [pc, #156]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	4a26      	ldr	r2, [pc, #152]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a508:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a50a:	4b24      	ldr	r3, [pc, #144]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a50c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a50e:	4b24      	ldr	r3, [pc, #144]	; (800a5a0 <RCCEx_PLL3_Config+0x160>)
 800a510:	4013      	ands	r3, r2
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	69d2      	ldr	r2, [r2, #28]
 800a516:	00d2      	lsls	r2, r2, #3
 800a518:	4920      	ldr	r1, [pc, #128]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a51a:	4313      	orrs	r3, r2
 800a51c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a51e:	4b1f      	ldr	r3, [pc, #124]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a522:	4a1e      	ldr	r2, [pc, #120]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a528:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d106      	bne.n	800a53e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a530:	4b1a      	ldr	r3, [pc, #104]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	4a19      	ldr	r2, [pc, #100]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a536:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a53a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a53c:	e00f      	b.n	800a55e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d106      	bne.n	800a552 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a544:	4b15      	ldr	r3, [pc, #84]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a548:	4a14      	ldr	r2, [pc, #80]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a54a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a54e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a550:	e005      	b.n	800a55e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a552:	4b12      	ldr	r3, [pc, #72]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a556:	4a11      	ldr	r2, [pc, #68]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a55c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a55e:	4b0f      	ldr	r3, [pc, #60]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a0e      	ldr	r2, [pc, #56]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a56a:	f7f7 f923 	bl	80017b4 <HAL_GetTick>
 800a56e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a570:	e008      	b.n	800a584 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a572:	f7f7 f91f 	bl	80017b4 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d901      	bls.n	800a584 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e006      	b.n	800a592 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <RCCEx_PLL3_Config+0x15c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0f0      	beq.n	800a572 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	58024400 	.word	0x58024400
 800a5a0:	ffff0007 	.word	0xffff0007

0800a5a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d067      	beq.n	800a686 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7f6 fe8e 	bl	80012ec <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	22ca      	movs	r2, #202	; 0xca
 800a5de:	625a      	str	r2, [r3, #36]	; 0x24
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2253      	movs	r2, #83	; 0x53
 800a5e6:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f879 	bl	800a6e0 <RTC_EnterInitMode>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800a5f2:	7bfb      	ldrb	r3, [r7, #15]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d13b      	bne.n	800a670 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6899      	ldr	r1, [r3, #8]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	4b23      	ldr	r3, [pc, #140]	; (800a690 <HAL_RTC_Init+0xec>)
 800a604:	400b      	ands	r3, r1
 800a606:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6899      	ldr	r1, [r3, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	431a      	orrs	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	431a      	orrs	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	0419      	lsls	r1, r3, #16
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f881 	bl	800a740 <RTC_ExitInitMode>
 800a63e:	4603      	mov	r3, r0
 800a640:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d113      	bne.n	800a670 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f022 0203 	bic.w	r2, r2, #3
 800a656:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69da      	ldr	r2, [r3, #28]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	22ff      	movs	r2, #255	; 0xff
 800a676:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a678:	7bfb      	ldrb	r3, [r7, #15]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d103      	bne.n	800a686 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a686:	7bfb      	ldrb	r3, [r7, #15]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	ff8fffbf 	.word	0xff8fffbf

0800a694 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68da      	ldr	r2, [r3, #12]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6aa:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a6ac:	f7f7 f882 	bl	80017b4 <HAL_GetTick>
 800a6b0:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6b2:	e009      	b.n	800a6c8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6b4:	f7f7 f87e 	bl	80017b4 <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6c2:	d901      	bls.n	800a6c8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e007      	b.n	800a6d8 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f003 0320 	and.w	r3, r3, #32
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0ee      	beq.n	800a6b4 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d11d      	bne.n	800a736 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a702:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a704:	f7f7 f856 	bl	80017b4 <HAL_GetTick>
 800a708:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a70a:	e00d      	b.n	800a728 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a70c:	f7f7 f852 	bl	80017b4 <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a71a:	d905      	bls.n	800a728 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2203      	movs	r2, #3
 800a724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0ea      	beq.n	800a70c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a736:	7bfb      	ldrb	r3, [r7, #15]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a74c:	4b1a      	ldr	r3, [pc, #104]	; (800a7b8 <RTC_ExitInitMode+0x78>)
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	4a19      	ldr	r2, [pc, #100]	; (800a7b8 <RTC_ExitInitMode+0x78>)
 800a752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a756:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a758:	4b17      	ldr	r3, [pc, #92]	; (800a7b8 <RTC_ExitInitMode+0x78>)
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f003 0320 	and.w	r3, r3, #32
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10c      	bne.n	800a77e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff ff95 	bl	800a694 <HAL_RTC_WaitForSynchro>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01e      	beq.n	800a7ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2203      	movs	r2, #3
 800a774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	73fb      	strb	r3, [r7, #15]
 800a77c:	e017      	b.n	800a7ae <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a77e:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <RTC_ExitInitMode+0x78>)
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	4a0d      	ldr	r2, [pc, #52]	; (800a7b8 <RTC_ExitInitMode+0x78>)
 800a784:	f023 0320 	bic.w	r3, r3, #32
 800a788:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff ff82 	bl	800a694 <HAL_RTC_WaitForSynchro>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d005      	beq.n	800a7a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2203      	movs	r2, #3
 800a79a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7a2:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <RTC_ExitInitMode+0x78>)
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	4a04      	ldr	r2, [pc, #16]	; (800a7b8 <RTC_ExitInitMode+0x78>)
 800a7a8:	f043 0320 	orr.w	r3, r3, #32
 800a7ac:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	58004000 	.word	0x58004000

0800a7bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d101      	bne.n	800a7ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e049      	b.n	800a862 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7f6 fd9c 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	f000 f9b4 	bl	800ab68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d001      	beq.n	800a884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	e021      	b.n	800a8c8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2202      	movs	r2, #2
 800a888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0201 	orr.w	r2, r2, #1
 800a89a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	4b0c      	ldr	r3, [pc, #48]	; (800a8d4 <HAL_TIM_Base_Start_IT+0x68>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b06      	cmp	r3, #6
 800a8ac:	d00b      	beq.n	800a8c6 <HAL_TIM_Base_Start_IT+0x5a>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b4:	d007      	beq.n	800a8c6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f042 0201 	orr.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr
 800a8d4:	00010007 	.word	0x00010007

0800a8d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d122      	bne.n	800a934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d11b      	bne.n	800a934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f06f 0202 	mvn.w	r2, #2
 800a904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	f003 0303 	and.w	r3, r3, #3
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f905 	bl	800ab2a <HAL_TIM_IC_CaptureCallback>
 800a920:	e005      	b.n	800a92e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 f8f7 	bl	800ab16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f908 	bl	800ab3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d122      	bne.n	800a988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f003 0304 	and.w	r3, r3, #4
 800a94c:	2b04      	cmp	r3, #4
 800a94e:	d11b      	bne.n	800a988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f06f 0204 	mvn.w	r2, #4
 800a958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2202      	movs	r2, #2
 800a95e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f8db 	bl	800ab2a <HAL_TIM_IC_CaptureCallback>
 800a974:	e005      	b.n	800a982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 f8cd 	bl	800ab16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f8de 	bl	800ab3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b08      	cmp	r3, #8
 800a994:	d122      	bne.n	800a9dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f003 0308 	and.w	r3, r3, #8
 800a9a0:	2b08      	cmp	r3, #8
 800a9a2:	d11b      	bne.n	800a9dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0208 	mvn.w	r2, #8
 800a9ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2204      	movs	r2, #4
 800a9b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f8b1 	bl	800ab2a <HAL_TIM_IC_CaptureCallback>
 800a9c8:	e005      	b.n	800a9d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f8a3 	bl	800ab16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f8b4 	bl	800ab3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	f003 0310 	and.w	r3, r3, #16
 800a9e6:	2b10      	cmp	r3, #16
 800a9e8:	d122      	bne.n	800aa30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f003 0310 	and.w	r3, r3, #16
 800a9f4:	2b10      	cmp	r3, #16
 800a9f6:	d11b      	bne.n	800aa30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f06f 0210 	mvn.w	r2, #16
 800aa00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2208      	movs	r2, #8
 800aa06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f887 	bl	800ab2a <HAL_TIM_IC_CaptureCallback>
 800aa1c:	e005      	b.n	800aa2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f879 	bl	800ab16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f88a 	bl	800ab3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d10e      	bne.n	800aa5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d107      	bne.n	800aa5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f06f 0201 	mvn.w	r2, #1
 800aa54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7f6 fa26 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa66:	2b80      	cmp	r3, #128	; 0x80
 800aa68:	d10e      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa74:	2b80      	cmp	r3, #128	; 0x80
 800aa76:	d107      	bne.n	800aa88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f914 	bl	800acb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa96:	d10e      	bne.n	800aab6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa2:	2b80      	cmp	r3, #128	; 0x80
 800aaa4:	d107      	bne.n	800aab6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aaae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f907 	bl	800acc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac0:	2b40      	cmp	r3, #64	; 0x40
 800aac2:	d10e      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aace:	2b40      	cmp	r3, #64	; 0x40
 800aad0:	d107      	bne.n	800aae2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f000 f838 	bl	800ab52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	f003 0320 	and.w	r3, r3, #32
 800aaec:	2b20      	cmp	r3, #32
 800aaee:	d10e      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f003 0320 	and.w	r3, r3, #32
 800aafa:	2b20      	cmp	r3, #32
 800aafc:	d107      	bne.n	800ab0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f06f 0220 	mvn.w	r2, #32
 800ab06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f8c7 	bl	800ac9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b083      	sub	sp, #12
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab5a:	bf00      	nop
 800ab5c:	370c      	adds	r7, #12
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
	...

0800ab68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a40      	ldr	r2, [pc, #256]	; (800ac7c <TIM_Base_SetConfig+0x114>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d013      	beq.n	800aba8 <TIM_Base_SetConfig+0x40>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab86:	d00f      	beq.n	800aba8 <TIM_Base_SetConfig+0x40>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a3d      	ldr	r2, [pc, #244]	; (800ac80 <TIM_Base_SetConfig+0x118>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d00b      	beq.n	800aba8 <TIM_Base_SetConfig+0x40>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a3c      	ldr	r2, [pc, #240]	; (800ac84 <TIM_Base_SetConfig+0x11c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d007      	beq.n	800aba8 <TIM_Base_SetConfig+0x40>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a3b      	ldr	r2, [pc, #236]	; (800ac88 <TIM_Base_SetConfig+0x120>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d003      	beq.n	800aba8 <TIM_Base_SetConfig+0x40>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a3a      	ldr	r2, [pc, #232]	; (800ac8c <TIM_Base_SetConfig+0x124>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d108      	bne.n	800abba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a2f      	ldr	r2, [pc, #188]	; (800ac7c <TIM_Base_SetConfig+0x114>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d01f      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abc8:	d01b      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a2c      	ldr	r2, [pc, #176]	; (800ac80 <TIM_Base_SetConfig+0x118>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d017      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a2b      	ldr	r2, [pc, #172]	; (800ac84 <TIM_Base_SetConfig+0x11c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d013      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a2a      	ldr	r2, [pc, #168]	; (800ac88 <TIM_Base_SetConfig+0x120>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00f      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a29      	ldr	r2, [pc, #164]	; (800ac8c <TIM_Base_SetConfig+0x124>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d00b      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a28      	ldr	r2, [pc, #160]	; (800ac90 <TIM_Base_SetConfig+0x128>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d007      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a27      	ldr	r2, [pc, #156]	; (800ac94 <TIM_Base_SetConfig+0x12c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d003      	beq.n	800ac02 <TIM_Base_SetConfig+0x9a>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a26      	ldr	r2, [pc, #152]	; (800ac98 <TIM_Base_SetConfig+0x130>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d108      	bne.n	800ac14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <TIM_Base_SetConfig+0x114>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00f      	beq.n	800ac60 <TIM_Base_SetConfig+0xf8>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a12      	ldr	r2, [pc, #72]	; (800ac8c <TIM_Base_SetConfig+0x124>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d00b      	beq.n	800ac60 <TIM_Base_SetConfig+0xf8>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a11      	ldr	r2, [pc, #68]	; (800ac90 <TIM_Base_SetConfig+0x128>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d007      	beq.n	800ac60 <TIM_Base_SetConfig+0xf8>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a10      	ldr	r2, [pc, #64]	; (800ac94 <TIM_Base_SetConfig+0x12c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d003      	beq.n	800ac60 <TIM_Base_SetConfig+0xf8>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a0f      	ldr	r2, [pc, #60]	; (800ac98 <TIM_Base_SetConfig+0x130>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d103      	bne.n	800ac68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	615a      	str	r2, [r3, #20]
}
 800ac6e:	bf00      	nop
 800ac70:	3714      	adds	r7, #20
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	40010000 	.word	0x40010000
 800ac80:	40000400 	.word	0x40000400
 800ac84:	40000800 	.word	0x40000800
 800ac88:	40000c00 	.word	0x40000c00
 800ac8c:	40010400 	.word	0x40010400
 800ac90:	40014000 	.word	0x40014000
 800ac94:	40014400 	.word	0x40014400
 800ac98:	40014800 	.word	0x40014800

0800ac9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e042      	b.n	800ad70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d106      	bne.n	800ad02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f6 fb37 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2224      	movs	r2, #36	; 0x24
 800ad06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f022 0201 	bic.w	r2, r2, #1
 800ad18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f82c 	bl	800ad78 <UART_SetConfig>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad26:	2301      	movs	r3, #1
 800ad28:	e022      	b.n	800ad70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fdd0 	bl	800b8d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689a      	ldr	r2, [r3, #8]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f042 0201 	orr.w	r2, r2, #1
 800ad66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fe57 	bl	800ba1c <UART_CheckIdleState>
 800ad6e:	4603      	mov	r3, r0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ad7c:	b08e      	sub	sp, #56	; 0x38
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	431a      	orrs	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	431a      	orrs	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ada4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ada6:	4313      	orrs	r3, r2
 800ada8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	4bc1      	ldr	r3, [pc, #772]	; (800b0b8 <UART_SetConfig+0x340>)
 800adb2:	4013      	ands	r3, r2
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	6812      	ldr	r2, [r2, #0]
 800adb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800adba:	430b      	orrs	r3, r1
 800adbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4ab7      	ldr	r2, [pc, #732]	; (800b0bc <UART_SetConfig+0x344>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d004      	beq.n	800adee <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adea:	4313      	orrs	r3, r2
 800adec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	689a      	ldr	r2, [r3, #8]
 800adf4:	4bb2      	ldr	r3, [pc, #712]	; (800b0c0 <UART_SetConfig+0x348>)
 800adf6:	4013      	ands	r3, r2
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6812      	ldr	r2, [r2, #0]
 800adfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800adfe:	430b      	orrs	r3, r1
 800ae00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	f023 010f 	bic.w	r1, r3, #15
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4aa9      	ldr	r2, [pc, #676]	; (800b0c4 <UART_SetConfig+0x34c>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d177      	bne.n	800af12 <UART_SetConfig+0x19a>
 800ae22:	4ba9      	ldr	r3, [pc, #676]	; (800b0c8 <UART_SetConfig+0x350>)
 800ae24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae2a:	2b28      	cmp	r3, #40	; 0x28
 800ae2c:	d86c      	bhi.n	800af08 <UART_SetConfig+0x190>
 800ae2e:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <UART_SetConfig+0xbc>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800aed9 	.word	0x0800aed9
 800ae38:	0800af09 	.word	0x0800af09
 800ae3c:	0800af09 	.word	0x0800af09
 800ae40:	0800af09 	.word	0x0800af09
 800ae44:	0800af09 	.word	0x0800af09
 800ae48:	0800af09 	.word	0x0800af09
 800ae4c:	0800af09 	.word	0x0800af09
 800ae50:	0800af09 	.word	0x0800af09
 800ae54:	0800aee1 	.word	0x0800aee1
 800ae58:	0800af09 	.word	0x0800af09
 800ae5c:	0800af09 	.word	0x0800af09
 800ae60:	0800af09 	.word	0x0800af09
 800ae64:	0800af09 	.word	0x0800af09
 800ae68:	0800af09 	.word	0x0800af09
 800ae6c:	0800af09 	.word	0x0800af09
 800ae70:	0800af09 	.word	0x0800af09
 800ae74:	0800aee9 	.word	0x0800aee9
 800ae78:	0800af09 	.word	0x0800af09
 800ae7c:	0800af09 	.word	0x0800af09
 800ae80:	0800af09 	.word	0x0800af09
 800ae84:	0800af09 	.word	0x0800af09
 800ae88:	0800af09 	.word	0x0800af09
 800ae8c:	0800af09 	.word	0x0800af09
 800ae90:	0800af09 	.word	0x0800af09
 800ae94:	0800aef1 	.word	0x0800aef1
 800ae98:	0800af09 	.word	0x0800af09
 800ae9c:	0800af09 	.word	0x0800af09
 800aea0:	0800af09 	.word	0x0800af09
 800aea4:	0800af09 	.word	0x0800af09
 800aea8:	0800af09 	.word	0x0800af09
 800aeac:	0800af09 	.word	0x0800af09
 800aeb0:	0800af09 	.word	0x0800af09
 800aeb4:	0800aef9 	.word	0x0800aef9
 800aeb8:	0800af09 	.word	0x0800af09
 800aebc:	0800af09 	.word	0x0800af09
 800aec0:	0800af09 	.word	0x0800af09
 800aec4:	0800af09 	.word	0x0800af09
 800aec8:	0800af09 	.word	0x0800af09
 800aecc:	0800af09 	.word	0x0800af09
 800aed0:	0800af09 	.word	0x0800af09
 800aed4:	0800af01 	.word	0x0800af01
 800aed8:	2301      	movs	r3, #1
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e233      	b.n	800b348 <UART_SetConfig+0x5d0>
 800aee0:	2304      	movs	r3, #4
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e22f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800aee8:	2308      	movs	r3, #8
 800aeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeee:	e22b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800aef0:	2310      	movs	r3, #16
 800aef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef6:	e227      	b.n	800b348 <UART_SetConfig+0x5d0>
 800aef8:	2320      	movs	r3, #32
 800aefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefe:	e223      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af00:	2340      	movs	r3, #64	; 0x40
 800af02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af06:	e21f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af08:	2380      	movs	r3, #128	; 0x80
 800af0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af0e:	bf00      	nop
 800af10:	e21a      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a6d      	ldr	r2, [pc, #436]	; (800b0cc <UART_SetConfig+0x354>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d132      	bne.n	800af82 <UART_SetConfig+0x20a>
 800af1c:	4b6a      	ldr	r3, [pc, #424]	; (800b0c8 <UART_SetConfig+0x350>)
 800af1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af20:	f003 0307 	and.w	r3, r3, #7
 800af24:	2b05      	cmp	r3, #5
 800af26:	d827      	bhi.n	800af78 <UART_SetConfig+0x200>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <UART_SetConfig+0x1b8>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af49 	.word	0x0800af49
 800af34:	0800af51 	.word	0x0800af51
 800af38:	0800af59 	.word	0x0800af59
 800af3c:	0800af61 	.word	0x0800af61
 800af40:	0800af69 	.word	0x0800af69
 800af44:	0800af71 	.word	0x0800af71
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4e:	e1fb      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af50:	2304      	movs	r3, #4
 800af52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af56:	e1f7      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af58:	2308      	movs	r3, #8
 800af5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af5e:	e1f3      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af60:	2310      	movs	r3, #16
 800af62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af66:	e1ef      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af68:	2320      	movs	r3, #32
 800af6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af6e:	e1eb      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af76:	e1e7      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af78:	2380      	movs	r3, #128	; 0x80
 800af7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7e:	bf00      	nop
 800af80:	e1e2      	b.n	800b348 <UART_SetConfig+0x5d0>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a52      	ldr	r2, [pc, #328]	; (800b0d0 <UART_SetConfig+0x358>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d132      	bne.n	800aff2 <UART_SetConfig+0x27a>
 800af8c:	4b4e      	ldr	r3, [pc, #312]	; (800b0c8 <UART_SetConfig+0x350>)
 800af8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af90:	f003 0307 	and.w	r3, r3, #7
 800af94:	2b05      	cmp	r3, #5
 800af96:	d827      	bhi.n	800afe8 <UART_SetConfig+0x270>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <UART_SetConfig+0x228>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800afb9 	.word	0x0800afb9
 800afa4:	0800afc1 	.word	0x0800afc1
 800afa8:	0800afc9 	.word	0x0800afc9
 800afac:	0800afd1 	.word	0x0800afd1
 800afb0:	0800afd9 	.word	0x0800afd9
 800afb4:	0800afe1 	.word	0x0800afe1
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afbe:	e1c3      	b.n	800b348 <UART_SetConfig+0x5d0>
 800afc0:	2304      	movs	r3, #4
 800afc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afc6:	e1bf      	b.n	800b348 <UART_SetConfig+0x5d0>
 800afc8:	2308      	movs	r3, #8
 800afca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afce:	e1bb      	b.n	800b348 <UART_SetConfig+0x5d0>
 800afd0:	2310      	movs	r3, #16
 800afd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd6:	e1b7      	b.n	800b348 <UART_SetConfig+0x5d0>
 800afd8:	2320      	movs	r3, #32
 800afda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afde:	e1b3      	b.n	800b348 <UART_SetConfig+0x5d0>
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e1af      	b.n	800b348 <UART_SetConfig+0x5d0>
 800afe8:	2380      	movs	r3, #128	; 0x80
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	bf00      	nop
 800aff0:	e1aa      	b.n	800b348 <UART_SetConfig+0x5d0>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a37      	ldr	r2, [pc, #220]	; (800b0d4 <UART_SetConfig+0x35c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d132      	bne.n	800b062 <UART_SetConfig+0x2ea>
 800affc:	4b32      	ldr	r3, [pc, #200]	; (800b0c8 <UART_SetConfig+0x350>)
 800affe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	2b05      	cmp	r3, #5
 800b006:	d827      	bhi.n	800b058 <UART_SetConfig+0x2e0>
 800b008:	a201      	add	r2, pc, #4	; (adr r2, 800b010 <UART_SetConfig+0x298>)
 800b00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00e:	bf00      	nop
 800b010:	0800b029 	.word	0x0800b029
 800b014:	0800b031 	.word	0x0800b031
 800b018:	0800b039 	.word	0x0800b039
 800b01c:	0800b041 	.word	0x0800b041
 800b020:	0800b049 	.word	0x0800b049
 800b024:	0800b051 	.word	0x0800b051
 800b028:	2300      	movs	r3, #0
 800b02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b02e:	e18b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b030:	2304      	movs	r3, #4
 800b032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b036:	e187      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b038:	2308      	movs	r3, #8
 800b03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b03e:	e183      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b040:	2310      	movs	r3, #16
 800b042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b046:	e17f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b048:	2320      	movs	r3, #32
 800b04a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04e:	e17b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b050:	2340      	movs	r3, #64	; 0x40
 800b052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b056:	e177      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b058:	2380      	movs	r3, #128	; 0x80
 800b05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05e:	bf00      	nop
 800b060:	e172      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1c      	ldr	r2, [pc, #112]	; (800b0d8 <UART_SetConfig+0x360>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d144      	bne.n	800b0f6 <UART_SetConfig+0x37e>
 800b06c:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <UART_SetConfig+0x350>)
 800b06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b070:	f003 0307 	and.w	r3, r3, #7
 800b074:	2b05      	cmp	r3, #5
 800b076:	d839      	bhi.n	800b0ec <UART_SetConfig+0x374>
 800b078:	a201      	add	r2, pc, #4	; (adr r2, 800b080 <UART_SetConfig+0x308>)
 800b07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07e:	bf00      	nop
 800b080:	0800b099 	.word	0x0800b099
 800b084:	0800b0a1 	.word	0x0800b0a1
 800b088:	0800b0a9 	.word	0x0800b0a9
 800b08c:	0800b0b1 	.word	0x0800b0b1
 800b090:	0800b0dd 	.word	0x0800b0dd
 800b094:	0800b0e5 	.word	0x0800b0e5
 800b098:	2300      	movs	r3, #0
 800b09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b09e:	e153      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a6:	e14f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b0a8:	2308      	movs	r3, #8
 800b0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ae:	e14b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b0b0:	2310      	movs	r3, #16
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e147      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b0b8:	cfff69f3 	.word	0xcfff69f3
 800b0bc:	58000c00 	.word	0x58000c00
 800b0c0:	11fff4ff 	.word	0x11fff4ff
 800b0c4:	40011000 	.word	0x40011000
 800b0c8:	58024400 	.word	0x58024400
 800b0cc:	40004400 	.word	0x40004400
 800b0d0:	40004800 	.word	0x40004800
 800b0d4:	40004c00 	.word	0x40004c00
 800b0d8:	40005000 	.word	0x40005000
 800b0dc:	2320      	movs	r3, #32
 800b0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e2:	e131      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b0e4:	2340      	movs	r3, #64	; 0x40
 800b0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ea:	e12d      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b0ec:	2380      	movs	r3, #128	; 0x80
 800b0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0f2:	bf00      	nop
 800b0f4:	e128      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4ab6      	ldr	r2, [pc, #728]	; (800b3d4 <UART_SetConfig+0x65c>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d178      	bne.n	800b1f2 <UART_SetConfig+0x47a>
 800b100:	4bb5      	ldr	r3, [pc, #724]	; (800b3d8 <UART_SetConfig+0x660>)
 800b102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b108:	2b28      	cmp	r3, #40	; 0x28
 800b10a:	d86d      	bhi.n	800b1e8 <UART_SetConfig+0x470>
 800b10c:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <UART_SetConfig+0x39c>)
 800b10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b112:	bf00      	nop
 800b114:	0800b1b9 	.word	0x0800b1b9
 800b118:	0800b1e9 	.word	0x0800b1e9
 800b11c:	0800b1e9 	.word	0x0800b1e9
 800b120:	0800b1e9 	.word	0x0800b1e9
 800b124:	0800b1e9 	.word	0x0800b1e9
 800b128:	0800b1e9 	.word	0x0800b1e9
 800b12c:	0800b1e9 	.word	0x0800b1e9
 800b130:	0800b1e9 	.word	0x0800b1e9
 800b134:	0800b1c1 	.word	0x0800b1c1
 800b138:	0800b1e9 	.word	0x0800b1e9
 800b13c:	0800b1e9 	.word	0x0800b1e9
 800b140:	0800b1e9 	.word	0x0800b1e9
 800b144:	0800b1e9 	.word	0x0800b1e9
 800b148:	0800b1e9 	.word	0x0800b1e9
 800b14c:	0800b1e9 	.word	0x0800b1e9
 800b150:	0800b1e9 	.word	0x0800b1e9
 800b154:	0800b1c9 	.word	0x0800b1c9
 800b158:	0800b1e9 	.word	0x0800b1e9
 800b15c:	0800b1e9 	.word	0x0800b1e9
 800b160:	0800b1e9 	.word	0x0800b1e9
 800b164:	0800b1e9 	.word	0x0800b1e9
 800b168:	0800b1e9 	.word	0x0800b1e9
 800b16c:	0800b1e9 	.word	0x0800b1e9
 800b170:	0800b1e9 	.word	0x0800b1e9
 800b174:	0800b1d1 	.word	0x0800b1d1
 800b178:	0800b1e9 	.word	0x0800b1e9
 800b17c:	0800b1e9 	.word	0x0800b1e9
 800b180:	0800b1e9 	.word	0x0800b1e9
 800b184:	0800b1e9 	.word	0x0800b1e9
 800b188:	0800b1e9 	.word	0x0800b1e9
 800b18c:	0800b1e9 	.word	0x0800b1e9
 800b190:	0800b1e9 	.word	0x0800b1e9
 800b194:	0800b1d9 	.word	0x0800b1d9
 800b198:	0800b1e9 	.word	0x0800b1e9
 800b19c:	0800b1e9 	.word	0x0800b1e9
 800b1a0:	0800b1e9 	.word	0x0800b1e9
 800b1a4:	0800b1e9 	.word	0x0800b1e9
 800b1a8:	0800b1e9 	.word	0x0800b1e9
 800b1ac:	0800b1e9 	.word	0x0800b1e9
 800b1b0:	0800b1e9 	.word	0x0800b1e9
 800b1b4:	0800b1e1 	.word	0x0800b1e1
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1be:	e0c3      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b1c0:	2304      	movs	r3, #4
 800b1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1c6:	e0bf      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b1c8:	2308      	movs	r3, #8
 800b1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ce:	e0bb      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b1d0:	2310      	movs	r3, #16
 800b1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d6:	e0b7      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b1d8:	2320      	movs	r3, #32
 800b1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1de:	e0b3      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b1e0:	2340      	movs	r3, #64	; 0x40
 800b1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e6:	e0af      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b1e8:	2380      	movs	r3, #128	; 0x80
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	bf00      	nop
 800b1f0:	e0aa      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a79      	ldr	r2, [pc, #484]	; (800b3dc <UART_SetConfig+0x664>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d132      	bne.n	800b262 <UART_SetConfig+0x4ea>
 800b1fc:	4b76      	ldr	r3, [pc, #472]	; (800b3d8 <UART_SetConfig+0x660>)
 800b1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b200:	f003 0307 	and.w	r3, r3, #7
 800b204:	2b05      	cmp	r3, #5
 800b206:	d827      	bhi.n	800b258 <UART_SetConfig+0x4e0>
 800b208:	a201      	add	r2, pc, #4	; (adr r2, 800b210 <UART_SetConfig+0x498>)
 800b20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20e:	bf00      	nop
 800b210:	0800b229 	.word	0x0800b229
 800b214:	0800b231 	.word	0x0800b231
 800b218:	0800b239 	.word	0x0800b239
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b249 	.word	0x0800b249
 800b224:	0800b251 	.word	0x0800b251
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22e:	e08b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b230:	2304      	movs	r3, #4
 800b232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b236:	e087      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b238:	2308      	movs	r3, #8
 800b23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23e:	e083      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b240:	2310      	movs	r3, #16
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e07f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b248:	2320      	movs	r3, #32
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e07b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b250:	2340      	movs	r3, #64	; 0x40
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	e077      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b258:	2380      	movs	r3, #128	; 0x80
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	bf00      	nop
 800b260:	e072      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a5e      	ldr	r2, [pc, #376]	; (800b3e0 <UART_SetConfig+0x668>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d132      	bne.n	800b2d2 <UART_SetConfig+0x55a>
 800b26c:	4b5a      	ldr	r3, [pc, #360]	; (800b3d8 <UART_SetConfig+0x660>)
 800b26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b270:	f003 0307 	and.w	r3, r3, #7
 800b274:	2b05      	cmp	r3, #5
 800b276:	d827      	bhi.n	800b2c8 <UART_SetConfig+0x550>
 800b278:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <UART_SetConfig+0x508>)
 800b27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27e:	bf00      	nop
 800b280:	0800b299 	.word	0x0800b299
 800b284:	0800b2a1 	.word	0x0800b2a1
 800b288:	0800b2a9 	.word	0x0800b2a9
 800b28c:	0800b2b1 	.word	0x0800b2b1
 800b290:	0800b2b9 	.word	0x0800b2b9
 800b294:	0800b2c1 	.word	0x0800b2c1
 800b298:	2300      	movs	r3, #0
 800b29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b29e:	e053      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b2a0:	2304      	movs	r3, #4
 800b2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a6:	e04f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b2a8:	2308      	movs	r3, #8
 800b2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ae:	e04b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b2b0:	2310      	movs	r3, #16
 800b2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b6:	e047      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b2b8:	2320      	movs	r3, #32
 800b2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2be:	e043      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b2c0:	2340      	movs	r3, #64	; 0x40
 800b2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c6:	e03f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b2c8:	2380      	movs	r3, #128	; 0x80
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ce:	bf00      	nop
 800b2d0:	e03a      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a43      	ldr	r2, [pc, #268]	; (800b3e4 <UART_SetConfig+0x66c>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d132      	bne.n	800b342 <UART_SetConfig+0x5ca>
 800b2dc:	4b3e      	ldr	r3, [pc, #248]	; (800b3d8 <UART_SetConfig+0x660>)
 800b2de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2e0:	f003 0307 	and.w	r3, r3, #7
 800b2e4:	2b05      	cmp	r3, #5
 800b2e6:	d827      	bhi.n	800b338 <UART_SetConfig+0x5c0>
 800b2e8:	a201      	add	r2, pc, #4	; (adr r2, 800b2f0 <UART_SetConfig+0x578>)
 800b2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ee:	bf00      	nop
 800b2f0:	0800b309 	.word	0x0800b309
 800b2f4:	0800b311 	.word	0x0800b311
 800b2f8:	0800b319 	.word	0x0800b319
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b329 	.word	0x0800b329
 800b304:	0800b331 	.word	0x0800b331
 800b308:	2302      	movs	r3, #2
 800b30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30e:	e01b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b310:	2304      	movs	r3, #4
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e017      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b318:	2308      	movs	r3, #8
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e013      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b320:	2310      	movs	r3, #16
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e00f      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b328:	2320      	movs	r3, #32
 800b32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32e:	e00b      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b330:	2340      	movs	r3, #64	; 0x40
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e007      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b338:	2380      	movs	r3, #128	; 0x80
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	bf00      	nop
 800b340:	e002      	b.n	800b348 <UART_SetConfig+0x5d0>
 800b342:	2380      	movs	r3, #128	; 0x80
 800b344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a25      	ldr	r2, [pc, #148]	; (800b3e4 <UART_SetConfig+0x66c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	f040 80b8 	bne.w	800b4c4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b354:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b358:	2b08      	cmp	r3, #8
 800b35a:	d019      	beq.n	800b390 <UART_SetConfig+0x618>
 800b35c:	2b08      	cmp	r3, #8
 800b35e:	dc04      	bgt.n	800b36a <UART_SetConfig+0x5f2>
 800b360:	2b02      	cmp	r3, #2
 800b362:	d009      	beq.n	800b378 <UART_SetConfig+0x600>
 800b364:	2b04      	cmp	r3, #4
 800b366:	d00b      	beq.n	800b380 <UART_SetConfig+0x608>
 800b368:	e042      	b.n	800b3f0 <UART_SetConfig+0x678>
 800b36a:	2b20      	cmp	r3, #32
 800b36c:	d02b      	beq.n	800b3c6 <UART_SetConfig+0x64e>
 800b36e:	2b40      	cmp	r3, #64	; 0x40
 800b370:	d02c      	beq.n	800b3cc <UART_SetConfig+0x654>
 800b372:	2b10      	cmp	r3, #16
 800b374:	d014      	beq.n	800b3a0 <UART_SetConfig+0x628>
 800b376:	e03b      	b.n	800b3f0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b378:	f7fe fbb6 	bl	8009ae8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b37c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b37e:	e03d      	b.n	800b3fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b380:	f107 0314 	add.w	r3, r7, #20
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe fbc5 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b38e:	e035      	b.n	800b3fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b390:	f107 0308 	add.w	r3, r7, #8
 800b394:	4618      	mov	r0, r3
 800b396:	f7fe fd09 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b39e:	e02d      	b.n	800b3fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3a0:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <UART_SetConfig+0x660>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d009      	beq.n	800b3c0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3ac:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <UART_SetConfig+0x660>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	08db      	lsrs	r3, r3, #3
 800b3b2:	f003 0303 	and.w	r3, r3, #3
 800b3b6:	4a0c      	ldr	r2, [pc, #48]	; (800b3e8 <UART_SetConfig+0x670>)
 800b3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3be:	e01d      	b.n	800b3fc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b3c0:	4b09      	ldr	r3, [pc, #36]	; (800b3e8 <UART_SetConfig+0x670>)
 800b3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3c4:	e01a      	b.n	800b3fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <UART_SetConfig+0x674>)
 800b3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3ca:	e017      	b.n	800b3fc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3d2:	e013      	b.n	800b3fc <UART_SetConfig+0x684>
 800b3d4:	40011400 	.word	0x40011400
 800b3d8:	58024400 	.word	0x58024400
 800b3dc:	40007800 	.word	0x40007800
 800b3e0:	40007c00 	.word	0x40007c00
 800b3e4:	58000c00 	.word	0x58000c00
 800b3e8:	03d09000 	.word	0x03d09000
 800b3ec:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b3fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 824d 	beq.w	800b89e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b408:	4aad      	ldr	r2, [pc, #692]	; (800b6c0 <UART_SetConfig+0x948>)
 800b40a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b40e:	461a      	mov	r2, r3
 800b410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b412:	fbb3 f3f2 	udiv	r3, r3, r2
 800b416:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	4613      	mov	r3, r2
 800b41e:	005b      	lsls	r3, r3, #1
 800b420:	4413      	add	r3, r2
 800b422:	6a3a      	ldr	r2, [r7, #32]
 800b424:	429a      	cmp	r2, r3
 800b426:	d305      	bcc.n	800b434 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b42e:	6a3a      	ldr	r2, [r7, #32]
 800b430:	429a      	cmp	r2, r3
 800b432:	d903      	bls.n	800b43c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b43a:	e230      	b.n	800b89e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43e:	4618      	mov	r0, r3
 800b440:	f04f 0100 	mov.w	r1, #0
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b448:	4a9d      	ldr	r2, [pc, #628]	; (800b6c0 <UART_SetConfig+0x948>)
 800b44a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b44e:	b29b      	uxth	r3, r3
 800b450:	f04f 0400 	mov.w	r4, #0
 800b454:	461a      	mov	r2, r3
 800b456:	4623      	mov	r3, r4
 800b458:	f7f4 ff92 	bl	8000380 <__aeabi_uldivmod>
 800b45c:	4603      	mov	r3, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	4619      	mov	r1, r3
 800b462:	4622      	mov	r2, r4
 800b464:	f04f 0300 	mov.w	r3, #0
 800b468:	f04f 0400 	mov.w	r4, #0
 800b46c:	0214      	lsls	r4, r2, #8
 800b46e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b472:	020b      	lsls	r3, r1, #8
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6852      	ldr	r2, [r2, #4]
 800b478:	0852      	lsrs	r2, r2, #1
 800b47a:	4611      	mov	r1, r2
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	eb13 0b01 	adds.w	fp, r3, r1
 800b484:	eb44 0c02 	adc.w	ip, r4, r2
 800b488:	4658      	mov	r0, fp
 800b48a:	4661      	mov	r1, ip
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	f04f 0400 	mov.w	r4, #0
 800b494:	461a      	mov	r2, r3
 800b496:	4623      	mov	r3, r4
 800b498:	f7f4 ff72 	bl	8000380 <__aeabi_uldivmod>
 800b49c:	4603      	mov	r3, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4a8:	d308      	bcc.n	800b4bc <UART_SetConfig+0x744>
 800b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4b0:	d204      	bcs.n	800b4bc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b8:	60da      	str	r2, [r3, #12]
 800b4ba:	e1f0      	b.n	800b89e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b4c2:	e1ec      	b.n	800b89e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	69db      	ldr	r3, [r3, #28]
 800b4c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4cc:	f040 8100 	bne.w	800b6d0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b4d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4d4:	2b40      	cmp	r3, #64	; 0x40
 800b4d6:	f200 80b7 	bhi.w	800b648 <UART_SetConfig+0x8d0>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <UART_SetConfig+0x768>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b5e5 	.word	0x0800b5e5
 800b4e4:	0800b5ed 	.word	0x0800b5ed
 800b4e8:	0800b649 	.word	0x0800b649
 800b4ec:	0800b649 	.word	0x0800b649
 800b4f0:	0800b5f5 	.word	0x0800b5f5
 800b4f4:	0800b649 	.word	0x0800b649
 800b4f8:	0800b649 	.word	0x0800b649
 800b4fc:	0800b649 	.word	0x0800b649
 800b500:	0800b605 	.word	0x0800b605
 800b504:	0800b649 	.word	0x0800b649
 800b508:	0800b649 	.word	0x0800b649
 800b50c:	0800b649 	.word	0x0800b649
 800b510:	0800b649 	.word	0x0800b649
 800b514:	0800b649 	.word	0x0800b649
 800b518:	0800b649 	.word	0x0800b649
 800b51c:	0800b649 	.word	0x0800b649
 800b520:	0800b615 	.word	0x0800b615
 800b524:	0800b649 	.word	0x0800b649
 800b528:	0800b649 	.word	0x0800b649
 800b52c:	0800b649 	.word	0x0800b649
 800b530:	0800b649 	.word	0x0800b649
 800b534:	0800b649 	.word	0x0800b649
 800b538:	0800b649 	.word	0x0800b649
 800b53c:	0800b649 	.word	0x0800b649
 800b540:	0800b649 	.word	0x0800b649
 800b544:	0800b649 	.word	0x0800b649
 800b548:	0800b649 	.word	0x0800b649
 800b54c:	0800b649 	.word	0x0800b649
 800b550:	0800b649 	.word	0x0800b649
 800b554:	0800b649 	.word	0x0800b649
 800b558:	0800b649 	.word	0x0800b649
 800b55c:	0800b649 	.word	0x0800b649
 800b560:	0800b63b 	.word	0x0800b63b
 800b564:	0800b649 	.word	0x0800b649
 800b568:	0800b649 	.word	0x0800b649
 800b56c:	0800b649 	.word	0x0800b649
 800b570:	0800b649 	.word	0x0800b649
 800b574:	0800b649 	.word	0x0800b649
 800b578:	0800b649 	.word	0x0800b649
 800b57c:	0800b649 	.word	0x0800b649
 800b580:	0800b649 	.word	0x0800b649
 800b584:	0800b649 	.word	0x0800b649
 800b588:	0800b649 	.word	0x0800b649
 800b58c:	0800b649 	.word	0x0800b649
 800b590:	0800b649 	.word	0x0800b649
 800b594:	0800b649 	.word	0x0800b649
 800b598:	0800b649 	.word	0x0800b649
 800b59c:	0800b649 	.word	0x0800b649
 800b5a0:	0800b649 	.word	0x0800b649
 800b5a4:	0800b649 	.word	0x0800b649
 800b5a8:	0800b649 	.word	0x0800b649
 800b5ac:	0800b649 	.word	0x0800b649
 800b5b0:	0800b649 	.word	0x0800b649
 800b5b4:	0800b649 	.word	0x0800b649
 800b5b8:	0800b649 	.word	0x0800b649
 800b5bc:	0800b649 	.word	0x0800b649
 800b5c0:	0800b649 	.word	0x0800b649
 800b5c4:	0800b649 	.word	0x0800b649
 800b5c8:	0800b649 	.word	0x0800b649
 800b5cc:	0800b649 	.word	0x0800b649
 800b5d0:	0800b649 	.word	0x0800b649
 800b5d4:	0800b649 	.word	0x0800b649
 800b5d8:	0800b649 	.word	0x0800b649
 800b5dc:	0800b649 	.word	0x0800b649
 800b5e0:	0800b641 	.word	0x0800b641
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5e4:	f7fd f8ee 	bl	80087c4 <HAL_RCC_GetPCLK1Freq>
 800b5e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b5ea:	e033      	b.n	800b654 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5ec:	f7fd f900 	bl	80087f0 <HAL_RCC_GetPCLK2Freq>
 800b5f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b5f2:	e02f      	b.n	800b654 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe fa8b 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b602:	e027      	b.n	800b654 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b604:	f107 0308 	add.w	r3, r7, #8
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fe fbcf 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b612:	e01f      	b.n	800b654 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b614:	4b2b      	ldr	r3, [pc, #172]	; (800b6c4 <UART_SetConfig+0x94c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 0320 	and.w	r3, r3, #32
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d009      	beq.n	800b634 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b620:	4b28      	ldr	r3, [pc, #160]	; (800b6c4 <UART_SetConfig+0x94c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	08db      	lsrs	r3, r3, #3
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	4a27      	ldr	r2, [pc, #156]	; (800b6c8 <UART_SetConfig+0x950>)
 800b62c:	fa22 f303 	lsr.w	r3, r2, r3
 800b630:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b632:	e00f      	b.n	800b654 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b634:	4b24      	ldr	r3, [pc, #144]	; (800b6c8 <UART_SetConfig+0x950>)
 800b636:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b638:	e00c      	b.n	800b654 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b63a:	4b24      	ldr	r3, [pc, #144]	; (800b6cc <UART_SetConfig+0x954>)
 800b63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b63e:	e009      	b.n	800b654 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b644:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b646:	e005      	b.n	800b654 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b648:	2300      	movs	r3, #0
 800b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b656:	2b00      	cmp	r3, #0
 800b658:	f000 8121 	beq.w	800b89e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	4a17      	ldr	r2, [pc, #92]	; (800b6c0 <UART_SetConfig+0x948>)
 800b662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b666:	461a      	mov	r2, r3
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b66e:	005a      	lsls	r2, r3, #1
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	085b      	lsrs	r3, r3, #1
 800b676:	441a      	add	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b680:	b29b      	uxth	r3, r3
 800b682:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b686:	2b0f      	cmp	r3, #15
 800b688:	d916      	bls.n	800b6b8 <UART_SetConfig+0x940>
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b690:	d212      	bcs.n	800b6b8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b694:	b29b      	uxth	r3, r3
 800b696:	f023 030f 	bic.w	r3, r3, #15
 800b69a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69e:	085b      	lsrs	r3, r3, #1
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b6b4:	60da      	str	r2, [r3, #12]
 800b6b6:	e0f2      	b.n	800b89e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6be:	e0ee      	b.n	800b89e <UART_SetConfig+0xb26>
 800b6c0:	0800fff8 	.word	0x0800fff8
 800b6c4:	58024400 	.word	0x58024400
 800b6c8:	03d09000 	.word	0x03d09000
 800b6cc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6d4:	2b40      	cmp	r3, #64	; 0x40
 800b6d6:	f200 80b7 	bhi.w	800b848 <UART_SetConfig+0xad0>
 800b6da:	a201      	add	r2, pc, #4	; (adr r2, 800b6e0 <UART_SetConfig+0x968>)
 800b6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e0:	0800b7e5 	.word	0x0800b7e5
 800b6e4:	0800b7ed 	.word	0x0800b7ed
 800b6e8:	0800b849 	.word	0x0800b849
 800b6ec:	0800b849 	.word	0x0800b849
 800b6f0:	0800b7f5 	.word	0x0800b7f5
 800b6f4:	0800b849 	.word	0x0800b849
 800b6f8:	0800b849 	.word	0x0800b849
 800b6fc:	0800b849 	.word	0x0800b849
 800b700:	0800b805 	.word	0x0800b805
 800b704:	0800b849 	.word	0x0800b849
 800b708:	0800b849 	.word	0x0800b849
 800b70c:	0800b849 	.word	0x0800b849
 800b710:	0800b849 	.word	0x0800b849
 800b714:	0800b849 	.word	0x0800b849
 800b718:	0800b849 	.word	0x0800b849
 800b71c:	0800b849 	.word	0x0800b849
 800b720:	0800b815 	.word	0x0800b815
 800b724:	0800b849 	.word	0x0800b849
 800b728:	0800b849 	.word	0x0800b849
 800b72c:	0800b849 	.word	0x0800b849
 800b730:	0800b849 	.word	0x0800b849
 800b734:	0800b849 	.word	0x0800b849
 800b738:	0800b849 	.word	0x0800b849
 800b73c:	0800b849 	.word	0x0800b849
 800b740:	0800b849 	.word	0x0800b849
 800b744:	0800b849 	.word	0x0800b849
 800b748:	0800b849 	.word	0x0800b849
 800b74c:	0800b849 	.word	0x0800b849
 800b750:	0800b849 	.word	0x0800b849
 800b754:	0800b849 	.word	0x0800b849
 800b758:	0800b849 	.word	0x0800b849
 800b75c:	0800b849 	.word	0x0800b849
 800b760:	0800b83b 	.word	0x0800b83b
 800b764:	0800b849 	.word	0x0800b849
 800b768:	0800b849 	.word	0x0800b849
 800b76c:	0800b849 	.word	0x0800b849
 800b770:	0800b849 	.word	0x0800b849
 800b774:	0800b849 	.word	0x0800b849
 800b778:	0800b849 	.word	0x0800b849
 800b77c:	0800b849 	.word	0x0800b849
 800b780:	0800b849 	.word	0x0800b849
 800b784:	0800b849 	.word	0x0800b849
 800b788:	0800b849 	.word	0x0800b849
 800b78c:	0800b849 	.word	0x0800b849
 800b790:	0800b849 	.word	0x0800b849
 800b794:	0800b849 	.word	0x0800b849
 800b798:	0800b849 	.word	0x0800b849
 800b79c:	0800b849 	.word	0x0800b849
 800b7a0:	0800b849 	.word	0x0800b849
 800b7a4:	0800b849 	.word	0x0800b849
 800b7a8:	0800b849 	.word	0x0800b849
 800b7ac:	0800b849 	.word	0x0800b849
 800b7b0:	0800b849 	.word	0x0800b849
 800b7b4:	0800b849 	.word	0x0800b849
 800b7b8:	0800b849 	.word	0x0800b849
 800b7bc:	0800b849 	.word	0x0800b849
 800b7c0:	0800b849 	.word	0x0800b849
 800b7c4:	0800b849 	.word	0x0800b849
 800b7c8:	0800b849 	.word	0x0800b849
 800b7cc:	0800b849 	.word	0x0800b849
 800b7d0:	0800b849 	.word	0x0800b849
 800b7d4:	0800b849 	.word	0x0800b849
 800b7d8:	0800b849 	.word	0x0800b849
 800b7dc:	0800b849 	.word	0x0800b849
 800b7e0:	0800b841 	.word	0x0800b841
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7e4:	f7fc ffee 	bl	80087c4 <HAL_RCC_GetPCLK1Freq>
 800b7e8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7ea:	e033      	b.n	800b854 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7ec:	f7fd f800 	bl	80087f0 <HAL_RCC_GetPCLK2Freq>
 800b7f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7f2:	e02f      	b.n	800b854 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7f4:	f107 0314 	add.w	r3, r7, #20
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fe f98b 	bl	8009b14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b802:	e027      	b.n	800b854 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b804:	f107 0308 	add.w	r3, r7, #8
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe facf 	bl	8009dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b812:	e01f      	b.n	800b854 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b814:	4b2c      	ldr	r3, [pc, #176]	; (800b8c8 <UART_SetConfig+0xb50>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0320 	and.w	r3, r3, #32
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b820:	4b29      	ldr	r3, [pc, #164]	; (800b8c8 <UART_SetConfig+0xb50>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	08db      	lsrs	r3, r3, #3
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	4a28      	ldr	r2, [pc, #160]	; (800b8cc <UART_SetConfig+0xb54>)
 800b82c:	fa22 f303 	lsr.w	r3, r2, r3
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b832:	e00f      	b.n	800b854 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800b834:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <UART_SetConfig+0xb54>)
 800b836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b838:	e00c      	b.n	800b854 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b83a:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <UART_SetConfig+0xb58>)
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b83e:	e009      	b.n	800b854 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b844:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b846:	e005      	b.n	800b854 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b852:	bf00      	nop
    }

    if (pclk != 0U)
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d021      	beq.n	800b89e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <UART_SetConfig+0xb5c>)
 800b860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b864:	461a      	mov	r2, r3
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	fbb3 f2f2 	udiv	r2, r3, r2
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	085b      	lsrs	r3, r3, #1
 800b872:	441a      	add	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	2b0f      	cmp	r3, #15
 800b884:	d908      	bls.n	800b898 <UART_SetConfig+0xb20>
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d204      	bcs.n	800b898 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	e002      	b.n	800b89e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b8ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3738      	adds	r7, #56	; 0x38
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	03d09000 	.word	0x03d09000
 800b8d0:	003d0900 	.word	0x003d0900
 800b8d4:	0800fff8 	.word	0x0800fff8

0800b8d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00a      	beq.n	800b902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b906:	f003 0302 	and.w	r3, r3, #2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	430a      	orrs	r2, r1
 800b922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	430a      	orrs	r2, r1
 800b944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94a:	f003 0308 	and.w	r3, r3, #8
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	430a      	orrs	r2, r1
 800b966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96c:	f003 0310 	and.w	r3, r3, #16
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98e:	f003 0320 	and.w	r3, r3, #32
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01a      	beq.n	800b9ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9d6:	d10a      	bne.n	800b9ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	430a      	orrs	r2, r1
 800b9ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	605a      	str	r2, [r3, #4]
  }
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ba2c:	f7f5 fec2 	bl	80017b4 <HAL_GetTick>
 800ba30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0308 	and.w	r3, r3, #8
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d10e      	bne.n	800ba5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f82c 	bl	800baac <UART_WaitOnFlagUntilTimeout>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e022      	b.n	800baa4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d10e      	bne.n	800ba8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f816 	bl	800baac <UART_WaitOnFlagUntilTimeout>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e00c      	b.n	800baa4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	603b      	str	r3, [r7, #0]
 800bab8:	4613      	mov	r3, r2
 800baba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800babc:	e062      	b.n	800bb84 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac4:	d05e      	beq.n	800bb84 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bac6:	f7f5 fe75 	bl	80017b4 <HAL_GetTick>
 800baca:	4602      	mov	r2, r0
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	69ba      	ldr	r2, [r7, #24]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d302      	bcc.n	800badc <UART_WaitOnFlagUntilTimeout+0x30>
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d11d      	bne.n	800bb18 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800baea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	689a      	ldr	r2, [r3, #8]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f022 0201 	bic.w	r2, r2, #1
 800bafa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2220      	movs	r2, #32
 800bb00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2220      	movs	r2, #32
 800bb08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bb14:	2303      	movs	r3, #3
 800bb16:	e045      	b.n	800bba4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d02e      	beq.n	800bb84 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	69db      	ldr	r3, [r3, #28]
 800bb2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb34:	d126      	bne.n	800bb84 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb4e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689a      	ldr	r2, [r3, #8]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f022 0201 	bic.w	r2, r2, #1
 800bb5e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2220      	movs	r2, #32
 800bb64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e00f      	b.n	800bba4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	69da      	ldr	r2, [r3, #28]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	bf0c      	ite	eq
 800bb94:	2301      	moveq	r3, #1
 800bb96:	2300      	movne	r3, #0
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	79fb      	ldrb	r3, [r7, #7]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d08d      	beq.n	800babe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d101      	bne.n	800bbc2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bbbe:	2302      	movs	r3, #2
 800bbc0:	e027      	b.n	800bc12 <HAL_UARTEx_DisableFifoMode+0x66>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2224      	movs	r2, #36	; 0x24
 800bbce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f022 0201 	bic.w	r2, r2, #1
 800bbe8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bbf0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3714      	adds	r7, #20
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b084      	sub	sp, #16
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d101      	bne.n	800bc36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc32:	2302      	movs	r3, #2
 800bc34:	e02d      	b.n	800bc92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2224      	movs	r2, #36	; 0x24
 800bc42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 0201 	bic.w	r2, r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	430a      	orrs	r2, r1
 800bc70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f850 	bl	800bd18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2220      	movs	r2, #32
 800bc84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d101      	bne.n	800bcb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcae:	2302      	movs	r3, #2
 800bcb0:	e02d      	b.n	800bd0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2224      	movs	r2, #36	; 0x24
 800bcbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f022 0201 	bic.w	r2, r2, #1
 800bcd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	430a      	orrs	r2, r1
 800bcec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f812 	bl	800bd18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2220      	movs	r2, #32
 800bd00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
	...

0800bd18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b089      	sub	sp, #36	; 0x24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bd20:	4a2f      	ldr	r2, [pc, #188]	; (800bde0 <UARTEx_SetNbDataToProcess+0xc8>)
 800bd22:	f107 0314 	add.w	r3, r7, #20
 800bd26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd2a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bd2e:	4a2d      	ldr	r2, [pc, #180]	; (800bde4 <UARTEx_SetNbDataToProcess+0xcc>)
 800bd30:	f107 030c 	add.w	r3, r7, #12
 800bd34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd38:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d108      	bne.n	800bd56 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd54:	e03d      	b.n	800bdd2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd56:	2310      	movs	r3, #16
 800bd58:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd5a:	2310      	movs	r3, #16
 800bd5c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	0e5b      	lsrs	r3, r3, #25
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	f003 0307 	and.w	r3, r3, #7
 800bd6c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	0f5b      	lsrs	r3, r3, #29
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	f003 0307 	and.w	r3, r3, #7
 800bd7c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bd7e:	7fbb      	ldrb	r3, [r7, #30]
 800bd80:	7f3a      	ldrb	r2, [r7, #28]
 800bd82:	f107 0120 	add.w	r1, r7, #32
 800bd86:	440a      	add	r2, r1
 800bd88:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bd8c:	fb02 f303 	mul.w	r3, r2, r3
 800bd90:	7f3a      	ldrb	r2, [r7, #28]
 800bd92:	f107 0120 	add.w	r1, r7, #32
 800bd96:	440a      	add	r2, r1
 800bd98:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bd9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800bda8:	7ffb      	ldrb	r3, [r7, #31]
 800bdaa:	7f7a      	ldrb	r2, [r7, #29]
 800bdac:	f107 0120 	add.w	r1, r7, #32
 800bdb0:	440a      	add	r2, r1
 800bdb2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800bdb6:	fb02 f303 	mul.w	r3, r2, r3
 800bdba:	7f7a      	ldrb	r2, [r7, #29]
 800bdbc:	f107 0120 	add.w	r1, r7, #32
 800bdc0:	440a      	add	r2, r1
 800bdc2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800bdc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bdd2:	bf00      	nop
 800bdd4:	3724      	adds	r7, #36	; 0x24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	0800ff88 	.word	0x0800ff88
 800bde4:	0800ff90 	.word	0x0800ff90

0800bde8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bde8:	b084      	sub	sp, #16
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b084      	sub	sp, #16
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	f107 001c 	add.w	r0, r7, #28
 800bdf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d120      	bne.n	800be42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68da      	ldr	r2, [r3, #12]
 800be10:	4b25      	ldr	r3, [pc, #148]	; (800bea8 <USB_CoreInit+0xc0>)
 800be12:	4013      	ands	r3, r2
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800be24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be26:	2b01      	cmp	r3, #1
 800be28:	d105      	bne.n	800be36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f001 fabe 	bl	800d3b8 <USB_CoreReset>
 800be3c:	4603      	mov	r3, r0
 800be3e:	73fb      	strb	r3, [r7, #15]
 800be40:	e01a      	b.n	800be78 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 fab2 	bl	800d3b8 <USB_CoreReset>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	639a      	str	r2, [r3, #56]	; 0x38
 800be6a:	e005      	b.n	800be78 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d10b      	bne.n	800be96 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	f043 0206 	orr.w	r2, r3, #6
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f043 0220 	orr.w	r2, r3, #32
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be96:	7bfb      	ldrb	r3, [r7, #15]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bea2:	b004      	add	sp, #16
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	ffbdffbf 	.word	0xffbdffbf

0800beac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	4613      	mov	r3, r2
 800beb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800beba:	79fb      	ldrb	r3, [r7, #7]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d165      	bne.n	800bf8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	4a41      	ldr	r2, [pc, #260]	; (800bfc8 <USB_SetTurnaroundTime+0x11c>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d906      	bls.n	800bed6 <USB_SetTurnaroundTime+0x2a>
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	4a40      	ldr	r2, [pc, #256]	; (800bfcc <USB_SetTurnaroundTime+0x120>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d802      	bhi.n	800bed6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bed0:	230f      	movs	r3, #15
 800bed2:	617b      	str	r3, [r7, #20]
 800bed4:	e062      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	4a3c      	ldr	r2, [pc, #240]	; (800bfcc <USB_SetTurnaroundTime+0x120>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d906      	bls.n	800beec <USB_SetTurnaroundTime+0x40>
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	4a3b      	ldr	r2, [pc, #236]	; (800bfd0 <USB_SetTurnaroundTime+0x124>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d802      	bhi.n	800beec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bee6:	230e      	movs	r3, #14
 800bee8:	617b      	str	r3, [r7, #20]
 800beea:	e057      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	4a38      	ldr	r2, [pc, #224]	; (800bfd0 <USB_SetTurnaroundTime+0x124>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d906      	bls.n	800bf02 <USB_SetTurnaroundTime+0x56>
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	4a37      	ldr	r2, [pc, #220]	; (800bfd4 <USB_SetTurnaroundTime+0x128>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d802      	bhi.n	800bf02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800befc:	230d      	movs	r3, #13
 800befe:	617b      	str	r3, [r7, #20]
 800bf00:	e04c      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	4a33      	ldr	r2, [pc, #204]	; (800bfd4 <USB_SetTurnaroundTime+0x128>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d906      	bls.n	800bf18 <USB_SetTurnaroundTime+0x6c>
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	4a32      	ldr	r2, [pc, #200]	; (800bfd8 <USB_SetTurnaroundTime+0x12c>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d802      	bhi.n	800bf18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bf12:	230c      	movs	r3, #12
 800bf14:	617b      	str	r3, [r7, #20]
 800bf16:	e041      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4a2f      	ldr	r2, [pc, #188]	; (800bfd8 <USB_SetTurnaroundTime+0x12c>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d906      	bls.n	800bf2e <USB_SetTurnaroundTime+0x82>
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	4a2e      	ldr	r2, [pc, #184]	; (800bfdc <USB_SetTurnaroundTime+0x130>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d802      	bhi.n	800bf2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bf28:	230b      	movs	r3, #11
 800bf2a:	617b      	str	r3, [r7, #20]
 800bf2c:	e036      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	4a2a      	ldr	r2, [pc, #168]	; (800bfdc <USB_SetTurnaroundTime+0x130>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d906      	bls.n	800bf44 <USB_SetTurnaroundTime+0x98>
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	4a29      	ldr	r2, [pc, #164]	; (800bfe0 <USB_SetTurnaroundTime+0x134>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d802      	bhi.n	800bf44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bf3e:	230a      	movs	r3, #10
 800bf40:	617b      	str	r3, [r7, #20]
 800bf42:	e02b      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	4a26      	ldr	r2, [pc, #152]	; (800bfe0 <USB_SetTurnaroundTime+0x134>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d906      	bls.n	800bf5a <USB_SetTurnaroundTime+0xae>
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	4a25      	ldr	r2, [pc, #148]	; (800bfe4 <USB_SetTurnaroundTime+0x138>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d802      	bhi.n	800bf5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bf54:	2309      	movs	r3, #9
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	e020      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	4a21      	ldr	r2, [pc, #132]	; (800bfe4 <USB_SetTurnaroundTime+0x138>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d906      	bls.n	800bf70 <USB_SetTurnaroundTime+0xc4>
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	4a20      	ldr	r2, [pc, #128]	; (800bfe8 <USB_SetTurnaroundTime+0x13c>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d802      	bhi.n	800bf70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bf6a:	2308      	movs	r3, #8
 800bf6c:	617b      	str	r3, [r7, #20]
 800bf6e:	e015      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	4a1d      	ldr	r2, [pc, #116]	; (800bfe8 <USB_SetTurnaroundTime+0x13c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d906      	bls.n	800bf86 <USB_SetTurnaroundTime+0xda>
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	4a1c      	ldr	r2, [pc, #112]	; (800bfec <USB_SetTurnaroundTime+0x140>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d802      	bhi.n	800bf86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bf80:	2307      	movs	r3, #7
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	e00a      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bf86:	2306      	movs	r3, #6
 800bf88:	617b      	str	r3, [r7, #20]
 800bf8a:	e007      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bf8c:	79fb      	ldrb	r3, [r7, #7]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d102      	bne.n	800bf98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bf92:	2309      	movs	r3, #9
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e001      	b.n	800bf9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bf98:	2309      	movs	r3, #9
 800bf9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	68da      	ldr	r2, [r3, #12]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	029b      	lsls	r3, r3, #10
 800bfb0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bfb4:	431a      	orrs	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	00d8acbf 	.word	0x00d8acbf
 800bfcc:	00e4e1bf 	.word	0x00e4e1bf
 800bfd0:	00f423ff 	.word	0x00f423ff
 800bfd4:	0106737f 	.word	0x0106737f
 800bfd8:	011a499f 	.word	0x011a499f
 800bfdc:	01312cff 	.word	0x01312cff
 800bfe0:	014ca43f 	.word	0x014ca43f
 800bfe4:	016e35ff 	.word	0x016e35ff
 800bfe8:	01a6ab1f 	.word	0x01a6ab1f
 800bfec:	01e847ff 	.word	0x01e847ff

0800bff0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f043 0201 	orr.w	r2, r3, #1
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c012:	b480      	push	{r7}
 800c014:	b083      	sub	sp, #12
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f023 0201 	bic.w	r2, r3, #1
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
 800c03c:	460b      	mov	r3, r1
 800c03e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c04c:	78fb      	ldrb	r3, [r7, #3]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d106      	bne.n	800c060 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	60da      	str	r2, [r3, #12]
 800c05e:	e00b      	b.n	800c078 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d106      	bne.n	800c074 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	60da      	str	r2, [r3, #12]
 800c072:	e001      	b.n	800c078 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e003      	b.n	800c080 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c078:	2032      	movs	r0, #50	; 0x32
 800c07a:	f7f5 fba7 	bl	80017cc <HAL_Delay>

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c088:	b084      	sub	sp, #16
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b086      	sub	sp, #24
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	613b      	str	r3, [r7, #16]
 800c0a6:	e009      	b.n	800c0bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	3340      	adds	r3, #64	; 0x40
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	613b      	str	r3, [r7, #16]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	2b0e      	cmp	r3, #14
 800c0c0:	d9f2      	bls.n	800c0a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d11c      	bne.n	800c102 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0d6:	f043 0302 	orr.w	r3, r3, #2
 800c0da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	601a      	str	r2, [r3, #0]
 800c100:	e005      	b.n	800c10e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c106:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c114:	461a      	mov	r2, r3
 800c116:	2300      	movs	r3, #0
 800c118:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c120:	4619      	mov	r1, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c128:	461a      	mov	r2, r3
 800c12a:	680b      	ldr	r3, [r1, #0]
 800c12c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	2b01      	cmp	r3, #1
 800c132:	d10c      	bne.n	800c14e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c136:	2b00      	cmp	r3, #0
 800c138:	d104      	bne.n	800c144 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c13a:	2100      	movs	r1, #0
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f949 	bl	800c3d4 <USB_SetDevSpeed>
 800c142:	e008      	b.n	800c156 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c144:	2101      	movs	r1, #1
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f944 	bl	800c3d4 <USB_SetDevSpeed>
 800c14c:	e003      	b.n	800c156 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c14e:	2103      	movs	r1, #3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f93f 	bl	800c3d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c156:	2110      	movs	r1, #16
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f8f3 	bl	800c344 <USB_FlushTxFifo>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d001      	beq.n	800c168 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c164:	2301      	movs	r3, #1
 800c166:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 f911 	bl	800c390 <USB_FlushRxFifo>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c17e:	461a      	mov	r2, r3
 800c180:	2300      	movs	r3, #0
 800c182:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18a:	461a      	mov	r2, r3
 800c18c:	2300      	movs	r3, #0
 800c18e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c196:	461a      	mov	r2, r3
 800c198:	2300      	movs	r3, #0
 800c19a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c19c:	2300      	movs	r3, #0
 800c19e:	613b      	str	r3, [r7, #16]
 800c1a0:	e043      	b.n	800c22a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1b8:	d118      	bne.n	800c1ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10a      	bne.n	800c1d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	e013      	b.n	800c1fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	e008      	b.n	800c1fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20a:	461a      	mov	r2, r3
 800c20c:	2300      	movs	r3, #0
 800c20e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c21c:	461a      	mov	r2, r3
 800c21e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c222:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	3301      	adds	r3, #1
 800c228:	613b      	str	r3, [r7, #16]
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d3b7      	bcc.n	800c1a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c232:	2300      	movs	r3, #0
 800c234:	613b      	str	r3, [r7, #16]
 800c236:	e043      	b.n	800c2c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c24a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c24e:	d118      	bne.n	800c282 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10a      	bne.n	800c26c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c262:	461a      	mov	r2, r3
 800c264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c268:	6013      	str	r3, [r2, #0]
 800c26a:	e013      	b.n	800c294 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	015a      	lsls	r2, r3, #5
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	4413      	add	r3, r2
 800c274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c278:	461a      	mov	r2, r3
 800c27a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	e008      	b.n	800c294 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	015a      	lsls	r2, r3, #5
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4413      	add	r3, r2
 800c28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c28e:	461a      	mov	r2, r3
 800c290:	2300      	movs	r3, #0
 800c292:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d3b7      	bcc.n	800c238 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c2d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c2e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d105      	bne.n	800c2fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	f043 0210 	orr.w	r2, r3, #16
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	699a      	ldr	r2, [r3, #24]
 800c300:	4b0e      	ldr	r3, [pc, #56]	; (800c33c <USB_DevInit+0x2b4>)
 800c302:	4313      	orrs	r3, r2
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d005      	beq.n	800c31a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	699b      	ldr	r3, [r3, #24]
 800c312:	f043 0208 	orr.w	r2, r3, #8
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c31a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d105      	bne.n	800c32c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	699a      	ldr	r2, [r3, #24]
 800c324:	4b06      	ldr	r3, [pc, #24]	; (800c340 <USB_DevInit+0x2b8>)
 800c326:	4313      	orrs	r3, r2
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c338:	b004      	add	sp, #16
 800c33a:	4770      	bx	lr
 800c33c:	803c3800 	.word	0x803c3800
 800c340:	40000004 	.word	0x40000004

0800c344 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	019b      	lsls	r3, r3, #6
 800c356:	f043 0220 	orr.w	r2, r3, #32
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4a09      	ldr	r2, [pc, #36]	; (800c38c <USB_FlushTxFifo+0x48>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d901      	bls.n	800c370 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e006      	b.n	800c37e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	f003 0320 	and.w	r3, r3, #32
 800c378:	2b20      	cmp	r3, #32
 800c37a:	d0f0      	beq.n	800c35e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	00030d40 	.word	0x00030d40

0800c390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c398:	2300      	movs	r3, #0
 800c39a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2210      	movs	r2, #16
 800c3a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	60fb      	str	r3, [r7, #12]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4a09      	ldr	r2, [pc, #36]	; (800c3d0 <USB_FlushRxFifo+0x40>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d901      	bls.n	800c3b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e006      	b.n	800c3c2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	f003 0310 	and.w	r3, r3, #16
 800c3bc:	2b10      	cmp	r3, #16
 800c3be:	d0f0      	beq.n	800c3a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	00030d40 	.word	0x00030d40

0800c3d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	68f9      	ldr	r1, [r7, #12]
 800c3f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c406:	b480      	push	{r7}
 800c408:	b087      	sub	sp, #28
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c418:	689b      	ldr	r3, [r3, #8]
 800c41a:	f003 0306 	and.w	r3, r3, #6
 800c41e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d102      	bne.n	800c42c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c426:	2300      	movs	r3, #0
 800c428:	75fb      	strb	r3, [r7, #23]
 800c42a:	e00a      	b.n	800c442 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d002      	beq.n	800c438 <USB_GetDevSpeed+0x32>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b06      	cmp	r3, #6
 800c436:	d102      	bne.n	800c43e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c438:	2302      	movs	r3, #2
 800c43a:	75fb      	strb	r3, [r7, #23]
 800c43c:	e001      	b.n	800c442 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c43e:	230f      	movs	r3, #15
 800c440:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c442:	7dfb      	ldrb	r3, [r7, #23]
}
 800c444:	4618      	mov	r0, r3
 800c446:	371c      	adds	r7, #28
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	785b      	ldrb	r3, [r3, #1]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d139      	bne.n	800c4e0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c472:	69da      	ldr	r2, [r3, #28]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	f003 030f 	and.w	r3, r3, #15
 800c47c:	2101      	movs	r1, #1
 800c47e:	fa01 f303 	lsl.w	r3, r1, r3
 800c482:	b29b      	uxth	r3, r3
 800c484:	68f9      	ldr	r1, [r7, #12]
 800c486:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c48a:	4313      	orrs	r3, r2
 800c48c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	015a      	lsls	r2, r3, #5
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	4413      	add	r3, r2
 800c496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d153      	bne.n	800c54c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	78db      	ldrb	r3, [r3, #3]
 800c4be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	059b      	lsls	r3, r3, #22
 800c4c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c4c8:	431a      	orrs	r2, r3
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	0159      	lsls	r1, r3, #5
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	440b      	add	r3, r1
 800c4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4b20      	ldr	r3, [pc, #128]	; (800c55c <USB_ActivateEndpoint+0x10c>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	600b      	str	r3, [r1, #0]
 800c4de:	e035      	b.n	800c54c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4e6:	69da      	ldr	r2, [r3, #28]
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	f003 030f 	and.w	r3, r3, #15
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f6:	041b      	lsls	r3, r3, #16
 800c4f8:	68f9      	ldr	r1, [r7, #12]
 800c4fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4fe:	4313      	orrs	r3, r2
 800c500:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	015a      	lsls	r2, r3, #5
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	4413      	add	r3, r2
 800c50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d119      	bne.n	800c54c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	78db      	ldrb	r3, [r3, #3]
 800c532:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c534:	430b      	orrs	r3, r1
 800c536:	431a      	orrs	r2, r3
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	0159      	lsls	r1, r3, #5
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	440b      	add	r3, r1
 800c540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c544:	4619      	mov	r1, r3
 800c546:	4b05      	ldr	r3, [pc, #20]	; (800c55c <USB_ActivateEndpoint+0x10c>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3714      	adds	r7, #20
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	10008000 	.word	0x10008000

0800c560 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	785b      	ldrb	r3, [r3, #1]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d161      	bne.n	800c640 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c58e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c592:	d11f      	bne.n	800c5d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	015a      	lsls	r2, r3, #5
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	4413      	add	r3, r2
 800c59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	0151      	lsls	r1, r2, #5
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	440a      	add	r2, r1
 800c5aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	0151      	lsls	r1, r2, #5
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	440a      	add	r2, r1
 800c5ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	f003 030f 	and.w	r3, r3, #15
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	43db      	mvns	r3, r3
 800c5ee:	68f9      	ldr	r1, [r7, #12]
 800c5f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5fe:	69da      	ldr	r2, [r3, #28]
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	f003 030f 	and.w	r3, r3, #15
 800c608:	2101      	movs	r1, #1
 800c60a:	fa01 f303 	lsl.w	r3, r1, r3
 800c60e:	b29b      	uxth	r3, r3
 800c610:	43db      	mvns	r3, r3
 800c612:	68f9      	ldr	r1, [r7, #12]
 800c614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c618:	4013      	ands	r3, r2
 800c61a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	0159      	lsls	r1, r3, #5
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	440b      	add	r3, r1
 800c632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c636:	4619      	mov	r1, r3
 800c638:	4b35      	ldr	r3, [pc, #212]	; (800c710 <USB_DeactivateEndpoint+0x1b0>)
 800c63a:	4013      	ands	r3, r2
 800c63c:	600b      	str	r3, [r1, #0]
 800c63e:	e060      	b.n	800c702 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	015a      	lsls	r2, r3, #5
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	4413      	add	r3, r2
 800c648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c656:	d11f      	bne.n	800c698 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	0151      	lsls	r1, r2, #5
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	440a      	add	r2, r1
 800c66e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c672:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c676:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	015a      	lsls	r2, r3, #5
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4413      	add	r3, r2
 800c680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	0151      	lsls	r1, r2, #5
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	440a      	add	r2, r1
 800c68e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c692:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c696:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c69e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	f003 030f 	and.w	r3, r3, #15
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ae:	041b      	lsls	r3, r3, #16
 800c6b0:	43db      	mvns	r3, r3
 800c6b2:	68f9      	ldr	r1, [r7, #12]
 800c6b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6c2:	69da      	ldr	r2, [r3, #28]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	f003 030f 	and.w	r3, r3, #15
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d2:	041b      	lsls	r3, r3, #16
 800c6d4:	43db      	mvns	r3, r3
 800c6d6:	68f9      	ldr	r1, [r7, #12]
 800c6d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6dc:	4013      	ands	r3, r2
 800c6de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	0159      	lsls	r1, r3, #5
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	440b      	add	r3, r1
 800c6f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4b05      	ldr	r3, [pc, #20]	; (800c714 <USB_DeactivateEndpoint+0x1b4>)
 800c6fe:	4013      	ands	r3, r2
 800c700:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c702:	2300      	movs	r3, #0
}
 800c704:	4618      	mov	r0, r3
 800c706:	3714      	adds	r7, #20
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr
 800c710:	ec337800 	.word	0xec337800
 800c714:	eff37800 	.word	0xeff37800

0800c718 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08a      	sub	sp, #40	; 0x28
 800c71c:	af02      	add	r7, sp, #8
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	785b      	ldrb	r3, [r3, #1]
 800c734:	2b01      	cmp	r3, #1
 800c736:	f040 8163 	bne.w	800ca00 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	695b      	ldr	r3, [r3, #20]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d132      	bne.n	800c7a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	015a      	lsls	r2, r3, #5
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	4413      	add	r3, r2
 800c74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c74e:	691a      	ldr	r2, [r3, #16]
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	0159      	lsls	r1, r3, #5
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	440b      	add	r3, r1
 800c758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75c:	4619      	mov	r1, r3
 800c75e:	4ba5      	ldr	r3, [pc, #660]	; (800c9f4 <USB_EPStartXfer+0x2dc>)
 800c760:	4013      	ands	r3, r2
 800c762:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	015a      	lsls	r2, r3, #5
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	4413      	add	r3, r2
 800c76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	69ba      	ldr	r2, [r7, #24]
 800c774:	0151      	lsls	r1, r2, #5
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	440a      	add	r2, r1
 800c77a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c77e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	015a      	lsls	r2, r3, #5
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	4413      	add	r3, r2
 800c78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c790:	691a      	ldr	r2, [r3, #16]
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	0159      	lsls	r1, r3, #5
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	440b      	add	r3, r1
 800c79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4b95      	ldr	r3, [pc, #596]	; (800c9f8 <USB_EPStartXfer+0x2e0>)
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	610b      	str	r3, [r1, #16]
 800c7a6:	e074      	b.n	800c892 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	015a      	lsls	r2, r3, #5
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b4:	691a      	ldr	r2, [r3, #16]
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	0159      	lsls	r1, r3, #5
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	440b      	add	r3, r1
 800c7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4b8c      	ldr	r3, [pc, #560]	; (800c9f8 <USB_EPStartXfer+0x2e0>)
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	015a      	lsls	r2, r3, #5
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d6:	691a      	ldr	r2, [r3, #16]
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	0159      	lsls	r1, r3, #5
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	440b      	add	r3, r1
 800c7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4b83      	ldr	r3, [pc, #524]	; (800c9f4 <USB_EPStartXfer+0x2dc>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	015a      	lsls	r2, r3, #5
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f8:	691a      	ldr	r2, [r3, #16]
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	6959      	ldr	r1, [r3, #20]
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	440b      	add	r3, r1
 800c804:	1e59      	subs	r1, r3, #1
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c80e:	04d9      	lsls	r1, r3, #19
 800c810:	4b7a      	ldr	r3, [pc, #488]	; (800c9fc <USB_EPStartXfer+0x2e4>)
 800c812:	400b      	ands	r3, r1
 800c814:	69b9      	ldr	r1, [r7, #24]
 800c816:	0148      	lsls	r0, r1, #5
 800c818:	69f9      	ldr	r1, [r7, #28]
 800c81a:	4401      	add	r1, r0
 800c81c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c820:	4313      	orrs	r3, r2
 800c822:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	015a      	lsls	r2, r3, #5
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	4413      	add	r3, r2
 800c82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c830:	691a      	ldr	r2, [r3, #16]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c83a:	69b9      	ldr	r1, [r7, #24]
 800c83c:	0148      	lsls	r0, r1, #5
 800c83e:	69f9      	ldr	r1, [r7, #28]
 800c840:	4401      	add	r1, r0
 800c842:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c846:	4313      	orrs	r3, r2
 800c848:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	78db      	ldrb	r3, [r3, #3]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d11f      	bne.n	800c892 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	69ba      	ldr	r2, [r7, #24]
 800c862:	0151      	lsls	r1, r2, #5
 800c864:	69fa      	ldr	r2, [r7, #28]
 800c866:	440a      	add	r2, r1
 800c868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c86c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c870:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	69ba      	ldr	r2, [r7, #24]
 800c882:	0151      	lsls	r1, r2, #5
 800c884:	69fa      	ldr	r2, [r7, #28]
 800c886:	440a      	add	r2, r1
 800c888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c88c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c890:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c892:	79fb      	ldrb	r3, [r7, #7]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d14b      	bne.n	800c930 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d009      	beq.n	800c8b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	015a      	lsls	r2, r3, #5
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	4413      	add	r3, r2
 800c8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	78db      	ldrb	r3, [r3, #3]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d128      	bne.n	800c90e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d110      	bne.n	800c8ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	015a      	lsls	r2, r3, #5
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	69ba      	ldr	r2, [r7, #24]
 800c8dc:	0151      	lsls	r1, r2, #5
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	440a      	add	r2, r1
 800c8e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	e00f      	b.n	800c90e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	015a      	lsls	r2, r3, #5
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	69ba      	ldr	r2, [r7, #24]
 800c8fe:	0151      	lsls	r1, r2, #5
 800c900:	69fa      	ldr	r2, [r7, #28]
 800c902:	440a      	add	r2, r1
 800c904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c90c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	015a      	lsls	r2, r3, #5
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	4413      	add	r3, r2
 800c916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	0151      	lsls	r1, r2, #5
 800c920:	69fa      	ldr	r2, [r7, #28]
 800c922:	440a      	add	r2, r1
 800c924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c928:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	e133      	b.n	800cb98 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	015a      	lsls	r2, r3, #5
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	4413      	add	r3, r2
 800c938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	69ba      	ldr	r2, [r7, #24]
 800c940:	0151      	lsls	r1, r2, #5
 800c942:	69fa      	ldr	r2, [r7, #28]
 800c944:	440a      	add	r2, r1
 800c946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c94a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c94e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	78db      	ldrb	r3, [r3, #3]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d015      	beq.n	800c984 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	695b      	ldr	r3, [r3, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 811b 	beq.w	800cb98 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	f003 030f 	and.w	r3, r3, #15
 800c972:	2101      	movs	r1, #1
 800c974:	fa01 f303 	lsl.w	r3, r1, r3
 800c978:	69f9      	ldr	r1, [r7, #28]
 800c97a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c97e:	4313      	orrs	r3, r2
 800c980:	634b      	str	r3, [r1, #52]	; 0x34
 800c982:	e109      	b.n	800cb98 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c990:	2b00      	cmp	r3, #0
 800c992:	d110      	bne.n	800c9b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	69ba      	ldr	r2, [r7, #24]
 800c9a4:	0151      	lsls	r1, r2, #5
 800c9a6:	69fa      	ldr	r2, [r7, #28]
 800c9a8:	440a      	add	r2, r1
 800c9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	e00f      	b.n	800c9d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	015a      	lsls	r2, r3, #5
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	4413      	add	r3, r2
 800c9be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	69ba      	ldr	r2, [r7, #24]
 800c9c6:	0151      	lsls	r1, r2, #5
 800c9c8:	69fa      	ldr	r2, [r7, #28]
 800c9ca:	440a      	add	r2, r1
 800c9cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	68d9      	ldr	r1, [r3, #12]
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	781a      	ldrb	r2, [r3, #0]
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	695b      	ldr	r3, [r3, #20]
 800c9e2:	b298      	uxth	r0, r3
 800c9e4:	79fb      	ldrb	r3, [r7, #7]
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f000 fa38 	bl	800ce60 <USB_WritePacket>
 800c9f0:	e0d2      	b.n	800cb98 <USB_EPStartXfer+0x480>
 800c9f2:	bf00      	nop
 800c9f4:	e007ffff 	.word	0xe007ffff
 800c9f8:	fff80000 	.word	0xfff80000
 800c9fc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	015a      	lsls	r2, r3, #5
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	4413      	add	r3, r2
 800ca08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca0c:	691a      	ldr	r2, [r3, #16]
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	0159      	lsls	r1, r3, #5
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	440b      	add	r3, r1
 800ca16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4b61      	ldr	r3, [pc, #388]	; (800cba4 <USB_EPStartXfer+0x48c>)
 800ca1e:	4013      	ands	r3, r2
 800ca20:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	015a      	lsls	r2, r3, #5
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca2e:	691a      	ldr	r2, [r3, #16]
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	0159      	lsls	r1, r3, #5
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	440b      	add	r3, r1
 800ca38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4b5a      	ldr	r3, [pc, #360]	; (800cba8 <USB_EPStartXfer+0x490>)
 800ca40:	4013      	ands	r3, r2
 800ca42:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	695b      	ldr	r3, [r3, #20]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d123      	bne.n	800ca94 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	015a      	lsls	r2, r3, #5
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	4413      	add	r3, r2
 800ca54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca58:	691a      	ldr	r2, [r3, #16]
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca62:	69b9      	ldr	r1, [r7, #24]
 800ca64:	0148      	lsls	r0, r1, #5
 800ca66:	69f9      	ldr	r1, [r7, #28]
 800ca68:	4401      	add	r1, r0
 800ca6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	015a      	lsls	r2, r3, #5
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	4413      	add	r3, r2
 800ca7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	69ba      	ldr	r2, [r7, #24]
 800ca82:	0151      	lsls	r1, r2, #5
 800ca84:	69fa      	ldr	r2, [r7, #28]
 800ca86:	440a      	add	r2, r1
 800ca88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ca90:	6113      	str	r3, [r2, #16]
 800ca92:	e033      	b.n	800cafc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	695a      	ldr	r2, [r3, #20]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	1e5a      	subs	r2, r3, #1
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	015a      	lsls	r2, r3, #5
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	4413      	add	r3, r2
 800cab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab6:	691a      	ldr	r2, [r3, #16]
 800cab8:	8afb      	ldrh	r3, [r7, #22]
 800caba:	04d9      	lsls	r1, r3, #19
 800cabc:	4b3b      	ldr	r3, [pc, #236]	; (800cbac <USB_EPStartXfer+0x494>)
 800cabe:	400b      	ands	r3, r1
 800cac0:	69b9      	ldr	r1, [r7, #24]
 800cac2:	0148      	lsls	r0, r1, #5
 800cac4:	69f9      	ldr	r1, [r7, #28]
 800cac6:	4401      	add	r1, r0
 800cac8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cacc:	4313      	orrs	r3, r2
 800cace:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	015a      	lsls	r2, r3, #5
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	4413      	add	r3, r2
 800cad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cadc:	691a      	ldr	r2, [r3, #16]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	8af9      	ldrh	r1, [r7, #22]
 800cae4:	fb01 f303 	mul.w	r3, r1, r3
 800cae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caec:	69b9      	ldr	r1, [r7, #24]
 800caee:	0148      	lsls	r0, r1, #5
 800caf0:	69f9      	ldr	r1, [r7, #28]
 800caf2:	4401      	add	r1, r0
 800caf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800caf8:	4313      	orrs	r3, r2
 800cafa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cafc:	79fb      	ldrb	r3, [r7, #7]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d10d      	bne.n	800cb1e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	68d9      	ldr	r1, [r3, #12]
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	015a      	lsls	r2, r3, #5
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	4413      	add	r3, r2
 800cb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb1a:	460a      	mov	r2, r1
 800cb1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	78db      	ldrb	r3, [r3, #3]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d128      	bne.n	800cb78 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d110      	bne.n	800cb58 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	015a      	lsls	r2, r3, #5
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	69ba      	ldr	r2, [r7, #24]
 800cb46:	0151      	lsls	r1, r2, #5
 800cb48:	69fa      	ldr	r2, [r7, #28]
 800cb4a:	440a      	add	r2, r1
 800cb4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	e00f      	b.n	800cb78 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	015a      	lsls	r2, r3, #5
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	4413      	add	r3, r2
 800cb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	69ba      	ldr	r2, [r7, #24]
 800cb68:	0151      	lsls	r1, r2, #5
 800cb6a:	69fa      	ldr	r2, [r7, #28]
 800cb6c:	440a      	add	r2, r1
 800cb6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	015a      	lsls	r2, r3, #5
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	4413      	add	r3, r2
 800cb80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	69ba      	ldr	r2, [r7, #24]
 800cb88:	0151      	lsls	r1, r2, #5
 800cb8a:	69fa      	ldr	r2, [r7, #28]
 800cb8c:	440a      	add	r2, r1
 800cb8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	fff80000 	.word	0xfff80000
 800cba8:	e007ffff 	.word	0xe007ffff
 800cbac:	1ff80000 	.word	0x1ff80000

0800cbb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	785b      	ldrb	r3, [r3, #1]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	f040 80cd 	bne.w	800cd6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	695b      	ldr	r3, [r3, #20]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d132      	bne.n	800cc40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe6:	691a      	ldr	r2, [r3, #16]
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	0159      	lsls	r1, r3, #5
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	440b      	add	r3, r1
 800cbf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	4b98      	ldr	r3, [pc, #608]	; (800ce58 <USB_EP0StartXfer+0x2a8>)
 800cbf8:	4013      	ands	r3, r2
 800cbfa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc08:	691b      	ldr	r3, [r3, #16]
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	0151      	lsls	r1, r2, #5
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	440a      	add	r2, r1
 800cc12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	015a      	lsls	r2, r3, #5
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	4413      	add	r3, r2
 800cc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc28:	691a      	ldr	r2, [r3, #16]
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	0159      	lsls	r1, r3, #5
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	440b      	add	r3, r1
 800cc32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc36:	4619      	mov	r1, r3
 800cc38:	4b88      	ldr	r3, [pc, #544]	; (800ce5c <USB_EP0StartXfer+0x2ac>)
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	610b      	str	r3, [r1, #16]
 800cc3e:	e04e      	b.n	800ccde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc4c:	691a      	ldr	r2, [r3, #16]
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	0159      	lsls	r1, r3, #5
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	440b      	add	r3, r1
 800cc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4b7f      	ldr	r3, [pc, #508]	; (800ce5c <USB_EP0StartXfer+0x2ac>)
 800cc5e:	4013      	ands	r3, r2
 800cc60:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	015a      	lsls	r2, r3, #5
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	4413      	add	r3, r2
 800cc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc6e:	691a      	ldr	r2, [r3, #16]
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	0159      	lsls	r1, r3, #5
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	440b      	add	r3, r1
 800cc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	4b76      	ldr	r3, [pc, #472]	; (800ce58 <USB_EP0StartXfer+0x2a8>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	695a      	ldr	r2, [r3, #20]
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d903      	bls.n	800cc98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	689a      	ldr	r2, [r3, #8]
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	0151      	lsls	r1, r2, #5
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	440a      	add	r2, r1
 800ccae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	015a      	lsls	r2, r3, #5
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc4:	691a      	ldr	r2, [r3, #16]
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	695b      	ldr	r3, [r3, #20]
 800ccca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ccce:	6939      	ldr	r1, [r7, #16]
 800ccd0:	0148      	lsls	r0, r1, #5
 800ccd2:	6979      	ldr	r1, [r7, #20]
 800ccd4:	4401      	add	r1, r0
 800ccd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ccde:	79fb      	ldrb	r3, [r7, #7]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d11e      	bne.n	800cd22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d009      	beq.n	800cd00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	0151      	lsls	r1, r2, #5
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	440a      	add	r2, r1
 800cd16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd1e:	6013      	str	r3, [r2, #0]
 800cd20:	e092      	b.n	800ce48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	015a      	lsls	r2, r3, #5
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	4413      	add	r3, r2
 800cd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	0151      	lsls	r1, r2, #5
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	440a      	add	r2, r1
 800cd38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	695b      	ldr	r3, [r3, #20]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d07e      	beq.n	800ce48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	f003 030f 	and.w	r3, r3, #15
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd60:	6979      	ldr	r1, [r7, #20]
 800cd62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd66:	4313      	orrs	r3, r2
 800cd68:	634b      	str	r3, [r1, #52]	; 0x34
 800cd6a:	e06d      	b.n	800ce48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	015a      	lsls	r2, r3, #5
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	4413      	add	r3, r2
 800cd74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd78:	691a      	ldr	r2, [r3, #16]
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	0159      	lsls	r1, r3, #5
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	440b      	add	r3, r1
 800cd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd86:	4619      	mov	r1, r3
 800cd88:	4b34      	ldr	r3, [pc, #208]	; (800ce5c <USB_EP0StartXfer+0x2ac>)
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	015a      	lsls	r2, r3, #5
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	4413      	add	r3, r2
 800cd96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd9a:	691a      	ldr	r2, [r3, #16]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	0159      	lsls	r1, r3, #5
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	440b      	add	r3, r1
 800cda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4b2b      	ldr	r3, [pc, #172]	; (800ce58 <USB_EP0StartXfer+0x2a8>)
 800cdac:	4013      	ands	r3, r2
 800cdae:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d003      	beq.n	800cdc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	689a      	ldr	r2, [r3, #8]
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	015a      	lsls	r2, r3, #5
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	0151      	lsls	r1, r2, #5
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	440a      	add	r2, r1
 800cdd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	015a      	lsls	r2, r3, #5
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	4413      	add	r3, r2
 800cde8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdec:	691a      	ldr	r2, [r3, #16]
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	689b      	ldr	r3, [r3, #8]
 800cdf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cdf6:	6939      	ldr	r1, [r7, #16]
 800cdf8:	0148      	lsls	r0, r1, #5
 800cdfa:	6979      	ldr	r1, [r7, #20]
 800cdfc:	4401      	add	r1, r0
 800cdfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce02:	4313      	orrs	r3, r2
 800ce04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d10d      	bne.n	800ce28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d009      	beq.n	800ce28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	68d9      	ldr	r1, [r3, #12]
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	015a      	lsls	r2, r3, #5
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce24:	460a      	mov	r2, r1
 800ce26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	015a      	lsls	r2, r3, #5
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	4413      	add	r3, r2
 800ce30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	0151      	lsls	r1, r2, #5
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	440a      	add	r2, r1
 800ce3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ce46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	e007ffff 	.word	0xe007ffff
 800ce5c:	fff80000 	.word	0xfff80000

0800ce60 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b089      	sub	sp, #36	; 0x24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	460b      	mov	r3, r1
 800ce70:	71fb      	strb	r3, [r7, #7]
 800ce72:	4613      	mov	r3, r2
 800ce74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ce7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d11a      	bne.n	800cebc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ce86:	88bb      	ldrh	r3, [r7, #4]
 800ce88:	3303      	adds	r3, #3
 800ce8a:	089b      	lsrs	r3, r3, #2
 800ce8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ce8e:	2300      	movs	r3, #0
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	e00f      	b.n	800ceb4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ce94:	79fb      	ldrb	r3, [r7, #7]
 800ce96:	031a      	lsls	r2, r3, #12
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cea0:	461a      	mov	r2, r3
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	3304      	adds	r3, #4
 800ceac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	61bb      	str	r3, [r7, #24]
 800ceb4:	69ba      	ldr	r2, [r7, #24]
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d3eb      	bcc.n	800ce94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3724      	adds	r7, #36	; 0x24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ceca:	b480      	push	{r7}
 800cecc:	b089      	sub	sp, #36	; 0x24
 800cece:	af00      	add	r7, sp, #0
 800ced0:	60f8      	str	r0, [r7, #12]
 800ced2:	60b9      	str	r1, [r7, #8]
 800ced4:	4613      	mov	r3, r2
 800ced6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	3303      	adds	r3, #3
 800cee4:	089b      	lsrs	r3, r3, #2
 800cee6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cee8:	2300      	movs	r3, #0
 800ceea:	61bb      	str	r3, [r7, #24]
 800ceec:	e00b      	b.n	800cf06 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	601a      	str	r2, [r3, #0]
    pDest++;
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	3304      	adds	r3, #4
 800cefe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	3301      	adds	r3, #1
 800cf04:	61bb      	str	r3, [r7, #24]
 800cf06:	69ba      	ldr	r2, [r7, #24]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d3ef      	bcc.n	800ceee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cf0e:	69fb      	ldr	r3, [r7, #28]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3724      	adds	r7, #36	; 0x24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	785b      	ldrb	r3, [r3, #1]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d12c      	bne.n	800cf92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	015a      	lsls	r2, r3, #5
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	4413      	add	r3, r2
 800cf40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	db12      	blt.n	800cf70 <USB_EPSetStall+0x54>
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00f      	beq.n	800cf70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	015a      	lsls	r2, r3, #5
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4413      	add	r3, r2
 800cf58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	0151      	lsls	r1, r2, #5
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	440a      	add	r2, r1
 800cf66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	015a      	lsls	r2, r3, #5
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	0151      	lsls	r1, r2, #5
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	440a      	add	r2, r1
 800cf86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf8e:	6013      	str	r3, [r2, #0]
 800cf90:	e02b      	b.n	800cfea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	015a      	lsls	r2, r3, #5
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	4413      	add	r3, r2
 800cf9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	db12      	blt.n	800cfca <USB_EPSetStall+0xae>
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00f      	beq.n	800cfca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	015a      	lsls	r2, r3, #5
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	0151      	lsls	r1, r2, #5
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	440a      	add	r2, r1
 800cfc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cfc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	015a      	lsls	r2, r3, #5
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	0151      	lsls	r1, r2, #5
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	440a      	add	r2, r1
 800cfe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfe8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	785b      	ldrb	r3, [r3, #1]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d128      	bne.n	800d066 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	015a      	lsls	r2, r3, #5
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	0151      	lsls	r1, r2, #5
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	440a      	add	r2, r1
 800d02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d02e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d032:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	78db      	ldrb	r3, [r3, #3]
 800d038:	2b03      	cmp	r3, #3
 800d03a:	d003      	beq.n	800d044 <USB_EPClearStall+0x4c>
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	78db      	ldrb	r3, [r3, #3]
 800d040:	2b02      	cmp	r3, #2
 800d042:	d138      	bne.n	800d0b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	015a      	lsls	r2, r3, #5
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4413      	add	r3, r2
 800d04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	0151      	lsls	r1, r2, #5
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	440a      	add	r2, r1
 800d05a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d062:	6013      	str	r3, [r2, #0]
 800d064:	e027      	b.n	800d0b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	015a      	lsls	r2, r3, #5
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4413      	add	r3, r2
 800d06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	0151      	lsls	r1, r2, #5
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	440a      	add	r2, r1
 800d07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d084:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	78db      	ldrb	r3, [r3, #3]
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d003      	beq.n	800d096 <USB_EPClearStall+0x9e>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	78db      	ldrb	r3, [r3, #3]
 800d092:	2b02      	cmp	r3, #2
 800d094:	d10f      	bne.n	800d0b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	015a      	lsls	r2, r3, #5
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4413      	add	r3, r2
 800d09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	0151      	lsls	r1, r2, #5
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	440a      	add	r2, r1
 800d0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d0e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ee:	681a      	ldr	r2, [r3, #0]
 800d0f0:	78fb      	ldrb	r3, [r7, #3]
 800d0f2:	011b      	lsls	r3, r3, #4
 800d0f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d0f8:	68f9      	ldr	r1, [r7, #12]
 800d0fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0fe:	4313      	orrs	r3, r2
 800d100:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3714      	adds	r7, #20
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d12a:	f023 0302 	bic.w	r3, r3, #2
 800d12e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d130:	2003      	movs	r0, #3
 800d132:	f7f4 fb4b 	bl	80017cc <HAL_Delay>

  return HAL_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d15a:	f043 0302 	orr.w	r3, r3, #2
 800d15e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d160:	2003      	movs	r0, #3
 800d162:	f7f4 fb33 	bl	80017cc <HAL_Delay>

  return HAL_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d170:	b480      	push	{r7}
 800d172:	b085      	sub	sp, #20
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	695b      	ldr	r3, [r3, #20]
 800d17c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	4013      	ands	r3, r2
 800d186:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d188:	68fb      	ldr	r3, [r7, #12]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d196:	b480      	push	{r7}
 800d198:	b085      	sub	sp, #20
 800d19a:	af00      	add	r7, sp, #0
 800d19c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1a8:	699b      	ldr	r3, [r3, #24]
 800d1aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b2:	69db      	ldr	r3, [r3, #28]
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	4013      	ands	r3, r2
 800d1b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	0c1b      	lsrs	r3, r3, #16
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3714      	adds	r7, #20
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	b085      	sub	sp, #20
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1e6:	69db      	ldr	r3, [r3, #28]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	4013      	ands	r3, r2
 800d1ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	b29b      	uxth	r3, r3
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d1fe:	b480      	push	{r7}
 800d200:	b085      	sub	sp, #20
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
 800d206:	460b      	mov	r3, r1
 800d208:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d20e:	78fb      	ldrb	r3, [r7, #3]
 800d210:	015a      	lsls	r2, r3, #5
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	4413      	add	r3, r2
 800d216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d224:	695b      	ldr	r3, [r3, #20]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	4013      	ands	r3, r2
 800d22a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d22c:	68bb      	ldr	r3, [r7, #8]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr

0800d23a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d23a:	b480      	push	{r7}
 800d23c:	b087      	sub	sp, #28
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	460b      	mov	r3, r1
 800d244:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d250:	691b      	ldr	r3, [r3, #16]
 800d252:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	f003 030f 	and.w	r3, r3, #15
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	fa22 f303 	lsr.w	r3, r2, r3
 800d26a:	01db      	lsls	r3, r3, #7
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	693a      	ldr	r2, [r7, #16]
 800d270:	4313      	orrs	r3, r2
 800d272:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d274:	78fb      	ldrb	r3, [r7, #3]
 800d276:	015a      	lsls	r2, r3, #5
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	4413      	add	r3, r2
 800d27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	693a      	ldr	r2, [r7, #16]
 800d284:	4013      	ands	r3, r2
 800d286:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d288:	68bb      	ldr	r3, [r7, #8]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	371c      	adds	r7, #28
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	695b      	ldr	r3, [r3, #20]
 800d2a2:	f003 0301 	and.w	r3, r3, #1
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
	...

0800d2b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4b09      	ldr	r3, [pc, #36]	; (800d2f8 <USB_ActivateSetup+0x44>)
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3714      	adds	r7, #20
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f6:	4770      	bx	lr
 800d2f8:	fffff800 	.word	0xfffff800

0800d2fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b087      	sub	sp, #28
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	460b      	mov	r3, r1
 800d306:	607a      	str	r2, [r7, #4]
 800d308:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	333c      	adds	r3, #60	; 0x3c
 800d312:	3304      	adds	r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	4a26      	ldr	r2, [pc, #152]	; (800d3b4 <USB_EP0_OutStart+0xb8>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d90a      	bls.n	800d336 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d32c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d330:	d101      	bne.n	800d336 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	e037      	b.n	800d3a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d33c:	461a      	mov	r2, r3
 800d33e:	2300      	movs	r3, #0
 800d340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35c:	691b      	ldr	r3, [r3, #16]
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d364:	f043 0318 	orr.w	r3, r3, #24
 800d368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d370:	691b      	ldr	r3, [r3, #16]
 800d372:	697a      	ldr	r2, [r7, #20]
 800d374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d378:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d37c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d37e:	7afb      	ldrb	r3, [r7, #11]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d10f      	bne.n	800d3a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38a:	461a      	mov	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d39e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d3a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	371c      	adds	r7, #28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	4f54300a 	.word	0x4f54300a

0800d3b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	60fb      	str	r3, [r7, #12]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	4a13      	ldr	r2, [pc, #76]	; (800d41c <USB_CoreReset+0x64>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d901      	bls.n	800d3d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d3d2:	2303      	movs	r3, #3
 800d3d4:	e01b      	b.n	800d40e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	daf2      	bge.n	800d3c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	f043 0201 	orr.w	r2, r3, #1
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	60fb      	str	r3, [r7, #12]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	4a09      	ldr	r2, [pc, #36]	; (800d41c <USB_CoreReset+0x64>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d901      	bls.n	800d400 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d3fc:	2303      	movs	r3, #3
 800d3fe:	e006      	b.n	800d40e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d0f0      	beq.n	800d3ee <USB_CoreReset+0x36>

  return HAL_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	00030d40 	.word	0x00030d40

0800d420 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	460b      	mov	r3, r1
 800d42a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d42c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d430:	f002 f952 	bl	800f6d8 <malloc>
 800d434:	4603      	mov	r3, r0
 800d436:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d105      	bne.n	800d44a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d446:	2302      	movs	r3, #2
 800d448:	e066      	b.n	800d518 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7c1b      	ldrb	r3, [r3, #16]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d119      	bne.n	800d48e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d45a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d45e:	2202      	movs	r2, #2
 800d460:	2181      	movs	r1, #129	; 0x81
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f001 ffbf 	bl	800f3e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d46e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d472:	2202      	movs	r2, #2
 800d474:	2101      	movs	r1, #1
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f001 ffb5 	bl	800f3e6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2201      	movs	r2, #1
 800d480:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2210      	movs	r2, #16
 800d488:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d48c:	e016      	b.n	800d4bc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d48e:	2340      	movs	r3, #64	; 0x40
 800d490:	2202      	movs	r2, #2
 800d492:	2181      	movs	r1, #129	; 0x81
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f001 ffa6 	bl	800f3e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d4a0:	2340      	movs	r3, #64	; 0x40
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	2101      	movs	r1, #1
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 ff9d 	bl	800f3e6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2210      	movs	r2, #16
 800d4b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d4bc:	2308      	movs	r3, #8
 800d4be:	2203      	movs	r2, #3
 800d4c0:	2182      	movs	r1, #130	; 0x82
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f001 ff8f 	bl	800f3e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	7c1b      	ldrb	r3, [r3, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d109      	bne.n	800d506 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d4f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d4fc:	2101      	movs	r1, #1
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f002 f860 	bl	800f5c4 <USBD_LL_PrepareReceive>
 800d504:	e007      	b.n	800d516 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d50c:	2340      	movs	r3, #64	; 0x40
 800d50e:	2101      	movs	r1, #1
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f002 f857 	bl	800f5c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	460b      	mov	r3, r1
 800d52a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800d52c:	2300      	movs	r3, #0
 800d52e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d530:	2181      	movs	r1, #129	; 0x81
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f001 ff7d 	bl	800f432 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d53e:	2101      	movs	r1, #1
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f001 ff76 	bl	800f432 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d54e:	2182      	movs	r1, #130	; 0x82
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 ff6e 	bl	800f432 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00e      	beq.n	800d58e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d580:	4618      	mov	r0, r3
 800d582:	f002 f8b1 	bl	800f6e8 <free>
    pdev->pClassData = NULL;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2200      	movs	r2, #0
 800d58a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b086      	sub	sp, #24
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5a8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d03a      	beq.n	800d638 <USBD_CDC_Setup+0xa0>
 800d5c2:	2b20      	cmp	r3, #32
 800d5c4:	f040 8097 	bne.w	800d6f6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	88db      	ldrh	r3, [r3, #6]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d029      	beq.n	800d624 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	b25b      	sxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	da11      	bge.n	800d5fe <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800d5e6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d5e8:	683a      	ldr	r2, [r7, #0]
 800d5ea:	88d2      	ldrh	r2, [r2, #6]
 800d5ec:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d5ee:	6939      	ldr	r1, [r7, #16]
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	88db      	ldrh	r3, [r3, #6]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f001 fa9d 	bl	800eb36 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800d5fc:	e082      	b.n	800d704 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	785a      	ldrb	r2, [r3, #1]
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	88db      	ldrh	r3, [r3, #6]
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d614:	6939      	ldr	r1, [r7, #16]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	88db      	ldrh	r3, [r3, #6]
 800d61a:	461a      	mov	r2, r3
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f001 fab6 	bl	800eb8e <USBD_CtlPrepareRx>
    break;
 800d622:	e06f      	b.n	800d704 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	683a      	ldr	r2, [r7, #0]
 800d62e:	7850      	ldrb	r0, [r2, #1]
 800d630:	2200      	movs	r2, #0
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	4798      	blx	r3
    break;
 800d636:	e065      	b.n	800d704 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b0b      	cmp	r3, #11
 800d63e:	d84f      	bhi.n	800d6e0 <USBD_CDC_Setup+0x148>
 800d640:	a201      	add	r2, pc, #4	; (adr r2, 800d648 <USBD_CDC_Setup+0xb0>)
 800d642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d646:	bf00      	nop
 800d648:	0800d679 	.word	0x0800d679
 800d64c:	0800d6ef 	.word	0x0800d6ef
 800d650:	0800d6e1 	.word	0x0800d6e1
 800d654:	0800d6e1 	.word	0x0800d6e1
 800d658:	0800d6e1 	.word	0x0800d6e1
 800d65c:	0800d6e1 	.word	0x0800d6e1
 800d660:	0800d6e1 	.word	0x0800d6e1
 800d664:	0800d6e1 	.word	0x0800d6e1
 800d668:	0800d6e1 	.word	0x0800d6e1
 800d66c:	0800d6e1 	.word	0x0800d6e1
 800d670:	0800d6a1 	.word	0x0800d6a1
 800d674:	0800d6c9 	.word	0x0800d6c9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d107      	bne.n	800d692 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d682:	f107 030c 	add.w	r3, r7, #12
 800d686:	2202      	movs	r2, #2
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f001 fa53 	bl	800eb36 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d690:	e030      	b.n	800d6f4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f001 f9dd 	bl	800ea54 <USBD_CtlError>
        ret = USBD_FAIL;
 800d69a:	2303      	movs	r3, #3
 800d69c:	75fb      	strb	r3, [r7, #23]
      break;
 800d69e:	e029      	b.n	800d6f4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d107      	bne.n	800d6ba <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d6aa:	f107 030f 	add.w	r3, r7, #15
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f001 fa3f 	bl	800eb36 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d6b8:	e01c      	b.n	800d6f4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f001 f9c9 	bl	800ea54 <USBD_CtlError>
        ret = USBD_FAIL;
 800d6c2:	2303      	movs	r3, #3
 800d6c4:	75fb      	strb	r3, [r7, #23]
      break;
 800d6c6:	e015      	b.n	800d6f4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	d00f      	beq.n	800d6f2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f001 f9bd 	bl	800ea54 <USBD_CtlError>
        ret = USBD_FAIL;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d6de:	e008      	b.n	800d6f2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f001 f9b6 	bl	800ea54 <USBD_CtlError>
      ret = USBD_FAIL;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	75fb      	strb	r3, [r7, #23]
      break;
 800d6ec:	e002      	b.n	800d6f4 <USBD_CDC_Setup+0x15c>
      break;
 800d6ee:	bf00      	nop
 800d6f0:	e008      	b.n	800d704 <USBD_CDC_Setup+0x16c>
      break;
 800d6f2:	bf00      	nop
    }
    break;
 800d6f4:	e006      	b.n	800d704 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f001 f9ab 	bl	800ea54 <USBD_CtlError>
    ret = USBD_FAIL;
 800d6fe:	2303      	movs	r3, #3
 800d700:	75fb      	strb	r3, [r7, #23]
    break;
 800d702:	bf00      	nop
  }

  return (uint8_t)ret;
 800d704:	7dfb      	ldrb	r3, [r7, #23]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop

0800d710 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	460b      	mov	r3, r1
 800d71a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d101      	bne.n	800d732 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d72e:	2303      	movs	r3, #3
 800d730:	e049      	b.n	800d7c6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d738:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d73a:	78fa      	ldrb	r2, [r7, #3]
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	440b      	add	r3, r1
 800d748:	3318      	adds	r3, #24
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d029      	beq.n	800d7a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d750:	78fa      	ldrb	r2, [r7, #3]
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	4613      	mov	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	440b      	add	r3, r1
 800d75e:	3318      	adds	r3, #24
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	78f9      	ldrb	r1, [r7, #3]
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	460b      	mov	r3, r1
 800d768:	00db      	lsls	r3, r3, #3
 800d76a:	1a5b      	subs	r3, r3, r1
 800d76c:	009b      	lsls	r3, r3, #2
 800d76e:	4403      	add	r3, r0
 800d770:	3344      	adds	r3, #68	; 0x44
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	fbb2 f1f3 	udiv	r1, r2, r3
 800d778:	fb03 f301 	mul.w	r3, r3, r1
 800d77c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d110      	bne.n	800d7a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d782:	78fa      	ldrb	r2, [r7, #3]
 800d784:	6879      	ldr	r1, [r7, #4]
 800d786:	4613      	mov	r3, r2
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	4413      	add	r3, r2
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	440b      	add	r3, r1
 800d790:	3318      	adds	r3, #24
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d796:	78f9      	ldrb	r1, [r7, #3]
 800d798:	2300      	movs	r3, #0
 800d79a:	2200      	movs	r2, #0
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f001 fef0 	bl	800f582 <USBD_LL_Transmit>
 800d7a2:	e00f      	b.n	800d7c4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d7c0:	78fa      	ldrb	r2, [r7, #3]
 800d7c2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b084      	sub	sp, #16
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	e015      	b.n	800d81c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f001 ff06 	bl	800f606 <USBD_LL_GetRxDataSize>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d816:	4611      	mov	r1, r2
 800d818:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b084      	sub	sp, #16
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d832:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d015      	beq.n	800d86a <USBD_CDC_EP0_RxReady+0x46>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d844:	2bff      	cmp	r3, #255	; 0xff
 800d846:	d010      	beq.n	800d86a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d856:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d85e:	b292      	uxth	r2, r2
 800d860:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	22ff      	movs	r2, #255	; 0xff
 800d866:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800d86a:	2300      	movs	r3, #0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2243      	movs	r2, #67	; 0x43
 800d880:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d882:	4b03      	ldr	r3, [pc, #12]	; (800d890 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d884:	4618      	mov	r0, r3
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	24000098 	.word	0x24000098

0800d894 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2243      	movs	r2, #67	; 0x43
 800d8a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d8a2:	4b03      	ldr	r3, [pc, #12]	; (800d8b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	24000054 	.word	0x24000054

0800d8b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2243      	movs	r2, #67	; 0x43
 800d8c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d8c2:	4b03      	ldr	r3, [pc, #12]	; (800d8d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr
 800d8d0:	240000dc 	.word	0x240000dc

0800d8d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	220a      	movs	r2, #10
 800d8e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d8e2:	4b03      	ldr	r3, [pc, #12]	; (800d8f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	24000010 	.word	0x24000010

0800d8f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d101      	bne.n	800d908 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d904:	2303      	movs	r3, #3
 800d906:	e004      	b.n	800d912 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d91e:	b480      	push	{r7}
 800d920:	b087      	sub	sp, #28
 800d922:	af00      	add	r7, sp, #0
 800d924:	60f8      	str	r0, [r7, #12]
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d930:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d942:	2300      	movs	r3, #0
}
 800d944:	4618      	mov	r0, r3
 800d946:	371c      	adds	r7, #28
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d960:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3714      	adds	r7, #20
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d986:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d988:	2301      	movs	r3, #1
 800d98a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d996:	2303      	movs	r3, #3
 800d998:	e01a      	b.n	800d9d0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d114      	bne.n	800d9ce <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d9c2:	2181      	movs	r1, #129	; 0x81
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f001 fddc 	bl	800f582 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	e016      	b.n	800da24 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7c1b      	ldrb	r3, [r3, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d109      	bne.n	800da12 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da08:	2101      	movs	r1, #1
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f001 fdda 	bl	800f5c4 <USBD_LL_PrepareReceive>
 800da10:	e007      	b.n	800da22 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800da18:	2340      	movs	r3, #64	; 0x40
 800da1a:	2101      	movs	r1, #1
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f001 fdd1 	bl	800f5c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4613      	mov	r3, r2
 800da38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d101      	bne.n	800da44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800da40:	2303      	movs	r3, #3
 800da42:	e025      	b.n	800da90 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d003      	beq.n	800da56 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d003      	beq.n	800da68 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	79fa      	ldrb	r2, [r7, #7]
 800da82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f001 fc43 	bl	800f310 <USBD_LL_Init>
 800da8a:	4603      	mov	r3, r0
 800da8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800da8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3718      	adds	r7, #24
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800daa2:	2300      	movs	r3, #0
 800daa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800daac:	2303      	movs	r3, #3
 800daae:	e010      	b.n	800dad2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	683a      	ldr	r2, [r7, #0]
 800dab4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac0:	f107 020e 	add.w	r2, r7, #14
 800dac4:	4610      	mov	r0, r2
 800dac6:	4798      	blx	r3
 800dac8:	4602      	mov	r2, r0
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b082      	sub	sp, #8
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f001 fc64 	bl	800f3b0 <USBD_LL_Start>
 800dae8:	4603      	mov	r3, r0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800daf2:	b480      	push	{r7}
 800daf4:	b083      	sub	sp, #12
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
 800db10:	460b      	mov	r3, r1
 800db12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800db14:	2303      	movs	r3, #3
 800db16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d009      	beq.n	800db36 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	78fa      	ldrb	r2, [r7, #3]
 800db2c:	4611      	mov	r1, r2
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	4798      	blx	r3
 800db32:	4603      	mov	r3, r0
 800db34:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800db36:	7bfb      	ldrb	r3, [r7, #15]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db52:	2b00      	cmp	r3, #0
 800db54:	d007      	beq.n	800db66 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	78fa      	ldrb	r2, [r7, #3]
 800db60:	4611      	mov	r1, r2
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	4798      	blx	r3
  }

  return USBD_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 ff2c 	bl	800e9e0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800db96:	461a      	mov	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dba4:	f003 031f 	and.w	r3, r3, #31
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d00e      	beq.n	800dbca <USBD_LL_SetupStage+0x5a>
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d302      	bcc.n	800dbb6 <USBD_LL_SetupStage+0x46>
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d014      	beq.n	800dbde <USBD_LL_SetupStage+0x6e>
 800dbb4:	e01d      	b.n	800dbf2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fa18 	bl	800dff4 <USBD_StdDevReq>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc8:	e020      	b.n	800dc0c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fa7c 	bl	800e0d0 <USBD_StdItfReq>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]
      break;
 800dbdc:	e016      	b.n	800dc0c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fab8 	bl	800e15c <USBD_StdEPReq>
 800dbec:	4603      	mov	r3, r0
 800dbee:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf0:	e00c      	b.n	800dc0c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dbf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f001 fc35 	bl	800f470 <USBD_LL_StallEP>
 800dc06:	4603      	mov	r3, r0
 800dc08:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0a:	bf00      	nop
  }

  return ret;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b086      	sub	sp, #24
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	60f8      	str	r0, [r7, #12]
 800dc1e:	460b      	mov	r3, r1
 800dc20:	607a      	str	r2, [r7, #4]
 800dc22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dc24:	7afb      	ldrb	r3, [r7, #11]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d137      	bne.n	800dc9a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dc30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dc38:	2b03      	cmp	r3, #3
 800dc3a:	d14a      	bne.n	800dcd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	689a      	ldr	r2, [r3, #8]
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d913      	bls.n	800dc70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	689a      	ldr	r2, [r3, #8]
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	1ad2      	subs	r2, r2, r3
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	68da      	ldr	r2, [r3, #12]
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	bf28      	it	cs
 800dc62:	4613      	movcs	r3, r2
 800dc64:	461a      	mov	r2, r3
 800dc66:	6879      	ldr	r1, [r7, #4]
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f000 ffad 	bl	800ebc8 <USBD_CtlContinueRx>
 800dc6e:	e030      	b.n	800dcd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00a      	beq.n	800dc92 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d105      	bne.n	800dc92 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc8c:	691b      	ldr	r3, [r3, #16]
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	f000 ffa9 	bl	800ebea <USBD_CtlSendStatus>
 800dc98:	e01b      	b.n	800dcd2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dca0:	699b      	ldr	r3, [r3, #24]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d013      	beq.n	800dcce <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800dcac:	2b03      	cmp	r3, #3
 800dcae:	d10e      	bne.n	800dcce <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	7afa      	ldrb	r2, [r7, #11]
 800dcba:	4611      	mov	r1, r2
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	4798      	blx	r3
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800dcc4:	7dfb      	ldrb	r3, [r7, #23]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800dcca:	7dfb      	ldrb	r3, [r7, #23]
 800dccc:	e002      	b.n	800dcd4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	e000      	b.n	800dcd4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	460b      	mov	r3, r1
 800dce6:	607a      	str	r2, [r7, #4]
 800dce8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dcea:	7afb      	ldrb	r3, [r7, #11]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d16a      	bne.n	800ddc6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3314      	adds	r3, #20
 800dcf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dcfc:	2b02      	cmp	r3, #2
 800dcfe:	d155      	bne.n	800ddac <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	689a      	ldr	r2, [r3, #8]
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d914      	bls.n	800dd36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	689a      	ldr	r2, [r3, #8]
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	1ad2      	subs	r2, r2, r3
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	461a      	mov	r2, r3
 800dd20:	6879      	ldr	r1, [r7, #4]
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f000 ff22 	bl	800eb6c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd28:	2300      	movs	r3, #0
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f001 fc48 	bl	800f5c4 <USBD_LL_PrepareReceive>
 800dd34:	e03a      	b.n	800ddac <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	68da      	ldr	r2, [r3, #12]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d11c      	bne.n	800dd7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	685a      	ldr	r2, [r3, #4]
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d316      	bcc.n	800dd7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	685a      	ldr	r2, [r3, #4]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d20f      	bcs.n	800dd7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	2100      	movs	r1, #0
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	f000 ff03 	bl	800eb6c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd6e:	2300      	movs	r3, #0
 800dd70:	2200      	movs	r2, #0
 800dd72:	2100      	movs	r1, #0
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f001 fc25 	bl	800f5c4 <USBD_LL_PrepareReceive>
 800dd7a:	e017      	b.n	800ddac <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00a      	beq.n	800dd9e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800dd8e:	2b03      	cmp	r3, #3
 800dd90:	d105      	bne.n	800dd9e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd9e:	2180      	movs	r1, #128	; 0x80
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	f001 fb65 	bl	800f470 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 ff32 	bl	800ec10 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d123      	bne.n	800ddfe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	f7ff fe9b 	bl	800daf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ddc4:	e01b      	b.n	800ddfe <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d013      	beq.n	800ddfa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d10e      	bne.n	800ddfa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	7afa      	ldrb	r2, [r7, #11]
 800dde6:	4611      	mov	r1, r2
 800dde8:	68f8      	ldr	r0, [r7, #12]
 800ddea:	4798      	blx	r3
 800ddec:	4603      	mov	r3, r0
 800ddee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ddf0:	7dfb      	ldrb	r3, [r7, #23]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ddf6:	7dfb      	ldrb	r3, [r7, #23]
 800ddf8:	e002      	b.n	800de00 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	e000      	b.n	800de00 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de34:	2b00      	cmp	r3, #0
 800de36:	d009      	beq.n	800de4c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	6852      	ldr	r2, [r2, #4]
 800de44:	b2d2      	uxtb	r2, r2
 800de46:	4611      	mov	r1, r2
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de4c:	2340      	movs	r3, #64	; 0x40
 800de4e:	2200      	movs	r2, #0
 800de50:	2100      	movs	r1, #0
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f001 fac7 	bl	800f3e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2240      	movs	r2, #64	; 0x40
 800de64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de68:	2340      	movs	r3, #64	; 0x40
 800de6a:	2200      	movs	r2, #0
 800de6c:	2180      	movs	r1, #128	; 0x80
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f001 fab9 	bl	800f3e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2201      	movs	r2, #1
 800de78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2240      	movs	r2, #64	; 0x40
 800de7e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800de8a:	b480      	push	{r7}
 800de8c:	b083      	sub	sp, #12
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
 800de92:	460b      	mov	r3, r1
 800de94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	78fa      	ldrb	r2, [r7, #3]
 800de9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800deaa:	b480      	push	{r7}
 800deac:	b083      	sub	sp, #12
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2204      	movs	r2, #4
 800dec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dee2:	2b04      	cmp	r3, #4
 800dee4:	d105      	bne.n	800def2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d10b      	bne.n	800df2a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df18:	69db      	ldr	r3, [r3, #28]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d005      	beq.n	800df2a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df24:	69db      	ldr	r3, [r3, #28]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	460b      	mov	r3, r1
 800df3e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800df4e:	b480      	push	{r7}
 800df50:	b083      	sub	sp, #12
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	460b      	mov	r3, r1
 800df58:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df70:	2300      	movs	r3, #0
}
 800df72:	4618      	mov	r0, r3
 800df74:	370c      	adds	r7, #12
 800df76:	46bd      	mov	sp, r7
 800df78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7c:	4770      	bx	lr

0800df7e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b082      	sub	sp, #8
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df94:	2b00      	cmp	r3, #0
 800df96:	d009      	beq.n	800dfac <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	6852      	ldr	r2, [r2, #4]
 800dfa4:	b2d2      	uxtb	r2, r2
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	4798      	blx	r3
  }

  return USBD_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b087      	sub	sp, #28
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfd4:	8a3b      	ldrh	r3, [r7, #16]
 800dfd6:	021b      	lsls	r3, r3, #8
 800dfd8:	b21a      	sxth	r2, r3
 800dfda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	b21b      	sxth	r3, r3
 800dfe2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfe4:	89fb      	ldrh	r3, [r7, #14]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	371c      	adds	r7, #28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
	...

0800dff4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e00a:	2b20      	cmp	r3, #32
 800e00c:	d004      	beq.n	800e018 <USBD_StdDevReq+0x24>
 800e00e:	2b40      	cmp	r3, #64	; 0x40
 800e010:	d002      	beq.n	800e018 <USBD_StdDevReq+0x24>
 800e012:	2b00      	cmp	r3, #0
 800e014:	d00a      	beq.n	800e02c <USBD_StdDevReq+0x38>
 800e016:	e050      	b.n	800e0ba <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	6839      	ldr	r1, [r7, #0]
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	4798      	blx	r3
 800e026:	4603      	mov	r3, r0
 800e028:	73fb      	strb	r3, [r7, #15]
    break;
 800e02a:	e04b      	b.n	800e0c4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	785b      	ldrb	r3, [r3, #1]
 800e030:	2b09      	cmp	r3, #9
 800e032:	d83c      	bhi.n	800e0ae <USBD_StdDevReq+0xba>
 800e034:	a201      	add	r2, pc, #4	; (adr r2, 800e03c <USBD_StdDevReq+0x48>)
 800e036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e03a:	bf00      	nop
 800e03c:	0800e091 	.word	0x0800e091
 800e040:	0800e0a5 	.word	0x0800e0a5
 800e044:	0800e0af 	.word	0x0800e0af
 800e048:	0800e09b 	.word	0x0800e09b
 800e04c:	0800e0af 	.word	0x0800e0af
 800e050:	0800e06f 	.word	0x0800e06f
 800e054:	0800e065 	.word	0x0800e065
 800e058:	0800e0af 	.word	0x0800e0af
 800e05c:	0800e087 	.word	0x0800e087
 800e060:	0800e079 	.word	0x0800e079
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800e064:	6839      	ldr	r1, [r7, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f9ce 	bl	800e408 <USBD_GetDescriptor>
      break;
 800e06c:	e024      	b.n	800e0b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fb33 	bl	800e6dc <USBD_SetAddress>
      break;
 800e076:	e01f      	b.n	800e0b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fb70 	bl	800e760 <USBD_SetConfig>
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]
      break;
 800e084:	e018      	b.n	800e0b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800e086:	6839      	ldr	r1, [r7, #0]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f000 fc0d 	bl	800e8a8 <USBD_GetConfig>
      break;
 800e08e:	e013      	b.n	800e0b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 fc3c 	bl	800e910 <USBD_GetStatus>
      break;
 800e098:	e00e      	b.n	800e0b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800e09a:	6839      	ldr	r1, [r7, #0]
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 fc6a 	bl	800e976 <USBD_SetFeature>
      break;
 800e0a2:	e009      	b.n	800e0b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 fc79 	bl	800e99e <USBD_ClrFeature>
      break;
 800e0ac:	e004      	b.n	800e0b8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800e0ae:	6839      	ldr	r1, [r7, #0]
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f000 fccf 	bl	800ea54 <USBD_CtlError>
      break;
 800e0b6:	bf00      	nop
    }
    break;
 800e0b8:	e004      	b.n	800e0c4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f000 fcc9 	bl	800ea54 <USBD_CtlError>
    break;
 800e0c2:	bf00      	nop
  }

  return ret;
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop

0800e0d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0e6:	2b20      	cmp	r3, #32
 800e0e8:	d003      	beq.n	800e0f2 <USBD_StdItfReq+0x22>
 800e0ea:	2b40      	cmp	r3, #64	; 0x40
 800e0ec:	d001      	beq.n	800e0f2 <USBD_StdItfReq+0x22>
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d12a      	bne.n	800e148 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	d81d      	bhi.n	800e13a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	889b      	ldrh	r3, [r3, #4]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b01      	cmp	r3, #1
 800e106:	d813      	bhi.n	800e130 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	6839      	ldr	r1, [r7, #0]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	4798      	blx	r3
 800e116:	4603      	mov	r3, r0
 800e118:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	88db      	ldrh	r3, [r3, #6]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d110      	bne.n	800e144 <USBD_StdItfReq+0x74>
 800e122:	7bfb      	ldrb	r3, [r7, #15]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10d      	bne.n	800e144 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f000 fd5e 	bl	800ebea <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800e12e:	e009      	b.n	800e144 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fc8e 	bl	800ea54 <USBD_CtlError>
      break;
 800e138:	e004      	b.n	800e144 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fc89 	bl	800ea54 <USBD_CtlError>
      break;
 800e142:	e000      	b.n	800e146 <USBD_StdItfReq+0x76>
      break;
 800e144:	bf00      	nop
    }
    break;
 800e146:	e004      	b.n	800e152 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fc82 	bl	800ea54 <USBD_CtlError>
    break;
 800e150:	bf00      	nop
  }

  return ret;
 800e152:	7bfb      	ldrb	r3, [r7, #15]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3710      	adds	r7, #16
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	889b      	ldrh	r3, [r3, #4]
 800e16e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e178:	2b20      	cmp	r3, #32
 800e17a:	d004      	beq.n	800e186 <USBD_StdEPReq+0x2a>
 800e17c:	2b40      	cmp	r3, #64	; 0x40
 800e17e:	d002      	beq.n	800e186 <USBD_StdEPReq+0x2a>
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00a      	beq.n	800e19a <USBD_StdEPReq+0x3e>
 800e184:	e135      	b.n	800e3f2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	6839      	ldr	r1, [r7, #0]
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	4798      	blx	r3
 800e194:	4603      	mov	r3, r0
 800e196:	73fb      	strb	r3, [r7, #15]
    break;
 800e198:	e130      	b.n	800e3fc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	785b      	ldrb	r3, [r3, #1]
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d03e      	beq.n	800e220 <USBD_StdEPReq+0xc4>
 800e1a2:	2b03      	cmp	r3, #3
 800e1a4:	d002      	beq.n	800e1ac <USBD_StdEPReq+0x50>
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d077      	beq.n	800e29a <USBD_StdEPReq+0x13e>
 800e1aa:	e11c      	b.n	800e3e6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	d002      	beq.n	800e1bc <USBD_StdEPReq+0x60>
 800e1b6:	2b03      	cmp	r3, #3
 800e1b8:	d015      	beq.n	800e1e6 <USBD_StdEPReq+0x8a>
 800e1ba:	e02b      	b.n	800e214 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1bc:	7bbb      	ldrb	r3, [r7, #14]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00c      	beq.n	800e1dc <USBD_StdEPReq+0x80>
 800e1c2:	7bbb      	ldrb	r3, [r7, #14]
 800e1c4:	2b80      	cmp	r3, #128	; 0x80
 800e1c6:	d009      	beq.n	800e1dc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1c8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f001 f94f 	bl	800f470 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1d2:	2180      	movs	r1, #128	; 0x80
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f001 f94b 	bl	800f470 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e1da:	e020      	b.n	800e21e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 fc38 	bl	800ea54 <USBD_CtlError>
        break;
 800e1e4:	e01b      	b.n	800e21e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	885b      	ldrh	r3, [r3, #2]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d10e      	bne.n	800e20c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1ee:	7bbb      	ldrb	r3, [r7, #14]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00b      	beq.n	800e20c <USBD_StdEPReq+0xb0>
 800e1f4:	7bbb      	ldrb	r3, [r7, #14]
 800e1f6:	2b80      	cmp	r3, #128	; 0x80
 800e1f8:	d008      	beq.n	800e20c <USBD_StdEPReq+0xb0>
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	88db      	ldrh	r3, [r3, #6]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d104      	bne.n	800e20c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800e202:	7bbb      	ldrb	r3, [r7, #14]
 800e204:	4619      	mov	r1, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f001 f932 	bl	800f470 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fcec 	bl	800ebea <USBD_CtlSendStatus>

        break;
 800e212:	e004      	b.n	800e21e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fc1c 	bl	800ea54 <USBD_CtlError>
        break;
 800e21c:	bf00      	nop
      }
      break;
 800e21e:	e0e7      	b.n	800e3f0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e226:	2b02      	cmp	r3, #2
 800e228:	d002      	beq.n	800e230 <USBD_StdEPReq+0xd4>
 800e22a:	2b03      	cmp	r3, #3
 800e22c:	d015      	beq.n	800e25a <USBD_StdEPReq+0xfe>
 800e22e:	e02d      	b.n	800e28c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e230:	7bbb      	ldrb	r3, [r7, #14]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00c      	beq.n	800e250 <USBD_StdEPReq+0xf4>
 800e236:	7bbb      	ldrb	r3, [r7, #14]
 800e238:	2b80      	cmp	r3, #128	; 0x80
 800e23a:	d009      	beq.n	800e250 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f001 f915 	bl	800f470 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e246:	2180      	movs	r1, #128	; 0x80
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f001 f911 	bl	800f470 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800e24e:	e023      	b.n	800e298 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 fbfe 	bl	800ea54 <USBD_CtlError>
        break;
 800e258:	e01e      	b.n	800e298 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	885b      	ldrh	r3, [r3, #2]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d119      	bne.n	800e296 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800e262:	7bbb      	ldrb	r3, [r7, #14]
 800e264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d004      	beq.n	800e276 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e26c:	7bbb      	ldrb	r3, [r7, #14]
 800e26e:	4619      	mov	r1, r3
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f001 f91c 	bl	800f4ae <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fcb7 	bl	800ebea <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	6839      	ldr	r1, [r7, #0]
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	4798      	blx	r3
        }
        break;
 800e28a:	e004      	b.n	800e296 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800e28c:	6839      	ldr	r1, [r7, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 fbe0 	bl	800ea54 <USBD_CtlError>
        break;
 800e294:	e000      	b.n	800e298 <USBD_StdEPReq+0x13c>
        break;
 800e296:	bf00      	nop
      }
      break;
 800e298:	e0aa      	b.n	800e3f0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2a0:	2b02      	cmp	r3, #2
 800e2a2:	d002      	beq.n	800e2aa <USBD_StdEPReq+0x14e>
 800e2a4:	2b03      	cmp	r3, #3
 800e2a6:	d032      	beq.n	800e30e <USBD_StdEPReq+0x1b2>
 800e2a8:	e097      	b.n	800e3da <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2aa:	7bbb      	ldrb	r3, [r7, #14]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <USBD_StdEPReq+0x164>
 800e2b0:	7bbb      	ldrb	r3, [r7, #14]
 800e2b2:	2b80      	cmp	r3, #128	; 0x80
 800e2b4:	d004      	beq.n	800e2c0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 fbcb 	bl	800ea54 <USBD_CtlError>
          break;
 800e2be:	e091      	b.n	800e3e4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da0b      	bge.n	800e2e0 <USBD_StdEPReq+0x184>
 800e2c8:	7bbb      	ldrb	r3, [r7, #14]
 800e2ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2ce:	4613      	mov	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	4413      	add	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	3310      	adds	r3, #16
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	4413      	add	r3, r2
 800e2dc:	3304      	adds	r3, #4
 800e2de:	e00b      	b.n	800e2f8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e2e0:	7bbb      	ldrb	r3, [r7, #14]
 800e2e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2e6:	4613      	mov	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	4413      	add	r3, r2
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2202      	movs	r2, #2
 800e304:	4619      	mov	r1, r3
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fc15 	bl	800eb36 <USBD_CtlSendData>
        break;
 800e30c:	e06a      	b.n	800e3e4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800e30e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e312:	2b00      	cmp	r3, #0
 800e314:	da11      	bge.n	800e33a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	f003 020f 	and.w	r2, r3, #15
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	4613      	mov	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	440b      	add	r3, r1
 800e328:	3324      	adds	r3, #36	; 0x24
 800e32a:	881b      	ldrh	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d117      	bne.n	800e360 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 fb8e 	bl	800ea54 <USBD_CtlError>
            break;
 800e338:	e054      	b.n	800e3e4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	f003 020f 	and.w	r2, r3, #15
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	4613      	mov	r3, r2
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	4413      	add	r3, r2
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	440b      	add	r3, r1
 800e34c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d104      	bne.n	800e360 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800e356:	6839      	ldr	r1, [r7, #0]
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fb7b 	bl	800ea54 <USBD_CtlError>
            break;
 800e35e:	e041      	b.n	800e3e4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e364:	2b00      	cmp	r3, #0
 800e366:	da0b      	bge.n	800e380 <USBD_StdEPReq+0x224>
 800e368:	7bbb      	ldrb	r3, [r7, #14]
 800e36a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e36e:	4613      	mov	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	3310      	adds	r3, #16
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	4413      	add	r3, r2
 800e37c:	3304      	adds	r3, #4
 800e37e:	e00b      	b.n	800e398 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800e380:	7bbb      	ldrb	r3, [r7, #14]
 800e382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e386:	4613      	mov	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	4413      	add	r3, r2
 800e396:	3304      	adds	r3, #4
 800e398:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e39a:	7bbb      	ldrb	r3, [r7, #14]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d002      	beq.n	800e3a6 <USBD_StdEPReq+0x24a>
 800e3a0:	7bbb      	ldrb	r3, [r7, #14]
 800e3a2:	2b80      	cmp	r3, #128	; 0x80
 800e3a4:	d103      	bne.n	800e3ae <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]
 800e3ac:	e00e      	b.n	800e3cc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f001 f89a 	bl	800f4ec <USBD_LL_IsStallEP>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d003      	beq.n	800e3c6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	e002      	b.n	800e3cc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	2202      	movs	r2, #2
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 fbaf 	bl	800eb36 <USBD_CtlSendData>
          break;
 800e3d8:	e004      	b.n	800e3e4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fb39 	bl	800ea54 <USBD_CtlError>
        break;
 800e3e2:	bf00      	nop
      }
      break;
 800e3e4:	e004      	b.n	800e3f0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800e3e6:	6839      	ldr	r1, [r7, #0]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 fb33 	bl	800ea54 <USBD_CtlError>
      break;
 800e3ee:	bf00      	nop
    }
    break;
 800e3f0:	e004      	b.n	800e3fc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 fb2d 	bl	800ea54 <USBD_CtlError>
    break;
 800e3fa:	bf00      	nop
  }

  return ret;
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
	...

0800e408 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e412:	2300      	movs	r3, #0
 800e414:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e416:	2300      	movs	r3, #0
 800e418:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e41a:	2300      	movs	r3, #0
 800e41c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	885b      	ldrh	r3, [r3, #2]
 800e422:	0a1b      	lsrs	r3, r3, #8
 800e424:	b29b      	uxth	r3, r3
 800e426:	3b01      	subs	r3, #1
 800e428:	2b06      	cmp	r3, #6
 800e42a:	f200 8128 	bhi.w	800e67e <USBD_GetDescriptor+0x276>
 800e42e:	a201      	add	r2, pc, #4	; (adr r2, 800e434 <USBD_GetDescriptor+0x2c>)
 800e430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e434:	0800e451 	.word	0x0800e451
 800e438:	0800e469 	.word	0x0800e469
 800e43c:	0800e4a9 	.word	0x0800e4a9
 800e440:	0800e67f 	.word	0x0800e67f
 800e444:	0800e67f 	.word	0x0800e67f
 800e448:	0800e61f 	.word	0x0800e61f
 800e44c:	0800e64b 	.word	0x0800e64b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	7c12      	ldrb	r2, [r2, #16]
 800e45c:	f107 0108 	add.w	r1, r7, #8
 800e460:	4610      	mov	r0, r2
 800e462:	4798      	blx	r3
 800e464:	60f8      	str	r0, [r7, #12]
    break;
 800e466:	e112      	b.n	800e68e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	7c1b      	ldrb	r3, [r3, #16]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d10d      	bne.n	800e48c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e478:	f107 0208 	add.w	r2, r7, #8
 800e47c:	4610      	mov	r0, r2
 800e47e:	4798      	blx	r3
 800e480:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	3301      	adds	r3, #1
 800e486:	2202      	movs	r2, #2
 800e488:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e48a:	e100      	b.n	800e68e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e494:	f107 0208 	add.w	r2, r7, #8
 800e498:	4610      	mov	r0, r2
 800e49a:	4798      	blx	r3
 800e49c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	701a      	strb	r2, [r3, #0]
    break;
 800e4a6:	e0f2      	b.n	800e68e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	885b      	ldrh	r3, [r3, #2]
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	2b05      	cmp	r3, #5
 800e4b0:	f200 80ac 	bhi.w	800e60c <USBD_GetDescriptor+0x204>
 800e4b4:	a201      	add	r2, pc, #4	; (adr r2, 800e4bc <USBD_GetDescriptor+0xb4>)
 800e4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ba:	bf00      	nop
 800e4bc:	0800e4d5 	.word	0x0800e4d5
 800e4c0:	0800e509 	.word	0x0800e509
 800e4c4:	0800e53d 	.word	0x0800e53d
 800e4c8:	0800e571 	.word	0x0800e571
 800e4cc:	0800e5a5 	.word	0x0800e5a5
 800e4d0:	0800e5d9 	.word	0x0800e5d9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00b      	beq.n	800e4f8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	7c12      	ldrb	r2, [r2, #16]
 800e4ec:	f107 0108 	add.w	r1, r7, #8
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	4798      	blx	r3
 800e4f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4f6:	e091      	b.n	800e61c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 faaa 	bl	800ea54 <USBD_CtlError>
        err++;
 800e500:	7afb      	ldrb	r3, [r7, #11]
 800e502:	3301      	adds	r3, #1
 800e504:	72fb      	strb	r3, [r7, #11]
      break;
 800e506:	e089      	b.n	800e61c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00b      	beq.n	800e52c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	7c12      	ldrb	r2, [r2, #16]
 800e520:	f107 0108 	add.w	r1, r7, #8
 800e524:	4610      	mov	r0, r2
 800e526:	4798      	blx	r3
 800e528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e52a:	e077      	b.n	800e61c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fa90 	bl	800ea54 <USBD_CtlError>
        err++;
 800e534:	7afb      	ldrb	r3, [r7, #11]
 800e536:	3301      	adds	r3, #1
 800e538:	72fb      	strb	r3, [r7, #11]
      break;
 800e53a:	e06f      	b.n	800e61c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00b      	beq.n	800e560 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	7c12      	ldrb	r2, [r2, #16]
 800e554:	f107 0108 	add.w	r1, r7, #8
 800e558:	4610      	mov	r0, r2
 800e55a:	4798      	blx	r3
 800e55c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e55e:	e05d      	b.n	800e61c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 fa76 	bl	800ea54 <USBD_CtlError>
        err++;
 800e568:	7afb      	ldrb	r3, [r7, #11]
 800e56a:	3301      	adds	r3, #1
 800e56c:	72fb      	strb	r3, [r7, #11]
      break;
 800e56e:	e055      	b.n	800e61c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00b      	beq.n	800e594 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	7c12      	ldrb	r2, [r2, #16]
 800e588:	f107 0108 	add.w	r1, r7, #8
 800e58c:	4610      	mov	r0, r2
 800e58e:	4798      	blx	r3
 800e590:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e592:	e043      	b.n	800e61c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fa5c 	bl	800ea54 <USBD_CtlError>
        err++;
 800e59c:	7afb      	ldrb	r3, [r7, #11]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	72fb      	strb	r3, [r7, #11]
      break;
 800e5a2:	e03b      	b.n	800e61c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5aa:	695b      	ldr	r3, [r3, #20]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00b      	beq.n	800e5c8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5b6:	695b      	ldr	r3, [r3, #20]
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	7c12      	ldrb	r2, [r2, #16]
 800e5bc:	f107 0108 	add.w	r1, r7, #8
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	4798      	blx	r3
 800e5c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5c6:	e029      	b.n	800e61c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e5c8:	6839      	ldr	r1, [r7, #0]
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fa42 	bl	800ea54 <USBD_CtlError>
        err++;
 800e5d0:	7afb      	ldrb	r3, [r7, #11]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	72fb      	strb	r3, [r7, #11]
      break;
 800e5d6:	e021      	b.n	800e61c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5de:	699b      	ldr	r3, [r3, #24]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00b      	beq.n	800e5fc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5ea:	699b      	ldr	r3, [r3, #24]
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	7c12      	ldrb	r2, [r2, #16]
 800e5f0:	f107 0108 	add.w	r1, r7, #8
 800e5f4:	4610      	mov	r0, r2
 800e5f6:	4798      	blx	r3
 800e5f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5fa:	e00f      	b.n	800e61c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800e5fc:	6839      	ldr	r1, [r7, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f000 fa28 	bl	800ea54 <USBD_CtlError>
        err++;
 800e604:	7afb      	ldrb	r3, [r7, #11]
 800e606:	3301      	adds	r3, #1
 800e608:	72fb      	strb	r3, [r7, #11]
      break;
 800e60a:	e007      	b.n	800e61c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fa20 	bl	800ea54 <USBD_CtlError>
      err++;
 800e614:	7afb      	ldrb	r3, [r7, #11]
 800e616:	3301      	adds	r3, #1
 800e618:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e61a:	bf00      	nop
    }
    break;
 800e61c:	e037      	b.n	800e68e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	7c1b      	ldrb	r3, [r3, #16]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d109      	bne.n	800e63a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62e:	f107 0208 	add.w	r2, r7, #8
 800e632:	4610      	mov	r0, r2
 800e634:	4798      	blx	r3
 800e636:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e638:	e029      	b.n	800e68e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800e63a:	6839      	ldr	r1, [r7, #0]
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f000 fa09 	bl	800ea54 <USBD_CtlError>
      err++;
 800e642:	7afb      	ldrb	r3, [r7, #11]
 800e644:	3301      	adds	r3, #1
 800e646:	72fb      	strb	r3, [r7, #11]
    break;
 800e648:	e021      	b.n	800e68e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	7c1b      	ldrb	r3, [r3, #16]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10d      	bne.n	800e66e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65a:	f107 0208 	add.w	r2, r7, #8
 800e65e:	4610      	mov	r0, r2
 800e660:	4798      	blx	r3
 800e662:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	3301      	adds	r3, #1
 800e668:	2207      	movs	r2, #7
 800e66a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e66c:	e00f      	b.n	800e68e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800e66e:	6839      	ldr	r1, [r7, #0]
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 f9ef 	bl	800ea54 <USBD_CtlError>
      err++;
 800e676:	7afb      	ldrb	r3, [r7, #11]
 800e678:	3301      	adds	r3, #1
 800e67a:	72fb      	strb	r3, [r7, #11]
    break;
 800e67c:	e007      	b.n	800e68e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800e67e:	6839      	ldr	r1, [r7, #0]
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f9e7 	bl	800ea54 <USBD_CtlError>
    err++;
 800e686:	7afb      	ldrb	r3, [r7, #11]
 800e688:	3301      	adds	r3, #1
 800e68a:	72fb      	strb	r3, [r7, #11]
    break;
 800e68c:	bf00      	nop
  }

  if (err != 0U)
 800e68e:	7afb      	ldrb	r3, [r7, #11]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d11e      	bne.n	800e6d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	88db      	ldrh	r3, [r3, #6]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d016      	beq.n	800e6ca <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800e69c:	893b      	ldrh	r3, [r7, #8]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d00e      	beq.n	800e6c0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	88da      	ldrh	r2, [r3, #6]
 800e6a6:	893b      	ldrh	r3, [r7, #8]
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	bf28      	it	cs
 800e6ac:	4613      	movcs	r3, r2
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e6b2:	893b      	ldrh	r3, [r7, #8]
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	68f9      	ldr	r1, [r7, #12]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fa3c 	bl	800eb36 <USBD_CtlSendData>
 800e6be:	e009      	b.n	800e6d4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e6c0:	6839      	ldr	r1, [r7, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 f9c6 	bl	800ea54 <USBD_CtlError>
 800e6c8:	e004      	b.n	800e6d4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fa8d 	bl	800ebea <USBD_CtlSendStatus>
 800e6d0:	e000      	b.n	800e6d4 <USBD_GetDescriptor+0x2cc>
    return;
 800e6d2:	bf00      	nop
    }
  }
}
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop

0800e6dc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	889b      	ldrh	r3, [r3, #4]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d130      	bne.n	800e750 <USBD_SetAddress+0x74>
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	88db      	ldrh	r3, [r3, #6]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d12c      	bne.n	800e750 <USBD_SetAddress+0x74>
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	885b      	ldrh	r3, [r3, #2]
 800e6fa:	2b7f      	cmp	r3, #127	; 0x7f
 800e6fc:	d828      	bhi.n	800e750 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	885b      	ldrh	r3, [r3, #2]
 800e702:	b2db      	uxtb	r3, r3
 800e704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e708:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e710:	2b03      	cmp	r3, #3
 800e712:	d104      	bne.n	800e71e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e714:	6839      	ldr	r1, [r7, #0]
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f99c 	bl	800ea54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e71c:	e01c      	b.n	800e758 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	7bfa      	ldrb	r2, [r7, #15]
 800e722:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e726:	7bfb      	ldrb	r3, [r7, #15]
 800e728:	4619      	mov	r1, r3
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 ff0a 	bl	800f544 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 fa5a 	bl	800ebea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e736:	7bfb      	ldrb	r3, [r7, #15]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d004      	beq.n	800e746 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2202      	movs	r2, #2
 800e740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e744:	e008      	b.n	800e758 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2201      	movs	r2, #1
 800e74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e74e:	e003      	b.n	800e758 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e750:	6839      	ldr	r1, [r7, #0]
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f97e 	bl	800ea54 <USBD_CtlError>
  }
}
 800e758:	bf00      	nop
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	885b      	ldrh	r3, [r3, #2]
 800e772:	b2da      	uxtb	r2, r3
 800e774:	4b4b      	ldr	r3, [pc, #300]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e778:	4b4a      	ldr	r3, [pc, #296]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d905      	bls.n	800e78c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e780:	6839      	ldr	r1, [r7, #0]
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f000 f966 	bl	800ea54 <USBD_CtlError>
    return USBD_FAIL;
 800e788:	2303      	movs	r3, #3
 800e78a:	e087      	b.n	800e89c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e792:	2b02      	cmp	r3, #2
 800e794:	d002      	beq.n	800e79c <USBD_SetConfig+0x3c>
 800e796:	2b03      	cmp	r3, #3
 800e798:	d025      	beq.n	800e7e6 <USBD_SetConfig+0x86>
 800e79a:	e071      	b.n	800e880 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e79c:	4b41      	ldr	r3, [pc, #260]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d01c      	beq.n	800e7de <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e7a4:	4b3f      	ldr	r3, [pc, #252]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e7ae:	4b3d      	ldr	r3, [pc, #244]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7ff f9a7 	bl	800db08 <USBD_SetClassConfig>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d004      	beq.n	800e7ce <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e7c4:	6839      	ldr	r1, [r7, #0]
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f944 	bl	800ea54 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e7cc:	e065      	b.n	800e89a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 fa0b 	bl	800ebea <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2203      	movs	r2, #3
 800e7d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e7dc:	e05d      	b.n	800e89a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 fa03 	bl	800ebea <USBD_CtlSendStatus>
    break;
 800e7e4:	e059      	b.n	800e89a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e7e6:	4b2f      	ldr	r3, [pc, #188]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d112      	bne.n	800e814 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2202      	movs	r2, #2
 800e7f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800e7f6:	4b2b      	ldr	r3, [pc, #172]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e7f8:	781b      	ldrb	r3, [r3, #0]
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e800:	4b28      	ldr	r3, [pc, #160]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7ff f99a 	bl	800db40 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f000 f9ec 	bl	800ebea <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e812:	e042      	b.n	800e89a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e814:	4b23      	ldr	r3, [pc, #140]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	461a      	mov	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d02a      	beq.n	800e878 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	b2db      	uxtb	r3, r3
 800e828:	4619      	mov	r1, r3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7ff f988 	bl	800db40 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e830:	4b1c      	ldr	r3, [pc, #112]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	461a      	mov	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e83a:	4b1a      	ldr	r3, [pc, #104]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff f961 	bl	800db08 <USBD_SetClassConfig>
 800e846:	4603      	mov	r3, r0
 800e848:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e84a:	7bfb      	ldrb	r3, [r7, #15]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00f      	beq.n	800e870 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e850:	6839      	ldr	r1, [r7, #0]
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f8fe 	bl	800ea54 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	4619      	mov	r1, r3
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7ff f96d 	bl	800db40 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2202      	movs	r2, #2
 800e86a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e86e:	e014      	b.n	800e89a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f000 f9ba 	bl	800ebea <USBD_CtlSendStatus>
    break;
 800e876:	e010      	b.n	800e89a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 f9b6 	bl	800ebea <USBD_CtlSendStatus>
    break;
 800e87e:	e00c      	b.n	800e89a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e880:	6839      	ldr	r1, [r7, #0]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f8e6 	bl	800ea54 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e888:	4b06      	ldr	r3, [pc, #24]	; (800e8a4 <USBD_SetConfig+0x144>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff f956 	bl	800db40 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e894:	2303      	movs	r3, #3
 800e896:	73fb      	strb	r3, [r7, #15]
    break;
 800e898:	bf00      	nop
  }

  return ret;
 800e89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	240002d8 	.word	0x240002d8

0800e8a8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	88db      	ldrh	r3, [r3, #6]
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d004      	beq.n	800e8c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f8c9 	bl	800ea54 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e8c2:	e021      	b.n	800e908 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	db17      	blt.n	800e8fe <USBD_GetConfig+0x56>
 800e8ce:	2b02      	cmp	r3, #2
 800e8d0:	dd02      	ble.n	800e8d8 <USBD_GetConfig+0x30>
 800e8d2:	2b03      	cmp	r3, #3
 800e8d4:	d00b      	beq.n	800e8ee <USBD_GetConfig+0x46>
 800e8d6:	e012      	b.n	800e8fe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f000 f925 	bl	800eb36 <USBD_CtlSendData>
      break;
 800e8ec:	e00c      	b.n	800e908 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f91d 	bl	800eb36 <USBD_CtlSendData>
      break;
 800e8fc:	e004      	b.n	800e908 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800e8fe:	6839      	ldr	r1, [r7, #0]
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f000 f8a7 	bl	800ea54 <USBD_CtlError>
      break;
 800e906:	bf00      	nop
}
 800e908:	bf00      	nop
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e920:	3b01      	subs	r3, #1
 800e922:	2b02      	cmp	r3, #2
 800e924:	d81e      	bhi.n	800e964 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	88db      	ldrh	r3, [r3, #6]
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d004      	beq.n	800e938 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e92e:	6839      	ldr	r1, [r7, #0]
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 f88f 	bl	800ea54 <USBD_CtlError>
      break;
 800e936:	e01a      	b.n	800e96e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e944:	2b00      	cmp	r3, #0
 800e946:	d005      	beq.n	800e954 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	f043 0202 	orr.w	r2, r3, #2
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	330c      	adds	r3, #12
 800e958:	2202      	movs	r2, #2
 800e95a:	4619      	mov	r1, r3
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f8ea 	bl	800eb36 <USBD_CtlSendData>
    break;
 800e962:	e004      	b.n	800e96e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e964:	6839      	ldr	r1, [r7, #0]
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 f874 	bl	800ea54 <USBD_CtlError>
    break;
 800e96c:	bf00      	nop
  }
}
 800e96e:	bf00      	nop
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	885b      	ldrh	r3, [r3, #2]
 800e984:	2b01      	cmp	r3, #1
 800e986:	d106      	bne.n	800e996 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 f92a 	bl	800ebea <USBD_CtlSendStatus>
  }
}
 800e996:	bf00      	nop
 800e998:	3708      	adds	r7, #8
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d80b      	bhi.n	800e9cc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	885b      	ldrh	r3, [r3, #2]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d10c      	bne.n	800e9d6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f910 	bl	800ebea <USBD_CtlSendStatus>
      }
      break;
 800e9ca:	e004      	b.n	800e9d6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f840 	bl	800ea54 <USBD_CtlError>
      break;
 800e9d4:	e000      	b.n	800e9d8 <USBD_ClrFeature+0x3a>
      break;
 800e9d6:	bf00      	nop
  }
}
 800e9d8:	bf00      	nop
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	781a      	ldrb	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	3301      	adds	r3, #1
 800e9fa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	781a      	ldrb	r2, [r3, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	3301      	adds	r3, #1
 800ea08:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f7ff fad3 	bl	800dfb6 <SWAPBYTE>
 800ea10:	4603      	mov	r3, r0
 800ea12:	461a      	mov	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	3301      	adds	r3, #1
 800ea22:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ea24:	68f8      	ldr	r0, [r7, #12]
 800ea26:	f7ff fac6 	bl	800dfb6 <SWAPBYTE>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3301      	adds	r3, #1
 800ea36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f7ff fab9 	bl	800dfb6 <SWAPBYTE>
 800ea44:	4603      	mov	r3, r0
 800ea46:	461a      	mov	r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	80da      	strh	r2, [r3, #6]
}
 800ea4c:	bf00      	nop
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea5e:	2180      	movs	r1, #128	; 0x80
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 fd05 	bl	800f470 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea66:	2100      	movs	r1, #0
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 fd01 	bl	800f470 <USBD_LL_StallEP>
}
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b086      	sub	sp, #24
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	60f8      	str	r0, [r7, #12]
 800ea7e:	60b9      	str	r1, [r7, #8]
 800ea80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea82:	2300      	movs	r3, #0
 800ea84:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d036      	beq.n	800eafa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ea90:	6938      	ldr	r0, [r7, #16]
 800ea92:	f000 f836 	bl	800eb02 <USBD_GetLen>
 800ea96:	4603      	mov	r3, r0
 800ea98:	3301      	adds	r3, #1
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	005b      	lsls	r3, r3, #1
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eaa4:	7dfb      	ldrb	r3, [r7, #23]
 800eaa6:	68ba      	ldr	r2, [r7, #8]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	7812      	ldrb	r2, [r2, #0]
 800eaae:	701a      	strb	r2, [r3, #0]
  idx++;
 800eab0:	7dfb      	ldrb	r3, [r7, #23]
 800eab2:	3301      	adds	r3, #1
 800eab4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	4413      	add	r3, r2
 800eabc:	2203      	movs	r2, #3
 800eabe:	701a      	strb	r2, [r3, #0]
  idx++;
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
 800eac2:	3301      	adds	r3, #1
 800eac4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eac6:	e013      	b.n	800eaf0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eac8:	7dfb      	ldrb	r3, [r7, #23]
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	4413      	add	r3, r2
 800eace:	693a      	ldr	r2, [r7, #16]
 800ead0:	7812      	ldrb	r2, [r2, #0]
 800ead2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	3301      	adds	r3, #1
 800ead8:	613b      	str	r3, [r7, #16]
    idx++;
 800eada:	7dfb      	ldrb	r3, [r7, #23]
 800eadc:	3301      	adds	r3, #1
 800eade:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
 800eae2:	68ba      	ldr	r2, [r7, #8]
 800eae4:	4413      	add	r3, r2
 800eae6:	2200      	movs	r2, #0
 800eae8:	701a      	strb	r2, [r3, #0]
    idx++;
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	3301      	adds	r3, #1
 800eaee:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1e7      	bne.n	800eac8 <USBD_GetString+0x52>
 800eaf8:	e000      	b.n	800eafc <USBD_GetString+0x86>
    return;
 800eafa:	bf00      	nop
  }
}
 800eafc:	3718      	adds	r7, #24
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eb02:	b480      	push	{r7}
 800eb04:	b085      	sub	sp, #20
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb12:	e005      	b.n	800eb20 <USBD_GetLen+0x1e>
  {
    len++;
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	3301      	adds	r3, #1
 800eb18:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1f5      	bne.n	800eb14 <USBD_GetLen+0x12>
  }

  return len;
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3714      	adds	r7, #20
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b084      	sub	sp, #16
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2202      	movs	r2, #2
 800eb46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	687a      	ldr	r2, [r7, #4]
 800eb54:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	68ba      	ldr	r2, [r7, #8]
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	68f8      	ldr	r0, [r7, #12]
 800eb5e:	f000 fd10 	bl	800f582 <USBD_LL_Transmit>

  return USBD_OK;
 800eb62:	2300      	movs	r3, #0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}

0800eb6c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68ba      	ldr	r2, [r7, #8]
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f000 fcff 	bl	800f582 <USBD_LL_Transmit>

  return USBD_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3710      	adds	r7, #16
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb8e:	b580      	push	{r7, lr}
 800eb90:	b084      	sub	sp, #16
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	60f8      	str	r0, [r7, #12]
 800eb96:	60b9      	str	r1, [r7, #8]
 800eb98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2203      	movs	r2, #3
 800eb9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f000 fd03 	bl	800f5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	68ba      	ldr	r2, [r7, #8]
 800ebd8:	2100      	movs	r1, #0
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 fcf2 	bl	800f5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b082      	sub	sp, #8
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2204      	movs	r2, #4
 800ebf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2100      	movs	r1, #0
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 fcbe 	bl	800f582 <USBD_LL_Transmit>

  return USBD_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2205      	movs	r2, #5
 800ec1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec20:	2300      	movs	r3, #0
 800ec22:	2200      	movs	r2, #0
 800ec24:	2100      	movs	r1, #0
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 fccc 	bl	800f5c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
	...

0800ec38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4913      	ldr	r1, [pc, #76]	; (800ec8c <MX_USB_DEVICE_Init+0x54>)
 800ec40:	4813      	ldr	r0, [pc, #76]	; (800ec90 <MX_USB_DEVICE_Init+0x58>)
 800ec42:	f7fe fef3 	bl	800da2c <USBD_Init>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ec4c:	f7f2 f9e0 	bl	8001010 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ec50:	4910      	ldr	r1, [pc, #64]	; (800ec94 <MX_USB_DEVICE_Init+0x5c>)
 800ec52:	480f      	ldr	r0, [pc, #60]	; (800ec90 <MX_USB_DEVICE_Init+0x58>)
 800ec54:	f7fe ff20 	bl	800da98 <USBD_RegisterClass>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d001      	beq.n	800ec62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ec5e:	f7f2 f9d7 	bl	8001010 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ec62:	490d      	ldr	r1, [pc, #52]	; (800ec98 <MX_USB_DEVICE_Init+0x60>)
 800ec64:	480a      	ldr	r0, [pc, #40]	; (800ec90 <MX_USB_DEVICE_Init+0x58>)
 800ec66:	f7fe fe45 	bl	800d8f4 <USBD_CDC_RegisterInterface>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d001      	beq.n	800ec74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ec70:	f7f2 f9ce 	bl	8001010 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ec74:	4806      	ldr	r0, [pc, #24]	; (800ec90 <MX_USB_DEVICE_Init+0x58>)
 800ec76:	f7fe ff30 	bl	800dada <USBD_Start>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d001      	beq.n	800ec84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ec80:	f7f2 f9c6 	bl	8001010 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ec84:	f7f8 fe26 	bl	80078d4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ec88:	bf00      	nop
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	2400013c 	.word	0x2400013c
 800ec90:	24002578 	.word	0x24002578
 800ec94:	2400001c 	.word	0x2400001c
 800ec98:	24000120 	.word	0x24000120

0800ec9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eca0:	2200      	movs	r2, #0
 800eca2:	4905      	ldr	r1, [pc, #20]	; (800ecb8 <CDC_Init_FS+0x1c>)
 800eca4:	4805      	ldr	r0, [pc, #20]	; (800ecbc <CDC_Init_FS+0x20>)
 800eca6:	f7fe fe3a 	bl	800d91e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ecaa:	4905      	ldr	r1, [pc, #20]	; (800ecc0 <CDC_Init_FS+0x24>)
 800ecac:	4803      	ldr	r0, [pc, #12]	; (800ecbc <CDC_Init_FS+0x20>)
 800ecae:	f7fe fe4f 	bl	800d950 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ecb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	24003048 	.word	0x24003048
 800ecbc:	24002578 	.word	0x24002578
 800ecc0:	24002848 	.word	0x24002848

0800ecc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ecc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	4603      	mov	r3, r0
 800ecdc:	6039      	str	r1, [r7, #0]
 800ecde:	71fb      	strb	r3, [r7, #7]
 800ece0:	4613      	mov	r3, r2
 800ece2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	static uint8_t lineCoding[7] //
	// 115200bps, 1stop, no parity, 8bit
	= {0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08};
  switch(cmd)
 800ece4:	79fb      	ldrb	r3, [r7, #7]
 800ece6:	2b23      	cmp	r3, #35	; 0x23
 800ece8:	d85c      	bhi.n	800eda4 <CDC_Control_FS+0xd0>
 800ecea:	a201      	add	r2, pc, #4	; (adr r2, 800ecf0 <CDC_Control_FS+0x1c>)
 800ecec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf0:	0800eda5 	.word	0x0800eda5
 800ecf4:	0800eda5 	.word	0x0800eda5
 800ecf8:	0800eda5 	.word	0x0800eda5
 800ecfc:	0800eda5 	.word	0x0800eda5
 800ed00:	0800eda5 	.word	0x0800eda5
 800ed04:	0800eda5 	.word	0x0800eda5
 800ed08:	0800eda5 	.word	0x0800eda5
 800ed0c:	0800eda5 	.word	0x0800eda5
 800ed10:	0800eda5 	.word	0x0800eda5
 800ed14:	0800eda5 	.word	0x0800eda5
 800ed18:	0800eda5 	.word	0x0800eda5
 800ed1c:	0800eda5 	.word	0x0800eda5
 800ed20:	0800eda5 	.word	0x0800eda5
 800ed24:	0800eda5 	.word	0x0800eda5
 800ed28:	0800eda5 	.word	0x0800eda5
 800ed2c:	0800eda5 	.word	0x0800eda5
 800ed30:	0800eda5 	.word	0x0800eda5
 800ed34:	0800eda5 	.word	0x0800eda5
 800ed38:	0800eda5 	.word	0x0800eda5
 800ed3c:	0800eda5 	.word	0x0800eda5
 800ed40:	0800eda5 	.word	0x0800eda5
 800ed44:	0800eda5 	.word	0x0800eda5
 800ed48:	0800eda5 	.word	0x0800eda5
 800ed4c:	0800eda5 	.word	0x0800eda5
 800ed50:	0800eda5 	.word	0x0800eda5
 800ed54:	0800eda5 	.word	0x0800eda5
 800ed58:	0800eda5 	.word	0x0800eda5
 800ed5c:	0800eda5 	.word	0x0800eda5
 800ed60:	0800eda5 	.word	0x0800eda5
 800ed64:	0800eda5 	.word	0x0800eda5
 800ed68:	0800eda5 	.word	0x0800eda5
 800ed6c:	0800eda5 	.word	0x0800eda5
 800ed70:	0800ed81 	.word	0x0800ed81
 800ed74:	0800ed93 	.word	0x0800ed93
 800ed78:	0800eda5 	.word	0x0800eda5
 800ed7c:	0800eda5 	.word	0x0800eda5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) );
 800ed80:	4b0c      	ldr	r3, [pc, #48]	; (800edb4 <CDC_Control_FS+0xe0>)
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	6810      	ldr	r0, [r2, #0]
 800ed86:	6018      	str	r0, [r3, #0]
 800ed88:	8891      	ldrh	r1, [r2, #4]
 800ed8a:	7992      	ldrb	r2, [r2, #6]
 800ed8c:	8099      	strh	r1, [r3, #4]
 800ed8e:	719a      	strb	r2, [r3, #6]
    break;
 800ed90:	e009      	b.n	800eda6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) );
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	4a07      	ldr	r2, [pc, #28]	; (800edb4 <CDC_Control_FS+0xe0>)
 800ed96:	6810      	ldr	r0, [r2, #0]
 800ed98:	6018      	str	r0, [r3, #0]
 800ed9a:	8891      	ldrh	r1, [r2, #4]
 800ed9c:	7992      	ldrb	r2, [r2, #6]
 800ed9e:	8099      	strh	r1, [r3, #4]
 800eda0:	719a      	strb	r2, [r3, #6]
    break;
 800eda2:	e000      	b.n	800eda6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eda4:	bf00      	nop
  }

  return (USBD_OK);
 800eda6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr
 800edb4:	24000134 	.word	0x24000134

0800edb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800edc2:	6879      	ldr	r1, [r7, #4]
 800edc4:	4805      	ldr	r0, [pc, #20]	; (800eddc <CDC_Receive_FS+0x24>)
 800edc6:	f7fe fdc3 	bl	800d950 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800edca:	4804      	ldr	r0, [pc, #16]	; (800eddc <CDC_Receive_FS+0x24>)
 800edcc:	f7fe fe04 	bl	800d9d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800edd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	24002578 	.word	0x24002578

0800ede0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	460b      	mov	r3, r1
 800edea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800edf0:	4b0d      	ldr	r3, [pc, #52]	; (800ee28 <CDC_Transmit_FS+0x48>)
 800edf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edf6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee02:	2301      	movs	r3, #1
 800ee04:	e00b      	b.n	800ee1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee06:	887b      	ldrh	r3, [r7, #2]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	6879      	ldr	r1, [r7, #4]
 800ee0c:	4806      	ldr	r0, [pc, #24]	; (800ee28 <CDC_Transmit_FS+0x48>)
 800ee0e:	f7fe fd86 	bl	800d91e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee12:	4805      	ldr	r0, [pc, #20]	; (800ee28 <CDC_Transmit_FS+0x48>)
 800ee14:	f7fe fdb0 	bl	800d978 <USBD_CDC_TransmitPacket>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3710      	adds	r7, #16
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	24002578 	.word	0x24002578

0800ee2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee2c:	b480      	push	{r7}
 800ee2e:	b087      	sub	sp, #28
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	4613      	mov	r3, r2
 800ee38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ee3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	371c      	adds	r7, #28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
	...

0800ee50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	4603      	mov	r3, r0
 800ee58:	6039      	str	r1, [r7, #0]
 800ee5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2212      	movs	r2, #18
 800ee60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ee62:	4b03      	ldr	r3, [pc, #12]	; (800ee70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	370c      	adds	r7, #12
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6e:	4770      	bx	lr
 800ee70:	24000158 	.word	0x24000158

0800ee74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b083      	sub	sp, #12
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	6039      	str	r1, [r7, #0]
 800ee7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	2204      	movs	r2, #4
 800ee84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ee86:	4b03      	ldr	r3, [pc, #12]	; (800ee94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr
 800ee94:	2400016c 	.word	0x2400016c

0800ee98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4603      	mov	r3, r0
 800eea0:	6039      	str	r1, [r7, #0]
 800eea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d105      	bne.n	800eeb6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	4907      	ldr	r1, [pc, #28]	; (800eecc <USBD_FS_ProductStrDescriptor+0x34>)
 800eeae:	4808      	ldr	r0, [pc, #32]	; (800eed0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eeb0:	f7ff fde1 	bl	800ea76 <USBD_GetString>
 800eeb4:	e004      	b.n	800eec0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	4904      	ldr	r1, [pc, #16]	; (800eecc <USBD_FS_ProductStrDescriptor+0x34>)
 800eeba:	4805      	ldr	r0, [pc, #20]	; (800eed0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eebc:	f7ff fddb 	bl	800ea76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eec0:	4b02      	ldr	r3, [pc, #8]	; (800eecc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	24003848 	.word	0x24003848
 800eed0:	0800ff98 	.word	0x0800ff98

0800eed4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	6039      	str	r1, [r7, #0]
 800eede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	4904      	ldr	r1, [pc, #16]	; (800eef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eee4:	4804      	ldr	r0, [pc, #16]	; (800eef8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eee6:	f7ff fdc6 	bl	800ea76 <USBD_GetString>
  return USBD_StrDesc;
 800eeea:	4b02      	ldr	r3, [pc, #8]	; (800eef4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}
 800eef4:	24003848 	.word	0x24003848
 800eef8:	0800ffb0 	.word	0x0800ffb0

0800eefc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	4603      	mov	r3, r0
 800ef04:	6039      	str	r1, [r7, #0]
 800ef06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	221a      	movs	r2, #26
 800ef0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef0e:	f000 f843 	bl	800ef98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef12:	4b02      	ldr	r3, [pc, #8]	; (800ef1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3708      	adds	r7, #8
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	24000170 	.word	0x24000170

0800ef20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	4603      	mov	r3, r0
 800ef28:	6039      	str	r1, [r7, #0]
 800ef2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef2c:	79fb      	ldrb	r3, [r7, #7]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	4907      	ldr	r1, [pc, #28]	; (800ef54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef36:	4808      	ldr	r0, [pc, #32]	; (800ef58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef38:	f7ff fd9d 	bl	800ea76 <USBD_GetString>
 800ef3c:	e004      	b.n	800ef48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	4904      	ldr	r1, [pc, #16]	; (800ef54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ef42:	4805      	ldr	r0, [pc, #20]	; (800ef58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ef44:	f7ff fd97 	bl	800ea76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef48:	4b02      	ldr	r3, [pc, #8]	; (800ef54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	24003848 	.word	0x24003848
 800ef58:	0800ffc4 	.word	0x0800ffc4

0800ef5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	6039      	str	r1, [r7, #0]
 800ef66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef68:	79fb      	ldrb	r3, [r7, #7]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d105      	bne.n	800ef7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	4907      	ldr	r1, [pc, #28]	; (800ef90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef72:	4808      	ldr	r0, [pc, #32]	; (800ef94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef74:	f7ff fd7f 	bl	800ea76 <USBD_GetString>
 800ef78:	e004      	b.n	800ef84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ef7a:	683a      	ldr	r2, [r7, #0]
 800ef7c:	4904      	ldr	r1, [pc, #16]	; (800ef90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ef7e:	4805      	ldr	r0, [pc, #20]	; (800ef94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ef80:	f7ff fd79 	bl	800ea76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef84:	4b02      	ldr	r3, [pc, #8]	; (800ef90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	bf00      	nop
 800ef90:	24003848 	.word	0x24003848
 800ef94:	0800ffd0 	.word	0x0800ffd0

0800ef98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ef9e:	4b0f      	ldr	r3, [pc, #60]	; (800efdc <Get_SerialNum+0x44>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800efa4:	4b0e      	ldr	r3, [pc, #56]	; (800efe0 <Get_SerialNum+0x48>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800efaa:	4b0e      	ldr	r3, [pc, #56]	; (800efe4 <Get_SerialNum+0x4c>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	4413      	add	r3, r2
 800efb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d009      	beq.n	800efd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800efbe:	2208      	movs	r2, #8
 800efc0:	4909      	ldr	r1, [pc, #36]	; (800efe8 <Get_SerialNum+0x50>)
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f000 f814 	bl	800eff0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800efc8:	2204      	movs	r2, #4
 800efca:	4908      	ldr	r1, [pc, #32]	; (800efec <Get_SerialNum+0x54>)
 800efcc:	68b8      	ldr	r0, [r7, #8]
 800efce:	f000 f80f 	bl	800eff0 <IntToUnicode>
  }
}
 800efd2:	bf00      	nop
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	1ff1e800 	.word	0x1ff1e800
 800efe0:	1ff1e804 	.word	0x1ff1e804
 800efe4:	1ff1e808 	.word	0x1ff1e808
 800efe8:	24000172 	.word	0x24000172
 800efec:	24000182 	.word	0x24000182

0800eff0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b087      	sub	sp, #28
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	4613      	mov	r3, r2
 800effc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f002:	2300      	movs	r3, #0
 800f004:	75fb      	strb	r3, [r7, #23]
 800f006:	e027      	b.n	800f058 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	0f1b      	lsrs	r3, r3, #28
 800f00c:	2b09      	cmp	r3, #9
 800f00e:	d80b      	bhi.n	800f028 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	0f1b      	lsrs	r3, r3, #28
 800f014:	b2da      	uxtb	r2, r3
 800f016:	7dfb      	ldrb	r3, [r7, #23]
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	4619      	mov	r1, r3
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	440b      	add	r3, r1
 800f020:	3230      	adds	r2, #48	; 0x30
 800f022:	b2d2      	uxtb	r2, r2
 800f024:	701a      	strb	r2, [r3, #0]
 800f026:	e00a      	b.n	800f03e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	0f1b      	lsrs	r3, r3, #28
 800f02c:	b2da      	uxtb	r2, r3
 800f02e:	7dfb      	ldrb	r3, [r7, #23]
 800f030:	005b      	lsls	r3, r3, #1
 800f032:	4619      	mov	r1, r3
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	440b      	add	r3, r1
 800f038:	3237      	adds	r2, #55	; 0x37
 800f03a:	b2d2      	uxtb	r2, r2
 800f03c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	011b      	lsls	r3, r3, #4
 800f042:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	3301      	adds	r3, #1
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	4413      	add	r3, r2
 800f04e:	2200      	movs	r2, #0
 800f050:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f052:	7dfb      	ldrb	r3, [r7, #23]
 800f054:	3301      	adds	r3, #1
 800f056:	75fb      	strb	r3, [r7, #23]
 800f058:	7dfa      	ldrb	r2, [r7, #23]
 800f05a:	79fb      	ldrb	r3, [r7, #7]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d3d3      	bcc.n	800f008 <IntToUnicode+0x18>
  }
}
 800f060:	bf00      	nop
 800f062:	371c      	adds	r7, #28
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b08a      	sub	sp, #40	; 0x28
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f074:	f107 0314 	add.w	r3, r7, #20
 800f078:	2200      	movs	r2, #0
 800f07a:	601a      	str	r2, [r3, #0]
 800f07c:	605a      	str	r2, [r3, #4]
 800f07e:	609a      	str	r2, [r3, #8]
 800f080:	60da      	str	r2, [r3, #12]
 800f082:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a25      	ldr	r2, [pc, #148]	; (800f120 <HAL_PCD_MspInit+0xb4>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d143      	bne.n	800f116 <HAL_PCD_MspInit+0xaa>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f08e:	4b25      	ldr	r3, [pc, #148]	; (800f124 <HAL_PCD_MspInit+0xb8>)
 800f090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f094:	4a23      	ldr	r2, [pc, #140]	; (800f124 <HAL_PCD_MspInit+0xb8>)
 800f096:	f043 0301 	orr.w	r3, r3, #1
 800f09a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f09e:	4b21      	ldr	r3, [pc, #132]	; (800f124 <HAL_PCD_MspInit+0xb8>)
 800f0a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f0a4:	f003 0301 	and.w	r3, r3, #1
 800f0a8:	613b      	str	r3, [r7, #16]
 800f0aa:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800f0ac:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800f0b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0b2:	2302      	movs	r3, #2
 800f0b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800f0be:	230a      	movs	r3, #10
 800f0c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0c2:	f107 0314 	add.w	r3, r7, #20
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	4817      	ldr	r0, [pc, #92]	; (800f128 <HAL_PCD_MspInit+0xbc>)
 800f0ca:	f7f6 ffef 	bl	80060ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800f0ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f0dc:	f107 0314 	add.w	r3, r7, #20
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	4811      	ldr	r0, [pc, #68]	; (800f128 <HAL_PCD_MspInit+0xbc>)
 800f0e4:	f7f6 ffe2 	bl	80060ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f0e8:	4b0e      	ldr	r3, [pc, #56]	; (800f124 <HAL_PCD_MspInit+0xb8>)
 800f0ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f0ee:	4a0d      	ldr	r2, [pc, #52]	; (800f124 <HAL_PCD_MspInit+0xb8>)
 800f0f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f0f8:	4b0a      	ldr	r3, [pc, #40]	; (800f124 <HAL_PCD_MspInit+0xb8>)
 800f0fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f0fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f102:	60fb      	str	r3, [r7, #12]
 800f104:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f106:	2200      	movs	r2, #0
 800f108:	2100      	movs	r1, #0
 800f10a:	2065      	movs	r0, #101	; 0x65
 800f10c:	f7f4 faab 	bl	8003666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f110:	2065      	movs	r0, #101	; 0x65
 800f112:	f7f4 fac2 	bl	800369a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f116:	bf00      	nop
 800f118:	3728      	adds	r7, #40	; 0x28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	40080000 	.word	0x40080000
 800f124:	58024400 	.word	0x58024400
 800f128:	58020000 	.word	0x58020000

0800f12c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f140:	4619      	mov	r1, r3
 800f142:	4610      	mov	r0, r2
 800f144:	f7fe fd14 	bl	800db70 <USBD_LL_SetupStage>
}
 800f148:	bf00      	nop
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	460b      	mov	r3, r1
 800f15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f162:	78fa      	ldrb	r2, [r7, #3]
 800f164:	6879      	ldr	r1, [r7, #4]
 800f166:	4613      	mov	r3, r2
 800f168:	00db      	lsls	r3, r3, #3
 800f16a:	1a9b      	subs	r3, r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	440b      	add	r3, r1
 800f170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	78fb      	ldrb	r3, [r7, #3]
 800f178:	4619      	mov	r1, r3
 800f17a:	f7fe fd4c 	bl	800dc16 <USBD_LL_DataOutStage>
}
 800f17e:	bf00      	nop
 800f180:	3708      	adds	r7, #8
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b082      	sub	sp, #8
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
 800f18e:	460b      	mov	r3, r1
 800f190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800f198:	78fa      	ldrb	r2, [r7, #3]
 800f19a:	6879      	ldr	r1, [r7, #4]
 800f19c:	4613      	mov	r3, r2
 800f19e:	00db      	lsls	r3, r3, #3
 800f1a0:	1a9b      	subs	r3, r3, r2
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	440b      	add	r3, r1
 800f1a6:	3348      	adds	r3, #72	; 0x48
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	78fb      	ldrb	r3, [r7, #3]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	f7fe fd95 	bl	800dcdc <USBD_LL_DataInStage>
}
 800f1b2:	bf00      	nop
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b082      	sub	sp, #8
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fe fe99 	bl	800df00 <USBD_LL_SOF>
}
 800f1ce:	bf00      	nop
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b084      	sub	sp, #16
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d102      	bne.n	800f1f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	73fb      	strb	r3, [r7, #15]
 800f1ee:	e008      	b.n	800f202 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	2b02      	cmp	r3, #2
 800f1f6:	d102      	bne.n	800f1fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	73fb      	strb	r3, [r7, #15]
 800f1fc:	e001      	b.n	800f202 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f1fe:	f7f1 ff07 	bl	8001010 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f208:	7bfa      	ldrb	r2, [r7, #15]
 800f20a:	4611      	mov	r1, r2
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fe fe3c 	bl	800de8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fe fdf5 	bl	800de08 <USBD_LL_Reset>
}
 800f21e:	bf00      	nop
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
	...

0800f228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe fe37 	bl	800deaa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	6812      	ldr	r2, [r2, #0]
 800f24a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f24e:	f043 0301 	orr.w	r3, r3, #1
 800f252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d005      	beq.n	800f268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f25c:	4b04      	ldr	r3, [pc, #16]	; (800f270 <HAL_PCD_SuspendCallback+0x48>)
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	4a03      	ldr	r2, [pc, #12]	; (800f270 <HAL_PCD_SuspendCallback+0x48>)
 800f262:	f043 0306 	orr.w	r3, r3, #6
 800f266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f268:	bf00      	nop
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	e000ed00 	.word	0xe000ed00

0800f274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f282:	4618      	mov	r0, r3
 800f284:	f7fe fe26 	bl	800ded4 <USBD_LL_Resume>
}
 800f288:	bf00      	nop
 800f28a:	3708      	adds	r7, #8
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}

0800f290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2a2:	78fa      	ldrb	r2, [r7, #3]
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fe fe51 	bl	800df4e <USBD_LL_IsoOUTIncomplete>
}
 800f2ac:	bf00      	nop
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2c6:	78fa      	ldrb	r2, [r7, #3]
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fe fe32 	bl	800df34 <USBD_LL_IsoINIncomplete>
}
 800f2d0:	bf00      	nop
 800f2d2:	3708      	adds	r7, #8
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}

0800f2d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe fe3e 	bl	800df68 <USBD_LL_DevConnected>
}
 800f2ec:	bf00      	nop
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800f302:	4618      	mov	r0, r3
 800f304:	f7fe fe3b 	bl	800df7e <USBD_LL_DevDisconnected>
}
 800f308:	bf00      	nop
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d13e      	bne.n	800f39e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f320:	4a21      	ldr	r2, [pc, #132]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4a1f      	ldr	r2, [pc, #124]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f32c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f330:	4b1d      	ldr	r3, [pc, #116]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f332:	4a1e      	ldr	r2, [pc, #120]	; (800f3ac <USBD_LL_Init+0x9c>)
 800f334:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f336:	4b1c      	ldr	r3, [pc, #112]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f338:	2209      	movs	r2, #9
 800f33a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f33c:	4b1a      	ldr	r3, [pc, #104]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f33e:	2202      	movs	r2, #2
 800f340:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f342:	4b19      	ldr	r3, [pc, #100]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f344:	2200      	movs	r2, #0
 800f346:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f348:	4b17      	ldr	r3, [pc, #92]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f34a:	2202      	movs	r2, #2
 800f34c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f34e:	4b16      	ldr	r3, [pc, #88]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f350:	2201      	movs	r2, #1
 800f352:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f354:	4b14      	ldr	r3, [pc, #80]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f356:	2200      	movs	r2, #0
 800f358:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f35a:	4b13      	ldr	r3, [pc, #76]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800f360:	4b11      	ldr	r3, [pc, #68]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f362:	2201      	movs	r2, #1
 800f364:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f366:	4b10      	ldr	r3, [pc, #64]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f368:	2201      	movs	r2, #1
 800f36a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f36c:	4b0e      	ldr	r3, [pc, #56]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f36e:	2200      	movs	r2, #0
 800f370:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f372:	480d      	ldr	r0, [pc, #52]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f374:	f7f7 f898 	bl	80064a8 <HAL_PCD_Init>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d001      	beq.n	800f382 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f37e:	f7f1 fe47 	bl	8001010 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f382:	2180      	movs	r1, #128	; 0x80
 800f384:	4808      	ldr	r0, [pc, #32]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f386:	f7f8 fa2a 	bl	80077de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f38a:	2240      	movs	r2, #64	; 0x40
 800f38c:	2100      	movs	r1, #0
 800f38e:	4806      	ldr	r0, [pc, #24]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f390:	f7f8 f9de 	bl	8007750 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f394:	2280      	movs	r2, #128	; 0x80
 800f396:	2101      	movs	r1, #1
 800f398:	4803      	ldr	r0, [pc, #12]	; (800f3a8 <USBD_LL_Init+0x98>)
 800f39a:	f7f8 f9d9 	bl	8007750 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3708      	adds	r7, #8
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	24003a48 	.word	0x24003a48
 800f3ac:	40080000 	.word	0x40080000

0800f3b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b084      	sub	sp, #16
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7f7 f992 	bl	80066f0 <HAL_PCD_Start>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3d0:	7bfb      	ldrb	r3, [r7, #15]
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f000 f92a 	bl	800f62c <USBD_Get_USB_Status>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	4608      	mov	r0, r1
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	70fb      	strb	r3, [r7, #3]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	70bb      	strb	r3, [r7, #2]
 800f3fc:	4613      	mov	r3, r2
 800f3fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f40e:	78bb      	ldrb	r3, [r7, #2]
 800f410:	883a      	ldrh	r2, [r7, #0]
 800f412:	78f9      	ldrb	r1, [r7, #3]
 800f414:	f7f7 fda3 	bl	8006f5e <HAL_PCD_EP_Open>
 800f418:	4603      	mov	r3, r0
 800f41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f41c:	7bfb      	ldrb	r3, [r7, #15]
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 f904 	bl	800f62c <USBD_Get_USB_Status>
 800f424:	4603      	mov	r3, r0
 800f426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f428:	7bbb      	ldrb	r3, [r7, #14]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b084      	sub	sp, #16
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
 800f43a:	460b      	mov	r3, r1
 800f43c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f43e:	2300      	movs	r3, #0
 800f440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f44c:	78fa      	ldrb	r2, [r7, #3]
 800f44e:	4611      	mov	r1, r2
 800f450:	4618      	mov	r0, r3
 800f452:	f7f7 fdec 	bl	800702e <HAL_PCD_EP_Close>
 800f456:	4603      	mov	r3, r0
 800f458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f45a:	7bfb      	ldrb	r3, [r7, #15]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f000 f8e5 	bl	800f62c <USBD_Get_USB_Status>
 800f462:	4603      	mov	r3, r0
 800f464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f466:	7bbb      	ldrb	r3, [r7, #14]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3710      	adds	r7, #16
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	460b      	mov	r3, r1
 800f47a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f480:	2300      	movs	r3, #0
 800f482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f48a:	78fa      	ldrb	r2, [r7, #3]
 800f48c:	4611      	mov	r1, r2
 800f48e:	4618      	mov	r0, r3
 800f490:	f7f7 fec4 	bl	800721c <HAL_PCD_EP_SetStall>
 800f494:	4603      	mov	r3, r0
 800f496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f498:	7bfb      	ldrb	r3, [r7, #15]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f000 f8c6 	bl	800f62c <USBD_Get_USB_Status>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b084      	sub	sp, #16
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4c8:	78fa      	ldrb	r2, [r7, #3]
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7f7 ff09 	bl	80072e4 <HAL_PCD_EP_ClrStall>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4d6:	7bfb      	ldrb	r3, [r7, #15]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f000 f8a7 	bl	800f62c <USBD_Get_USB_Status>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f4fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f504:	2b00      	cmp	r3, #0
 800f506:	da0b      	bge.n	800f520 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f508:	78fb      	ldrb	r3, [r7, #3]
 800f50a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f50e:	68f9      	ldr	r1, [r7, #12]
 800f510:	4613      	mov	r3, r2
 800f512:	00db      	lsls	r3, r3, #3
 800f514:	1a9b      	subs	r3, r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	440b      	add	r3, r1
 800f51a:	333e      	adds	r3, #62	; 0x3e
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	e00b      	b.n	800f538 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f520:	78fb      	ldrb	r3, [r7, #3]
 800f522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f526:	68f9      	ldr	r1, [r7, #12]
 800f528:	4613      	mov	r3, r2
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	1a9b      	subs	r3, r3, r2
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	440b      	add	r3, r1
 800f532:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f536:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3714      	adds	r7, #20
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f550:	2300      	movs	r3, #0
 800f552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f55e:	78fa      	ldrb	r2, [r7, #3]
 800f560:	4611      	mov	r1, r2
 800f562:	4618      	mov	r0, r3
 800f564:	f7f7 fcd6 	bl	8006f14 <HAL_PCD_SetAddress>
 800f568:	4603      	mov	r3, r0
 800f56a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f56c:	7bfb      	ldrb	r3, [r7, #15]
 800f56e:	4618      	mov	r0, r3
 800f570:	f000 f85c 	bl	800f62c <USBD_Get_USB_Status>
 800f574:	4603      	mov	r3, r0
 800f576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f578:	7bbb      	ldrb	r3, [r7, #14]
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b086      	sub	sp, #24
 800f586:	af00      	add	r7, sp, #0
 800f588:	60f8      	str	r0, [r7, #12]
 800f58a:	607a      	str	r2, [r7, #4]
 800f58c:	603b      	str	r3, [r7, #0]
 800f58e:	460b      	mov	r3, r1
 800f590:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f592:	2300      	movs	r3, #0
 800f594:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f596:	2300      	movs	r3, #0
 800f598:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f5a0:	7af9      	ldrb	r1, [r7, #11]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	f7f7 fdef 	bl	8007188 <HAL_PCD_EP_Transmit>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5ae:	7dfb      	ldrb	r3, [r7, #23]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f000 f83b 	bl	800f62c <USBD_Get_USB_Status>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f5ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3718      	adds	r7, #24
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	607a      	str	r2, [r7, #4]
 800f5ce:	603b      	str	r3, [r7, #0]
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f5e2:	7af9      	ldrb	r1, [r7, #11]
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	f7f7 fd6b 	bl	80070c2 <HAL_PCD_EP_Receive>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5f0:	7dfb      	ldrb	r3, [r7, #23]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f000 f81a 	bl	800f62c <USBD_Get_USB_Status>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f5fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3718      	adds	r7, #24
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f606:	b580      	push	{r7, lr}
 800f608:	b082      	sub	sp, #8
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	6078      	str	r0, [r7, #4]
 800f60e:	460b      	mov	r3, r1
 800f610:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f618:	78fa      	ldrb	r2, [r7, #3]
 800f61a:	4611      	mov	r1, r2
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7f7 fd9b 	bl	8007158 <HAL_PCD_EP_GetRxCount>
 800f622:	4603      	mov	r3, r0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	4603      	mov	r3, r0
 800f634:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f636:	2300      	movs	r3, #0
 800f638:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	2b03      	cmp	r3, #3
 800f63e:	d817      	bhi.n	800f670 <USBD_Get_USB_Status+0x44>
 800f640:	a201      	add	r2, pc, #4	; (adr r2, 800f648 <USBD_Get_USB_Status+0x1c>)
 800f642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f646:	bf00      	nop
 800f648:	0800f659 	.word	0x0800f659
 800f64c:	0800f65f 	.word	0x0800f65f
 800f650:	0800f665 	.word	0x0800f665
 800f654:	0800f66b 	.word	0x0800f66b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f658:	2300      	movs	r3, #0
 800f65a:	73fb      	strb	r3, [r7, #15]
    break;
 800f65c:	e00b      	b.n	800f676 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f65e:	2303      	movs	r3, #3
 800f660:	73fb      	strb	r3, [r7, #15]
    break;
 800f662:	e008      	b.n	800f676 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f664:	2301      	movs	r3, #1
 800f666:	73fb      	strb	r3, [r7, #15]
    break;
 800f668:	e005      	b.n	800f676 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f66a:	2303      	movs	r3, #3
 800f66c:	73fb      	strb	r3, [r7, #15]
    break;
 800f66e:	e002      	b.n	800f676 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f670:	2303      	movs	r3, #3
 800f672:	73fb      	strb	r3, [r7, #15]
    break;
 800f674:	bf00      	nop
  }
  return usb_status;
 800f676:	7bfb      	ldrb	r3, [r7, #15]
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3714      	adds	r7, #20
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <__errno>:
 800f684:	4b01      	ldr	r3, [pc, #4]	; (800f68c <__errno+0x8>)
 800f686:	6818      	ldr	r0, [r3, #0]
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	2400018c 	.word	0x2400018c

0800f690 <__libc_init_array>:
 800f690:	b570      	push	{r4, r5, r6, lr}
 800f692:	4e0d      	ldr	r6, [pc, #52]	; (800f6c8 <__libc_init_array+0x38>)
 800f694:	4c0d      	ldr	r4, [pc, #52]	; (800f6cc <__libc_init_array+0x3c>)
 800f696:	1ba4      	subs	r4, r4, r6
 800f698:	10a4      	asrs	r4, r4, #2
 800f69a:	2500      	movs	r5, #0
 800f69c:	42a5      	cmp	r5, r4
 800f69e:	d109      	bne.n	800f6b4 <__libc_init_array+0x24>
 800f6a0:	4e0b      	ldr	r6, [pc, #44]	; (800f6d0 <__libc_init_array+0x40>)
 800f6a2:	4c0c      	ldr	r4, [pc, #48]	; (800f6d4 <__libc_init_array+0x44>)
 800f6a4:	f000 fc36 	bl	800ff14 <_init>
 800f6a8:	1ba4      	subs	r4, r4, r6
 800f6aa:	10a4      	asrs	r4, r4, #2
 800f6ac:	2500      	movs	r5, #0
 800f6ae:	42a5      	cmp	r5, r4
 800f6b0:	d105      	bne.n	800f6be <__libc_init_array+0x2e>
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f6b8:	4798      	blx	r3
 800f6ba:	3501      	adds	r5, #1
 800f6bc:	e7ee      	b.n	800f69c <__libc_init_array+0xc>
 800f6be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f6c2:	4798      	blx	r3
 800f6c4:	3501      	adds	r5, #1
 800f6c6:	e7f2      	b.n	800f6ae <__libc_init_array+0x1e>
 800f6c8:	0801004c 	.word	0x0801004c
 800f6cc:	0801004c 	.word	0x0801004c
 800f6d0:	0801004c 	.word	0x0801004c
 800f6d4:	08010050 	.word	0x08010050

0800f6d8 <malloc>:
 800f6d8:	4b02      	ldr	r3, [pc, #8]	; (800f6e4 <malloc+0xc>)
 800f6da:	4601      	mov	r1, r0
 800f6dc:	6818      	ldr	r0, [r3, #0]
 800f6de:	f000 b861 	b.w	800f7a4 <_malloc_r>
 800f6e2:	bf00      	nop
 800f6e4:	2400018c 	.word	0x2400018c

0800f6e8 <free>:
 800f6e8:	4b02      	ldr	r3, [pc, #8]	; (800f6f4 <free+0xc>)
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	6818      	ldr	r0, [r3, #0]
 800f6ee:	f000 b80b 	b.w	800f708 <_free_r>
 800f6f2:	bf00      	nop
 800f6f4:	2400018c 	.word	0x2400018c

0800f6f8 <memset>:
 800f6f8:	4402      	add	r2, r0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	4293      	cmp	r3, r2
 800f6fe:	d100      	bne.n	800f702 <memset+0xa>
 800f700:	4770      	bx	lr
 800f702:	f803 1b01 	strb.w	r1, [r3], #1
 800f706:	e7f9      	b.n	800f6fc <memset+0x4>

0800f708 <_free_r>:
 800f708:	b538      	push	{r3, r4, r5, lr}
 800f70a:	4605      	mov	r5, r0
 800f70c:	2900      	cmp	r1, #0
 800f70e:	d045      	beq.n	800f79c <_free_r+0x94>
 800f710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f714:	1f0c      	subs	r4, r1, #4
 800f716:	2b00      	cmp	r3, #0
 800f718:	bfb8      	it	lt
 800f71a:	18e4      	addlt	r4, r4, r3
 800f71c:	f000 f8cc 	bl	800f8b8 <__malloc_lock>
 800f720:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <_free_r+0x98>)
 800f722:	6813      	ldr	r3, [r2, #0]
 800f724:	4610      	mov	r0, r2
 800f726:	b933      	cbnz	r3, 800f736 <_free_r+0x2e>
 800f728:	6063      	str	r3, [r4, #4]
 800f72a:	6014      	str	r4, [r2, #0]
 800f72c:	4628      	mov	r0, r5
 800f72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f732:	f000 b8c2 	b.w	800f8ba <__malloc_unlock>
 800f736:	42a3      	cmp	r3, r4
 800f738:	d90c      	bls.n	800f754 <_free_r+0x4c>
 800f73a:	6821      	ldr	r1, [r4, #0]
 800f73c:	1862      	adds	r2, r4, r1
 800f73e:	4293      	cmp	r3, r2
 800f740:	bf04      	itt	eq
 800f742:	681a      	ldreq	r2, [r3, #0]
 800f744:	685b      	ldreq	r3, [r3, #4]
 800f746:	6063      	str	r3, [r4, #4]
 800f748:	bf04      	itt	eq
 800f74a:	1852      	addeq	r2, r2, r1
 800f74c:	6022      	streq	r2, [r4, #0]
 800f74e:	6004      	str	r4, [r0, #0]
 800f750:	e7ec      	b.n	800f72c <_free_r+0x24>
 800f752:	4613      	mov	r3, r2
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	b10a      	cbz	r2, 800f75c <_free_r+0x54>
 800f758:	42a2      	cmp	r2, r4
 800f75a:	d9fa      	bls.n	800f752 <_free_r+0x4a>
 800f75c:	6819      	ldr	r1, [r3, #0]
 800f75e:	1858      	adds	r0, r3, r1
 800f760:	42a0      	cmp	r0, r4
 800f762:	d10b      	bne.n	800f77c <_free_r+0x74>
 800f764:	6820      	ldr	r0, [r4, #0]
 800f766:	4401      	add	r1, r0
 800f768:	1858      	adds	r0, r3, r1
 800f76a:	4282      	cmp	r2, r0
 800f76c:	6019      	str	r1, [r3, #0]
 800f76e:	d1dd      	bne.n	800f72c <_free_r+0x24>
 800f770:	6810      	ldr	r0, [r2, #0]
 800f772:	6852      	ldr	r2, [r2, #4]
 800f774:	605a      	str	r2, [r3, #4]
 800f776:	4401      	add	r1, r0
 800f778:	6019      	str	r1, [r3, #0]
 800f77a:	e7d7      	b.n	800f72c <_free_r+0x24>
 800f77c:	d902      	bls.n	800f784 <_free_r+0x7c>
 800f77e:	230c      	movs	r3, #12
 800f780:	602b      	str	r3, [r5, #0]
 800f782:	e7d3      	b.n	800f72c <_free_r+0x24>
 800f784:	6820      	ldr	r0, [r4, #0]
 800f786:	1821      	adds	r1, r4, r0
 800f788:	428a      	cmp	r2, r1
 800f78a:	bf04      	itt	eq
 800f78c:	6811      	ldreq	r1, [r2, #0]
 800f78e:	6852      	ldreq	r2, [r2, #4]
 800f790:	6062      	str	r2, [r4, #4]
 800f792:	bf04      	itt	eq
 800f794:	1809      	addeq	r1, r1, r0
 800f796:	6021      	streq	r1, [r4, #0]
 800f798:	605c      	str	r4, [r3, #4]
 800f79a:	e7c7      	b.n	800f72c <_free_r+0x24>
 800f79c:	bd38      	pop	{r3, r4, r5, pc}
 800f79e:	bf00      	nop
 800f7a0:	240002dc 	.word	0x240002dc

0800f7a4 <_malloc_r>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	1ccd      	adds	r5, r1, #3
 800f7a8:	f025 0503 	bic.w	r5, r5, #3
 800f7ac:	3508      	adds	r5, #8
 800f7ae:	2d0c      	cmp	r5, #12
 800f7b0:	bf38      	it	cc
 800f7b2:	250c      	movcc	r5, #12
 800f7b4:	2d00      	cmp	r5, #0
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	db01      	blt.n	800f7be <_malloc_r+0x1a>
 800f7ba:	42a9      	cmp	r1, r5
 800f7bc:	d903      	bls.n	800f7c6 <_malloc_r+0x22>
 800f7be:	230c      	movs	r3, #12
 800f7c0:	6033      	str	r3, [r6, #0]
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	bd70      	pop	{r4, r5, r6, pc}
 800f7c6:	f000 f877 	bl	800f8b8 <__malloc_lock>
 800f7ca:	4a21      	ldr	r2, [pc, #132]	; (800f850 <_malloc_r+0xac>)
 800f7cc:	6814      	ldr	r4, [r2, #0]
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	b991      	cbnz	r1, 800f7f8 <_malloc_r+0x54>
 800f7d2:	4c20      	ldr	r4, [pc, #128]	; (800f854 <_malloc_r+0xb0>)
 800f7d4:	6823      	ldr	r3, [r4, #0]
 800f7d6:	b91b      	cbnz	r3, 800f7e0 <_malloc_r+0x3c>
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f000 f83d 	bl	800f858 <_sbrk_r>
 800f7de:	6020      	str	r0, [r4, #0]
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f000 f838 	bl	800f858 <_sbrk_r>
 800f7e8:	1c43      	adds	r3, r0, #1
 800f7ea:	d124      	bne.n	800f836 <_malloc_r+0x92>
 800f7ec:	230c      	movs	r3, #12
 800f7ee:	6033      	str	r3, [r6, #0]
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f000 f862 	bl	800f8ba <__malloc_unlock>
 800f7f6:	e7e4      	b.n	800f7c2 <_malloc_r+0x1e>
 800f7f8:	680b      	ldr	r3, [r1, #0]
 800f7fa:	1b5b      	subs	r3, r3, r5
 800f7fc:	d418      	bmi.n	800f830 <_malloc_r+0x8c>
 800f7fe:	2b0b      	cmp	r3, #11
 800f800:	d90f      	bls.n	800f822 <_malloc_r+0x7e>
 800f802:	600b      	str	r3, [r1, #0]
 800f804:	50cd      	str	r5, [r1, r3]
 800f806:	18cc      	adds	r4, r1, r3
 800f808:	4630      	mov	r0, r6
 800f80a:	f000 f856 	bl	800f8ba <__malloc_unlock>
 800f80e:	f104 000b 	add.w	r0, r4, #11
 800f812:	1d23      	adds	r3, r4, #4
 800f814:	f020 0007 	bic.w	r0, r0, #7
 800f818:	1ac3      	subs	r3, r0, r3
 800f81a:	d0d3      	beq.n	800f7c4 <_malloc_r+0x20>
 800f81c:	425a      	negs	r2, r3
 800f81e:	50e2      	str	r2, [r4, r3]
 800f820:	e7d0      	b.n	800f7c4 <_malloc_r+0x20>
 800f822:	428c      	cmp	r4, r1
 800f824:	684b      	ldr	r3, [r1, #4]
 800f826:	bf16      	itet	ne
 800f828:	6063      	strne	r3, [r4, #4]
 800f82a:	6013      	streq	r3, [r2, #0]
 800f82c:	460c      	movne	r4, r1
 800f82e:	e7eb      	b.n	800f808 <_malloc_r+0x64>
 800f830:	460c      	mov	r4, r1
 800f832:	6849      	ldr	r1, [r1, #4]
 800f834:	e7cc      	b.n	800f7d0 <_malloc_r+0x2c>
 800f836:	1cc4      	adds	r4, r0, #3
 800f838:	f024 0403 	bic.w	r4, r4, #3
 800f83c:	42a0      	cmp	r0, r4
 800f83e:	d005      	beq.n	800f84c <_malloc_r+0xa8>
 800f840:	1a21      	subs	r1, r4, r0
 800f842:	4630      	mov	r0, r6
 800f844:	f000 f808 	bl	800f858 <_sbrk_r>
 800f848:	3001      	adds	r0, #1
 800f84a:	d0cf      	beq.n	800f7ec <_malloc_r+0x48>
 800f84c:	6025      	str	r5, [r4, #0]
 800f84e:	e7db      	b.n	800f808 <_malloc_r+0x64>
 800f850:	240002dc 	.word	0x240002dc
 800f854:	240002e0 	.word	0x240002e0

0800f858 <_sbrk_r>:
 800f858:	b538      	push	{r3, r4, r5, lr}
 800f85a:	4c06      	ldr	r4, [pc, #24]	; (800f874 <_sbrk_r+0x1c>)
 800f85c:	2300      	movs	r3, #0
 800f85e:	4605      	mov	r5, r0
 800f860:	4608      	mov	r0, r1
 800f862:	6023      	str	r3, [r4, #0]
 800f864:	f7f1 fe34 	bl	80014d0 <_sbrk>
 800f868:	1c43      	adds	r3, r0, #1
 800f86a:	d102      	bne.n	800f872 <_sbrk_r+0x1a>
 800f86c:	6823      	ldr	r3, [r4, #0]
 800f86e:	b103      	cbz	r3, 800f872 <_sbrk_r+0x1a>
 800f870:	602b      	str	r3, [r5, #0]
 800f872:	bd38      	pop	{r3, r4, r5, pc}
 800f874:	24003e50 	.word	0x24003e50

0800f878 <siprintf>:
 800f878:	b40e      	push	{r1, r2, r3}
 800f87a:	b500      	push	{lr}
 800f87c:	b09c      	sub	sp, #112	; 0x70
 800f87e:	ab1d      	add	r3, sp, #116	; 0x74
 800f880:	9002      	str	r0, [sp, #8]
 800f882:	9006      	str	r0, [sp, #24]
 800f884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f888:	4809      	ldr	r0, [pc, #36]	; (800f8b0 <siprintf+0x38>)
 800f88a:	9107      	str	r1, [sp, #28]
 800f88c:	9104      	str	r1, [sp, #16]
 800f88e:	4909      	ldr	r1, [pc, #36]	; (800f8b4 <siprintf+0x3c>)
 800f890:	f853 2b04 	ldr.w	r2, [r3], #4
 800f894:	9105      	str	r1, [sp, #20]
 800f896:	6800      	ldr	r0, [r0, #0]
 800f898:	9301      	str	r3, [sp, #4]
 800f89a:	a902      	add	r1, sp, #8
 800f89c:	f000 f868 	bl	800f970 <_svfiprintf_r>
 800f8a0:	9b02      	ldr	r3, [sp, #8]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	701a      	strb	r2, [r3, #0]
 800f8a6:	b01c      	add	sp, #112	; 0x70
 800f8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8ac:	b003      	add	sp, #12
 800f8ae:	4770      	bx	lr
 800f8b0:	2400018c 	.word	0x2400018c
 800f8b4:	ffff0208 	.word	0xffff0208

0800f8b8 <__malloc_lock>:
 800f8b8:	4770      	bx	lr

0800f8ba <__malloc_unlock>:
 800f8ba:	4770      	bx	lr

0800f8bc <__ssputs_r>:
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	688e      	ldr	r6, [r1, #8]
 800f8c2:	429e      	cmp	r6, r3
 800f8c4:	4682      	mov	sl, r0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	4690      	mov	r8, r2
 800f8ca:	4699      	mov	r9, r3
 800f8cc:	d837      	bhi.n	800f93e <__ssputs_r+0x82>
 800f8ce:	898a      	ldrh	r2, [r1, #12]
 800f8d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8d4:	d031      	beq.n	800f93a <__ssputs_r+0x7e>
 800f8d6:	6825      	ldr	r5, [r4, #0]
 800f8d8:	6909      	ldr	r1, [r1, #16]
 800f8da:	1a6f      	subs	r7, r5, r1
 800f8dc:	6965      	ldr	r5, [r4, #20]
 800f8de:	2302      	movs	r3, #2
 800f8e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8e4:	fb95 f5f3 	sdiv	r5, r5, r3
 800f8e8:	f109 0301 	add.w	r3, r9, #1
 800f8ec:	443b      	add	r3, r7
 800f8ee:	429d      	cmp	r5, r3
 800f8f0:	bf38      	it	cc
 800f8f2:	461d      	movcc	r5, r3
 800f8f4:	0553      	lsls	r3, r2, #21
 800f8f6:	d530      	bpl.n	800f95a <__ssputs_r+0x9e>
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f7ff ff53 	bl	800f7a4 <_malloc_r>
 800f8fe:	4606      	mov	r6, r0
 800f900:	b950      	cbnz	r0, 800f918 <__ssputs_r+0x5c>
 800f902:	230c      	movs	r3, #12
 800f904:	f8ca 3000 	str.w	r3, [sl]
 800f908:	89a3      	ldrh	r3, [r4, #12]
 800f90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f90e:	81a3      	strh	r3, [r4, #12]
 800f910:	f04f 30ff 	mov.w	r0, #4294967295
 800f914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f918:	463a      	mov	r2, r7
 800f91a:	6921      	ldr	r1, [r4, #16]
 800f91c:	f000 faa8 	bl	800fe70 <memcpy>
 800f920:	89a3      	ldrh	r3, [r4, #12]
 800f922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f92a:	81a3      	strh	r3, [r4, #12]
 800f92c:	6126      	str	r6, [r4, #16]
 800f92e:	6165      	str	r5, [r4, #20]
 800f930:	443e      	add	r6, r7
 800f932:	1bed      	subs	r5, r5, r7
 800f934:	6026      	str	r6, [r4, #0]
 800f936:	60a5      	str	r5, [r4, #8]
 800f938:	464e      	mov	r6, r9
 800f93a:	454e      	cmp	r6, r9
 800f93c:	d900      	bls.n	800f940 <__ssputs_r+0x84>
 800f93e:	464e      	mov	r6, r9
 800f940:	4632      	mov	r2, r6
 800f942:	4641      	mov	r1, r8
 800f944:	6820      	ldr	r0, [r4, #0]
 800f946:	f000 fa9e 	bl	800fe86 <memmove>
 800f94a:	68a3      	ldr	r3, [r4, #8]
 800f94c:	1b9b      	subs	r3, r3, r6
 800f94e:	60a3      	str	r3, [r4, #8]
 800f950:	6823      	ldr	r3, [r4, #0]
 800f952:	441e      	add	r6, r3
 800f954:	6026      	str	r6, [r4, #0]
 800f956:	2000      	movs	r0, #0
 800f958:	e7dc      	b.n	800f914 <__ssputs_r+0x58>
 800f95a:	462a      	mov	r2, r5
 800f95c:	f000 faac 	bl	800feb8 <_realloc_r>
 800f960:	4606      	mov	r6, r0
 800f962:	2800      	cmp	r0, #0
 800f964:	d1e2      	bne.n	800f92c <__ssputs_r+0x70>
 800f966:	6921      	ldr	r1, [r4, #16]
 800f968:	4650      	mov	r0, sl
 800f96a:	f7ff fecd 	bl	800f708 <_free_r>
 800f96e:	e7c8      	b.n	800f902 <__ssputs_r+0x46>

0800f970 <_svfiprintf_r>:
 800f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f974:	461d      	mov	r5, r3
 800f976:	898b      	ldrh	r3, [r1, #12]
 800f978:	061f      	lsls	r7, r3, #24
 800f97a:	b09d      	sub	sp, #116	; 0x74
 800f97c:	4680      	mov	r8, r0
 800f97e:	460c      	mov	r4, r1
 800f980:	4616      	mov	r6, r2
 800f982:	d50f      	bpl.n	800f9a4 <_svfiprintf_r+0x34>
 800f984:	690b      	ldr	r3, [r1, #16]
 800f986:	b96b      	cbnz	r3, 800f9a4 <_svfiprintf_r+0x34>
 800f988:	2140      	movs	r1, #64	; 0x40
 800f98a:	f7ff ff0b 	bl	800f7a4 <_malloc_r>
 800f98e:	6020      	str	r0, [r4, #0]
 800f990:	6120      	str	r0, [r4, #16]
 800f992:	b928      	cbnz	r0, 800f9a0 <_svfiprintf_r+0x30>
 800f994:	230c      	movs	r3, #12
 800f996:	f8c8 3000 	str.w	r3, [r8]
 800f99a:	f04f 30ff 	mov.w	r0, #4294967295
 800f99e:	e0c8      	b.n	800fb32 <_svfiprintf_r+0x1c2>
 800f9a0:	2340      	movs	r3, #64	; 0x40
 800f9a2:	6163      	str	r3, [r4, #20]
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a8:	2320      	movs	r3, #32
 800f9aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9ae:	2330      	movs	r3, #48	; 0x30
 800f9b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9b4:	9503      	str	r5, [sp, #12]
 800f9b6:	f04f 0b01 	mov.w	fp, #1
 800f9ba:	4637      	mov	r7, r6
 800f9bc:	463d      	mov	r5, r7
 800f9be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f9c2:	b10b      	cbz	r3, 800f9c8 <_svfiprintf_r+0x58>
 800f9c4:	2b25      	cmp	r3, #37	; 0x25
 800f9c6:	d13e      	bne.n	800fa46 <_svfiprintf_r+0xd6>
 800f9c8:	ebb7 0a06 	subs.w	sl, r7, r6
 800f9cc:	d00b      	beq.n	800f9e6 <_svfiprintf_r+0x76>
 800f9ce:	4653      	mov	r3, sl
 800f9d0:	4632      	mov	r2, r6
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	4640      	mov	r0, r8
 800f9d6:	f7ff ff71 	bl	800f8bc <__ssputs_r>
 800f9da:	3001      	adds	r0, #1
 800f9dc:	f000 80a4 	beq.w	800fb28 <_svfiprintf_r+0x1b8>
 800f9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e2:	4453      	add	r3, sl
 800f9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9e6:	783b      	ldrb	r3, [r7, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 809d 	beq.w	800fb28 <_svfiprintf_r+0x1b8>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9f8:	9304      	str	r3, [sp, #16]
 800f9fa:	9307      	str	r3, [sp, #28]
 800f9fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa00:	931a      	str	r3, [sp, #104]	; 0x68
 800fa02:	462f      	mov	r7, r5
 800fa04:	2205      	movs	r2, #5
 800fa06:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fa0a:	4850      	ldr	r0, [pc, #320]	; (800fb4c <_svfiprintf_r+0x1dc>)
 800fa0c:	f7f0 fc68 	bl	80002e0 <memchr>
 800fa10:	9b04      	ldr	r3, [sp, #16]
 800fa12:	b9d0      	cbnz	r0, 800fa4a <_svfiprintf_r+0xda>
 800fa14:	06d9      	lsls	r1, r3, #27
 800fa16:	bf44      	itt	mi
 800fa18:	2220      	movmi	r2, #32
 800fa1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fa1e:	071a      	lsls	r2, r3, #28
 800fa20:	bf44      	itt	mi
 800fa22:	222b      	movmi	r2, #43	; 0x2b
 800fa24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fa28:	782a      	ldrb	r2, [r5, #0]
 800fa2a:	2a2a      	cmp	r2, #42	; 0x2a
 800fa2c:	d015      	beq.n	800fa5a <_svfiprintf_r+0xea>
 800fa2e:	9a07      	ldr	r2, [sp, #28]
 800fa30:	462f      	mov	r7, r5
 800fa32:	2000      	movs	r0, #0
 800fa34:	250a      	movs	r5, #10
 800fa36:	4639      	mov	r1, r7
 800fa38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa3c:	3b30      	subs	r3, #48	; 0x30
 800fa3e:	2b09      	cmp	r3, #9
 800fa40:	d94d      	bls.n	800fade <_svfiprintf_r+0x16e>
 800fa42:	b1b8      	cbz	r0, 800fa74 <_svfiprintf_r+0x104>
 800fa44:	e00f      	b.n	800fa66 <_svfiprintf_r+0xf6>
 800fa46:	462f      	mov	r7, r5
 800fa48:	e7b8      	b.n	800f9bc <_svfiprintf_r+0x4c>
 800fa4a:	4a40      	ldr	r2, [pc, #256]	; (800fb4c <_svfiprintf_r+0x1dc>)
 800fa4c:	1a80      	subs	r0, r0, r2
 800fa4e:	fa0b f000 	lsl.w	r0, fp, r0
 800fa52:	4318      	orrs	r0, r3
 800fa54:	9004      	str	r0, [sp, #16]
 800fa56:	463d      	mov	r5, r7
 800fa58:	e7d3      	b.n	800fa02 <_svfiprintf_r+0x92>
 800fa5a:	9a03      	ldr	r2, [sp, #12]
 800fa5c:	1d11      	adds	r1, r2, #4
 800fa5e:	6812      	ldr	r2, [r2, #0]
 800fa60:	9103      	str	r1, [sp, #12]
 800fa62:	2a00      	cmp	r2, #0
 800fa64:	db01      	blt.n	800fa6a <_svfiprintf_r+0xfa>
 800fa66:	9207      	str	r2, [sp, #28]
 800fa68:	e004      	b.n	800fa74 <_svfiprintf_r+0x104>
 800fa6a:	4252      	negs	r2, r2
 800fa6c:	f043 0302 	orr.w	r3, r3, #2
 800fa70:	9207      	str	r2, [sp, #28]
 800fa72:	9304      	str	r3, [sp, #16]
 800fa74:	783b      	ldrb	r3, [r7, #0]
 800fa76:	2b2e      	cmp	r3, #46	; 0x2e
 800fa78:	d10c      	bne.n	800fa94 <_svfiprintf_r+0x124>
 800fa7a:	787b      	ldrb	r3, [r7, #1]
 800fa7c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa7e:	d133      	bne.n	800fae8 <_svfiprintf_r+0x178>
 800fa80:	9b03      	ldr	r3, [sp, #12]
 800fa82:	1d1a      	adds	r2, r3, #4
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	9203      	str	r2, [sp, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	bfb8      	it	lt
 800fa8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa90:	3702      	adds	r7, #2
 800fa92:	9305      	str	r3, [sp, #20]
 800fa94:	4d2e      	ldr	r5, [pc, #184]	; (800fb50 <_svfiprintf_r+0x1e0>)
 800fa96:	7839      	ldrb	r1, [r7, #0]
 800fa98:	2203      	movs	r2, #3
 800fa9a:	4628      	mov	r0, r5
 800fa9c:	f7f0 fc20 	bl	80002e0 <memchr>
 800faa0:	b138      	cbz	r0, 800fab2 <_svfiprintf_r+0x142>
 800faa2:	2340      	movs	r3, #64	; 0x40
 800faa4:	1b40      	subs	r0, r0, r5
 800faa6:	fa03 f000 	lsl.w	r0, r3, r0
 800faaa:	9b04      	ldr	r3, [sp, #16]
 800faac:	4303      	orrs	r3, r0
 800faae:	3701      	adds	r7, #1
 800fab0:	9304      	str	r3, [sp, #16]
 800fab2:	7839      	ldrb	r1, [r7, #0]
 800fab4:	4827      	ldr	r0, [pc, #156]	; (800fb54 <_svfiprintf_r+0x1e4>)
 800fab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800faba:	2206      	movs	r2, #6
 800fabc:	1c7e      	adds	r6, r7, #1
 800fabe:	f7f0 fc0f 	bl	80002e0 <memchr>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d038      	beq.n	800fb38 <_svfiprintf_r+0x1c8>
 800fac6:	4b24      	ldr	r3, [pc, #144]	; (800fb58 <_svfiprintf_r+0x1e8>)
 800fac8:	bb13      	cbnz	r3, 800fb10 <_svfiprintf_r+0x1a0>
 800faca:	9b03      	ldr	r3, [sp, #12]
 800facc:	3307      	adds	r3, #7
 800face:	f023 0307 	bic.w	r3, r3, #7
 800fad2:	3308      	adds	r3, #8
 800fad4:	9303      	str	r3, [sp, #12]
 800fad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fad8:	444b      	add	r3, r9
 800fada:	9309      	str	r3, [sp, #36]	; 0x24
 800fadc:	e76d      	b.n	800f9ba <_svfiprintf_r+0x4a>
 800fade:	fb05 3202 	mla	r2, r5, r2, r3
 800fae2:	2001      	movs	r0, #1
 800fae4:	460f      	mov	r7, r1
 800fae6:	e7a6      	b.n	800fa36 <_svfiprintf_r+0xc6>
 800fae8:	2300      	movs	r3, #0
 800faea:	3701      	adds	r7, #1
 800faec:	9305      	str	r3, [sp, #20]
 800faee:	4619      	mov	r1, r3
 800faf0:	250a      	movs	r5, #10
 800faf2:	4638      	mov	r0, r7
 800faf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faf8:	3a30      	subs	r2, #48	; 0x30
 800fafa:	2a09      	cmp	r2, #9
 800fafc:	d903      	bls.n	800fb06 <_svfiprintf_r+0x196>
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d0c8      	beq.n	800fa94 <_svfiprintf_r+0x124>
 800fb02:	9105      	str	r1, [sp, #20]
 800fb04:	e7c6      	b.n	800fa94 <_svfiprintf_r+0x124>
 800fb06:	fb05 2101 	mla	r1, r5, r1, r2
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	4607      	mov	r7, r0
 800fb0e:	e7f0      	b.n	800faf2 <_svfiprintf_r+0x182>
 800fb10:	ab03      	add	r3, sp, #12
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	4622      	mov	r2, r4
 800fb16:	4b11      	ldr	r3, [pc, #68]	; (800fb5c <_svfiprintf_r+0x1ec>)
 800fb18:	a904      	add	r1, sp, #16
 800fb1a:	4640      	mov	r0, r8
 800fb1c:	f3af 8000 	nop.w
 800fb20:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fb24:	4681      	mov	r9, r0
 800fb26:	d1d6      	bne.n	800fad6 <_svfiprintf_r+0x166>
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	065b      	lsls	r3, r3, #25
 800fb2c:	f53f af35 	bmi.w	800f99a <_svfiprintf_r+0x2a>
 800fb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb32:	b01d      	add	sp, #116	; 0x74
 800fb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb38:	ab03      	add	r3, sp, #12
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <_svfiprintf_r+0x1ec>)
 800fb40:	a904      	add	r1, sp, #16
 800fb42:	4640      	mov	r0, r8
 800fb44:	f000 f882 	bl	800fc4c <_printf_i>
 800fb48:	e7ea      	b.n	800fb20 <_svfiprintf_r+0x1b0>
 800fb4a:	bf00      	nop
 800fb4c:	08010010 	.word	0x08010010
 800fb50:	08010016 	.word	0x08010016
 800fb54:	0801001a 	.word	0x0801001a
 800fb58:	00000000 	.word	0x00000000
 800fb5c:	0800f8bd 	.word	0x0800f8bd

0800fb60 <_printf_common>:
 800fb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb64:	4691      	mov	r9, r2
 800fb66:	461f      	mov	r7, r3
 800fb68:	688a      	ldr	r2, [r1, #8]
 800fb6a:	690b      	ldr	r3, [r1, #16]
 800fb6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb70:	4293      	cmp	r3, r2
 800fb72:	bfb8      	it	lt
 800fb74:	4613      	movlt	r3, r2
 800fb76:	f8c9 3000 	str.w	r3, [r9]
 800fb7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb7e:	4606      	mov	r6, r0
 800fb80:	460c      	mov	r4, r1
 800fb82:	b112      	cbz	r2, 800fb8a <_printf_common+0x2a>
 800fb84:	3301      	adds	r3, #1
 800fb86:	f8c9 3000 	str.w	r3, [r9]
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	0699      	lsls	r1, r3, #26
 800fb8e:	bf42      	ittt	mi
 800fb90:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fb94:	3302      	addmi	r3, #2
 800fb96:	f8c9 3000 	strmi.w	r3, [r9]
 800fb9a:	6825      	ldr	r5, [r4, #0]
 800fb9c:	f015 0506 	ands.w	r5, r5, #6
 800fba0:	d107      	bne.n	800fbb2 <_printf_common+0x52>
 800fba2:	f104 0a19 	add.w	sl, r4, #25
 800fba6:	68e3      	ldr	r3, [r4, #12]
 800fba8:	f8d9 2000 	ldr.w	r2, [r9]
 800fbac:	1a9b      	subs	r3, r3, r2
 800fbae:	42ab      	cmp	r3, r5
 800fbb0:	dc28      	bgt.n	800fc04 <_printf_common+0xa4>
 800fbb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fbb6:	6822      	ldr	r2, [r4, #0]
 800fbb8:	3300      	adds	r3, #0
 800fbba:	bf18      	it	ne
 800fbbc:	2301      	movne	r3, #1
 800fbbe:	0692      	lsls	r2, r2, #26
 800fbc0:	d42d      	bmi.n	800fc1e <_printf_common+0xbe>
 800fbc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbc6:	4639      	mov	r1, r7
 800fbc8:	4630      	mov	r0, r6
 800fbca:	47c0      	blx	r8
 800fbcc:	3001      	adds	r0, #1
 800fbce:	d020      	beq.n	800fc12 <_printf_common+0xb2>
 800fbd0:	6823      	ldr	r3, [r4, #0]
 800fbd2:	68e5      	ldr	r5, [r4, #12]
 800fbd4:	f8d9 2000 	ldr.w	r2, [r9]
 800fbd8:	f003 0306 	and.w	r3, r3, #6
 800fbdc:	2b04      	cmp	r3, #4
 800fbde:	bf08      	it	eq
 800fbe0:	1aad      	subeq	r5, r5, r2
 800fbe2:	68a3      	ldr	r3, [r4, #8]
 800fbe4:	6922      	ldr	r2, [r4, #16]
 800fbe6:	bf0c      	ite	eq
 800fbe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbec:	2500      	movne	r5, #0
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	bfc4      	itt	gt
 800fbf2:	1a9b      	subgt	r3, r3, r2
 800fbf4:	18ed      	addgt	r5, r5, r3
 800fbf6:	f04f 0900 	mov.w	r9, #0
 800fbfa:	341a      	adds	r4, #26
 800fbfc:	454d      	cmp	r5, r9
 800fbfe:	d11a      	bne.n	800fc36 <_printf_common+0xd6>
 800fc00:	2000      	movs	r0, #0
 800fc02:	e008      	b.n	800fc16 <_printf_common+0xb6>
 800fc04:	2301      	movs	r3, #1
 800fc06:	4652      	mov	r2, sl
 800fc08:	4639      	mov	r1, r7
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	47c0      	blx	r8
 800fc0e:	3001      	adds	r0, #1
 800fc10:	d103      	bne.n	800fc1a <_printf_common+0xba>
 800fc12:	f04f 30ff 	mov.w	r0, #4294967295
 800fc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1a:	3501      	adds	r5, #1
 800fc1c:	e7c3      	b.n	800fba6 <_printf_common+0x46>
 800fc1e:	18e1      	adds	r1, r4, r3
 800fc20:	1c5a      	adds	r2, r3, #1
 800fc22:	2030      	movs	r0, #48	; 0x30
 800fc24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc28:	4422      	add	r2, r4
 800fc2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc32:	3302      	adds	r3, #2
 800fc34:	e7c5      	b.n	800fbc2 <_printf_common+0x62>
 800fc36:	2301      	movs	r3, #1
 800fc38:	4622      	mov	r2, r4
 800fc3a:	4639      	mov	r1, r7
 800fc3c:	4630      	mov	r0, r6
 800fc3e:	47c0      	blx	r8
 800fc40:	3001      	adds	r0, #1
 800fc42:	d0e6      	beq.n	800fc12 <_printf_common+0xb2>
 800fc44:	f109 0901 	add.w	r9, r9, #1
 800fc48:	e7d8      	b.n	800fbfc <_printf_common+0x9c>
	...

0800fc4c <_printf_i>:
 800fc4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fc54:	460c      	mov	r4, r1
 800fc56:	7e09      	ldrb	r1, [r1, #24]
 800fc58:	b085      	sub	sp, #20
 800fc5a:	296e      	cmp	r1, #110	; 0x6e
 800fc5c:	4617      	mov	r7, r2
 800fc5e:	4606      	mov	r6, r0
 800fc60:	4698      	mov	r8, r3
 800fc62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc64:	f000 80b3 	beq.w	800fdce <_printf_i+0x182>
 800fc68:	d822      	bhi.n	800fcb0 <_printf_i+0x64>
 800fc6a:	2963      	cmp	r1, #99	; 0x63
 800fc6c:	d036      	beq.n	800fcdc <_printf_i+0x90>
 800fc6e:	d80a      	bhi.n	800fc86 <_printf_i+0x3a>
 800fc70:	2900      	cmp	r1, #0
 800fc72:	f000 80b9 	beq.w	800fde8 <_printf_i+0x19c>
 800fc76:	2958      	cmp	r1, #88	; 0x58
 800fc78:	f000 8083 	beq.w	800fd82 <_printf_i+0x136>
 800fc7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fc84:	e032      	b.n	800fcec <_printf_i+0xa0>
 800fc86:	2964      	cmp	r1, #100	; 0x64
 800fc88:	d001      	beq.n	800fc8e <_printf_i+0x42>
 800fc8a:	2969      	cmp	r1, #105	; 0x69
 800fc8c:	d1f6      	bne.n	800fc7c <_printf_i+0x30>
 800fc8e:	6820      	ldr	r0, [r4, #0]
 800fc90:	6813      	ldr	r3, [r2, #0]
 800fc92:	0605      	lsls	r5, r0, #24
 800fc94:	f103 0104 	add.w	r1, r3, #4
 800fc98:	d52a      	bpl.n	800fcf0 <_printf_i+0xa4>
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	6011      	str	r1, [r2, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	da03      	bge.n	800fcaa <_printf_i+0x5e>
 800fca2:	222d      	movs	r2, #45	; 0x2d
 800fca4:	425b      	negs	r3, r3
 800fca6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fcaa:	486f      	ldr	r0, [pc, #444]	; (800fe68 <_printf_i+0x21c>)
 800fcac:	220a      	movs	r2, #10
 800fcae:	e039      	b.n	800fd24 <_printf_i+0xd8>
 800fcb0:	2973      	cmp	r1, #115	; 0x73
 800fcb2:	f000 809d 	beq.w	800fdf0 <_printf_i+0x1a4>
 800fcb6:	d808      	bhi.n	800fcca <_printf_i+0x7e>
 800fcb8:	296f      	cmp	r1, #111	; 0x6f
 800fcba:	d020      	beq.n	800fcfe <_printf_i+0xb2>
 800fcbc:	2970      	cmp	r1, #112	; 0x70
 800fcbe:	d1dd      	bne.n	800fc7c <_printf_i+0x30>
 800fcc0:	6823      	ldr	r3, [r4, #0]
 800fcc2:	f043 0320 	orr.w	r3, r3, #32
 800fcc6:	6023      	str	r3, [r4, #0]
 800fcc8:	e003      	b.n	800fcd2 <_printf_i+0x86>
 800fcca:	2975      	cmp	r1, #117	; 0x75
 800fccc:	d017      	beq.n	800fcfe <_printf_i+0xb2>
 800fcce:	2978      	cmp	r1, #120	; 0x78
 800fcd0:	d1d4      	bne.n	800fc7c <_printf_i+0x30>
 800fcd2:	2378      	movs	r3, #120	; 0x78
 800fcd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fcd8:	4864      	ldr	r0, [pc, #400]	; (800fe6c <_printf_i+0x220>)
 800fcda:	e055      	b.n	800fd88 <_printf_i+0x13c>
 800fcdc:	6813      	ldr	r3, [r2, #0]
 800fcde:	1d19      	adds	r1, r3, #4
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6011      	str	r1, [r2, #0]
 800fce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcec:	2301      	movs	r3, #1
 800fcee:	e08c      	b.n	800fe0a <_printf_i+0x1be>
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	6011      	str	r1, [r2, #0]
 800fcf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcf8:	bf18      	it	ne
 800fcfa:	b21b      	sxthne	r3, r3
 800fcfc:	e7cf      	b.n	800fc9e <_printf_i+0x52>
 800fcfe:	6813      	ldr	r3, [r2, #0]
 800fd00:	6825      	ldr	r5, [r4, #0]
 800fd02:	1d18      	adds	r0, r3, #4
 800fd04:	6010      	str	r0, [r2, #0]
 800fd06:	0628      	lsls	r0, r5, #24
 800fd08:	d501      	bpl.n	800fd0e <_printf_i+0xc2>
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	e002      	b.n	800fd14 <_printf_i+0xc8>
 800fd0e:	0668      	lsls	r0, r5, #25
 800fd10:	d5fb      	bpl.n	800fd0a <_printf_i+0xbe>
 800fd12:	881b      	ldrh	r3, [r3, #0]
 800fd14:	4854      	ldr	r0, [pc, #336]	; (800fe68 <_printf_i+0x21c>)
 800fd16:	296f      	cmp	r1, #111	; 0x6f
 800fd18:	bf14      	ite	ne
 800fd1a:	220a      	movne	r2, #10
 800fd1c:	2208      	moveq	r2, #8
 800fd1e:	2100      	movs	r1, #0
 800fd20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd24:	6865      	ldr	r5, [r4, #4]
 800fd26:	60a5      	str	r5, [r4, #8]
 800fd28:	2d00      	cmp	r5, #0
 800fd2a:	f2c0 8095 	blt.w	800fe58 <_printf_i+0x20c>
 800fd2e:	6821      	ldr	r1, [r4, #0]
 800fd30:	f021 0104 	bic.w	r1, r1, #4
 800fd34:	6021      	str	r1, [r4, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d13d      	bne.n	800fdb6 <_printf_i+0x16a>
 800fd3a:	2d00      	cmp	r5, #0
 800fd3c:	f040 808e 	bne.w	800fe5c <_printf_i+0x210>
 800fd40:	4665      	mov	r5, ip
 800fd42:	2a08      	cmp	r2, #8
 800fd44:	d10b      	bne.n	800fd5e <_printf_i+0x112>
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	07db      	lsls	r3, r3, #31
 800fd4a:	d508      	bpl.n	800fd5e <_printf_i+0x112>
 800fd4c:	6923      	ldr	r3, [r4, #16]
 800fd4e:	6862      	ldr	r2, [r4, #4]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	bfde      	ittt	le
 800fd54:	2330      	movle	r3, #48	; 0x30
 800fd56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd5e:	ebac 0305 	sub.w	r3, ip, r5
 800fd62:	6123      	str	r3, [r4, #16]
 800fd64:	f8cd 8000 	str.w	r8, [sp]
 800fd68:	463b      	mov	r3, r7
 800fd6a:	aa03      	add	r2, sp, #12
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f7ff fef6 	bl	800fb60 <_printf_common>
 800fd74:	3001      	adds	r0, #1
 800fd76:	d14d      	bne.n	800fe14 <_printf_i+0x1c8>
 800fd78:	f04f 30ff 	mov.w	r0, #4294967295
 800fd7c:	b005      	add	sp, #20
 800fd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd82:	4839      	ldr	r0, [pc, #228]	; (800fe68 <_printf_i+0x21c>)
 800fd84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fd88:	6813      	ldr	r3, [r2, #0]
 800fd8a:	6821      	ldr	r1, [r4, #0]
 800fd8c:	1d1d      	adds	r5, r3, #4
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6015      	str	r5, [r2, #0]
 800fd92:	060a      	lsls	r2, r1, #24
 800fd94:	d50b      	bpl.n	800fdae <_printf_i+0x162>
 800fd96:	07ca      	lsls	r2, r1, #31
 800fd98:	bf44      	itt	mi
 800fd9a:	f041 0120 	orrmi.w	r1, r1, #32
 800fd9e:	6021      	strmi	r1, [r4, #0]
 800fda0:	b91b      	cbnz	r3, 800fdaa <_printf_i+0x15e>
 800fda2:	6822      	ldr	r2, [r4, #0]
 800fda4:	f022 0220 	bic.w	r2, r2, #32
 800fda8:	6022      	str	r2, [r4, #0]
 800fdaa:	2210      	movs	r2, #16
 800fdac:	e7b7      	b.n	800fd1e <_printf_i+0xd2>
 800fdae:	064d      	lsls	r5, r1, #25
 800fdb0:	bf48      	it	mi
 800fdb2:	b29b      	uxthmi	r3, r3
 800fdb4:	e7ef      	b.n	800fd96 <_printf_i+0x14a>
 800fdb6:	4665      	mov	r5, ip
 800fdb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdbc:	fb02 3311 	mls	r3, r2, r1, r3
 800fdc0:	5cc3      	ldrb	r3, [r0, r3]
 800fdc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	2900      	cmp	r1, #0
 800fdca:	d1f5      	bne.n	800fdb8 <_printf_i+0x16c>
 800fdcc:	e7b9      	b.n	800fd42 <_printf_i+0xf6>
 800fdce:	6813      	ldr	r3, [r2, #0]
 800fdd0:	6825      	ldr	r5, [r4, #0]
 800fdd2:	6961      	ldr	r1, [r4, #20]
 800fdd4:	1d18      	adds	r0, r3, #4
 800fdd6:	6010      	str	r0, [r2, #0]
 800fdd8:	0628      	lsls	r0, r5, #24
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	d501      	bpl.n	800fde2 <_printf_i+0x196>
 800fdde:	6019      	str	r1, [r3, #0]
 800fde0:	e002      	b.n	800fde8 <_printf_i+0x19c>
 800fde2:	066a      	lsls	r2, r5, #25
 800fde4:	d5fb      	bpl.n	800fdde <_printf_i+0x192>
 800fde6:	8019      	strh	r1, [r3, #0]
 800fde8:	2300      	movs	r3, #0
 800fdea:	6123      	str	r3, [r4, #16]
 800fdec:	4665      	mov	r5, ip
 800fdee:	e7b9      	b.n	800fd64 <_printf_i+0x118>
 800fdf0:	6813      	ldr	r3, [r2, #0]
 800fdf2:	1d19      	adds	r1, r3, #4
 800fdf4:	6011      	str	r1, [r2, #0]
 800fdf6:	681d      	ldr	r5, [r3, #0]
 800fdf8:	6862      	ldr	r2, [r4, #4]
 800fdfa:	2100      	movs	r1, #0
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	f7f0 fa6f 	bl	80002e0 <memchr>
 800fe02:	b108      	cbz	r0, 800fe08 <_printf_i+0x1bc>
 800fe04:	1b40      	subs	r0, r0, r5
 800fe06:	6060      	str	r0, [r4, #4]
 800fe08:	6863      	ldr	r3, [r4, #4]
 800fe0a:	6123      	str	r3, [r4, #16]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe12:	e7a7      	b.n	800fd64 <_printf_i+0x118>
 800fe14:	6923      	ldr	r3, [r4, #16]
 800fe16:	462a      	mov	r2, r5
 800fe18:	4639      	mov	r1, r7
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	47c0      	blx	r8
 800fe1e:	3001      	adds	r0, #1
 800fe20:	d0aa      	beq.n	800fd78 <_printf_i+0x12c>
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	079b      	lsls	r3, r3, #30
 800fe26:	d413      	bmi.n	800fe50 <_printf_i+0x204>
 800fe28:	68e0      	ldr	r0, [r4, #12]
 800fe2a:	9b03      	ldr	r3, [sp, #12]
 800fe2c:	4298      	cmp	r0, r3
 800fe2e:	bfb8      	it	lt
 800fe30:	4618      	movlt	r0, r3
 800fe32:	e7a3      	b.n	800fd7c <_printf_i+0x130>
 800fe34:	2301      	movs	r3, #1
 800fe36:	464a      	mov	r2, r9
 800fe38:	4639      	mov	r1, r7
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	47c0      	blx	r8
 800fe3e:	3001      	adds	r0, #1
 800fe40:	d09a      	beq.n	800fd78 <_printf_i+0x12c>
 800fe42:	3501      	adds	r5, #1
 800fe44:	68e3      	ldr	r3, [r4, #12]
 800fe46:	9a03      	ldr	r2, [sp, #12]
 800fe48:	1a9b      	subs	r3, r3, r2
 800fe4a:	42ab      	cmp	r3, r5
 800fe4c:	dcf2      	bgt.n	800fe34 <_printf_i+0x1e8>
 800fe4e:	e7eb      	b.n	800fe28 <_printf_i+0x1dc>
 800fe50:	2500      	movs	r5, #0
 800fe52:	f104 0919 	add.w	r9, r4, #25
 800fe56:	e7f5      	b.n	800fe44 <_printf_i+0x1f8>
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1ac      	bne.n	800fdb6 <_printf_i+0x16a>
 800fe5c:	7803      	ldrb	r3, [r0, #0]
 800fe5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fe62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe66:	e76c      	b.n	800fd42 <_printf_i+0xf6>
 800fe68:	08010021 	.word	0x08010021
 800fe6c:	08010032 	.word	0x08010032

0800fe70 <memcpy>:
 800fe70:	b510      	push	{r4, lr}
 800fe72:	1e43      	subs	r3, r0, #1
 800fe74:	440a      	add	r2, r1
 800fe76:	4291      	cmp	r1, r2
 800fe78:	d100      	bne.n	800fe7c <memcpy+0xc>
 800fe7a:	bd10      	pop	{r4, pc}
 800fe7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe84:	e7f7      	b.n	800fe76 <memcpy+0x6>

0800fe86 <memmove>:
 800fe86:	4288      	cmp	r0, r1
 800fe88:	b510      	push	{r4, lr}
 800fe8a:	eb01 0302 	add.w	r3, r1, r2
 800fe8e:	d807      	bhi.n	800fea0 <memmove+0x1a>
 800fe90:	1e42      	subs	r2, r0, #1
 800fe92:	4299      	cmp	r1, r3
 800fe94:	d00a      	beq.n	800feac <memmove+0x26>
 800fe96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe9a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fe9e:	e7f8      	b.n	800fe92 <memmove+0xc>
 800fea0:	4283      	cmp	r3, r0
 800fea2:	d9f5      	bls.n	800fe90 <memmove+0xa>
 800fea4:	1881      	adds	r1, r0, r2
 800fea6:	1ad2      	subs	r2, r2, r3
 800fea8:	42d3      	cmn	r3, r2
 800feaa:	d100      	bne.n	800feae <memmove+0x28>
 800feac:	bd10      	pop	{r4, pc}
 800feae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800feb2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800feb6:	e7f7      	b.n	800fea8 <memmove+0x22>

0800feb8 <_realloc_r>:
 800feb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feba:	4607      	mov	r7, r0
 800febc:	4614      	mov	r4, r2
 800febe:	460e      	mov	r6, r1
 800fec0:	b921      	cbnz	r1, 800fecc <_realloc_r+0x14>
 800fec2:	4611      	mov	r1, r2
 800fec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fec8:	f7ff bc6c 	b.w	800f7a4 <_malloc_r>
 800fecc:	b922      	cbnz	r2, 800fed8 <_realloc_r+0x20>
 800fece:	f7ff fc1b 	bl	800f708 <_free_r>
 800fed2:	4625      	mov	r5, r4
 800fed4:	4628      	mov	r0, r5
 800fed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed8:	f000 f814 	bl	800ff04 <_malloc_usable_size_r>
 800fedc:	42a0      	cmp	r0, r4
 800fede:	d20f      	bcs.n	800ff00 <_realloc_r+0x48>
 800fee0:	4621      	mov	r1, r4
 800fee2:	4638      	mov	r0, r7
 800fee4:	f7ff fc5e 	bl	800f7a4 <_malloc_r>
 800fee8:	4605      	mov	r5, r0
 800feea:	2800      	cmp	r0, #0
 800feec:	d0f2      	beq.n	800fed4 <_realloc_r+0x1c>
 800feee:	4631      	mov	r1, r6
 800fef0:	4622      	mov	r2, r4
 800fef2:	f7ff ffbd 	bl	800fe70 <memcpy>
 800fef6:	4631      	mov	r1, r6
 800fef8:	4638      	mov	r0, r7
 800fefa:	f7ff fc05 	bl	800f708 <_free_r>
 800fefe:	e7e9      	b.n	800fed4 <_realloc_r+0x1c>
 800ff00:	4635      	mov	r5, r6
 800ff02:	e7e7      	b.n	800fed4 <_realloc_r+0x1c>

0800ff04 <_malloc_usable_size_r>:
 800ff04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff08:	1f18      	subs	r0, r3, #4
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	bfbc      	itt	lt
 800ff0e:	580b      	ldrlt	r3, [r1, r0]
 800ff10:	18c0      	addlt	r0, r0, r3
 800ff12:	4770      	bx	lr

0800ff14 <_init>:
 800ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff16:	bf00      	nop
 800ff18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff1a:	bc08      	pop	{r3}
 800ff1c:	469e      	mov	lr, r3
 800ff1e:	4770      	bx	lr

0800ff20 <_fini>:
 800ff20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff22:	bf00      	nop
 800ff24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff26:	bc08      	pop	{r3}
 800ff28:	469e      	mov	lr, r3
 800ff2a:	4770      	bx	lr
