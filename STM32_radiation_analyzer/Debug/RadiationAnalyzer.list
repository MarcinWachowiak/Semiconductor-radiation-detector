
RadiationAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e75c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800e9f4  0800e9f4  0001e9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea70  0800ea70  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea70  0800ea70  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea70  0800ea70  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea70  0800ea70  0001ea70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea74  0800ea74  0001ea74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  24000000  0800ea78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001b4  0800ec2c  000201b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000214  0800ec8c  00020214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003d54  24000274  0800ecec  00020274  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24003fc8  0800ecec  00023fc8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 14 .debug_info   00036acb  00000000  00000000  000202a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000053da  00000000  00000000  00056d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b58  00000000  00000000  0005c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001990  00000000  00000000  0005dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003df21  00000000  00000000  0005f630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000241ca  00000000  00000000  0009d551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001828b3  00000000  00000000  000c171b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00243fce  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007514  00000000  00000000  00244024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000274 	.word	0x24000274
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e9dc 	.word	0x0800e9dc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000278 	.word	0x24000278
 80002d4:	0800e9dc 	.word	0x0800e9dc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b5b0      	push	{r4, r5, r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 feef 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f86d 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 fa29 	bl	800073c <MX_GPIO_Init>
  MX_DMA_Init();
 80002ea:	f000 fa07 	bl	80006fc <MX_DMA_Init>
  MX_ETH_Init();
 80002ee:	f000 f969 	bl	80005c4 <MX_ETH_Init>
  MX_ADC1_Init();
 80002f2:	f000 f8ed 	bl	80004d0 <MX_ADC1_Init>
  MX_TIM16_Init();
 80002f6:	f000 f9d9 	bl	80006ac <MX_TIM16_Init>
  MX_RTC_Init();
 80002fa:	f000 f9af 	bl	800065c <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 80002fe:	f00d fd85 	bl	800de0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //Start timer
  HAL_TIM_Base_Start_IT(&htim16);
 8000302:	4829      	ldr	r0, [pc, #164]	; (80003a8 <main+0xd0>)
 8000304:	f00a fad0 	bl	800a8a8 <HAL_TIM_Base_Start_IT>

  //ADC calibration
  if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET_LINEARITY,ADC_SINGLE_ENDED) && HAL_ADCEx_Calibration_Start(&hadc1,ADC_CALIB_OFFSET,ADC_SINGLE_ENDED)){
 8000308:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800030c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000310:	4826      	ldr	r0, [pc, #152]	; (80003ac <main+0xd4>)
 8000312:	f002 fcc7 	bl	8002ca4 <HAL_ADCEx_Calibration_Start>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d00a      	beq.n	8000332 <main+0x5a>
 800031c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000320:	2100      	movs	r1, #0
 8000322:	4822      	ldr	r0, [pc, #136]	; (80003ac <main+0xd4>)
 8000324:	f002 fcbe 	bl	8002ca4 <HAL_ADCEx_Calibration_Start>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <main+0x5a>
	  Error_Handler();
 800032e:	f000 fbb7 	bl	8000aa0 <Error_Handler>
  }

  //start ADC DMA
  if(HAL_OK != HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_dma_buf, ADC_BUF_LEN)){
 8000332:	220a      	movs	r2, #10
 8000334:	491e      	ldr	r1, [pc, #120]	; (80003b0 <main+0xd8>)
 8000336:	481d      	ldr	r0, [pc, #116]	; (80003ac <main+0xd4>)
 8000338:	f001 fb66 	bl	8001a08 <HAL_ADC_Start_DMA>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <main+0x6e>
	  Error_Handler();
 8000342:	f000 fbad 	bl	8000aa0 <Error_Handler>
  }

  // Initialize spectral array to zeros
  memset(pulse_ampl_cnt_arr, 0, sizeof(pulse_ampl_cnt_arr));
 8000346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800034a:	2100      	movs	r1, #0
 800034c:	4819      	ldr	r0, [pc, #100]	; (80003b4 <main+0xdc>)
 800034e:	f00e fb3d 	bl	800e9cc <memset>

  //init message
  HAL_Delay(1000);
 8000352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000356:	f000 ff45 	bl	80011e4 <HAL_Delay>
  uint8_t buffer[] = "Radiation Analyzer init!\r\n";
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <main+0xe0>)
 800035c:	1d3c      	adds	r4, r7, #4
 800035e:	461d      	mov	r5, r3
 8000360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000368:	c403      	stmia	r4!, {r0, r1}
 800036a:	8022      	strh	r2, [r4, #0]
 800036c:	3402      	adds	r4, #2
 800036e:	0c13      	lsrs	r3, r2, #16
 8000370:	7023      	strb	r3, [r4, #0]
  CDC_Transmit_FS(buffer, sizeof(buffer));
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	211b      	movs	r1, #27
 8000376:	4618      	mov	r0, r3
 8000378:	f00d fe70 	bl	800e05c <CDC_Transmit_FS>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    // simple led signal that program is working
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000382:	480e      	ldr	r0, [pc, #56]	; (80003bc <main+0xe4>)
 8000384:	f005 fdb0 	bl	8005ee8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 ff2a 	bl	80011e4 <HAL_Delay>
	    //
	    // INTERRUPTS ARE NOT A GOOD PLACE TO DO SEND DATA OR PRINT!
	    //
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000396:	4809      	ldr	r0, [pc, #36]	; (80003bc <main+0xe4>)
 8000398:	f005 fda6 	bl	8005ee8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a0:	f000 ff20 	bl	80011e4 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 80003a4:	e7ea      	b.n	800037c <main+0xa4>
 80003a6:	bf00      	nop
 80003a8:	24002698 	.word	0x24002698
 80003ac:	240024dc 	.word	0x240024dc
 80003b0:	24000290 	.word	0x24000290
 80003b4:	240002a4 	.word	0x240002a4
 80003b8:	0800e9f4 	.word	0x0800e9f4
 80003bc:	58020400 	.word	0x58020400

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b09c      	sub	sp, #112	; 0x70
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ca:	224c      	movs	r2, #76	; 0x4c
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f00e fafc 	bl	800e9cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2220      	movs	r2, #32
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f00e faf6 	bl	800e9cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003e0:	2002      	movs	r0, #2
 80003e2:	f006 ff9d 	bl	8007320 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003e6:	2300      	movs	r3, #0
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <SystemClock_Config+0x104>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a35      	ldr	r2, [pc, #212]	; (80004c4 <SystemClock_Config+0x104>)
 80003f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b33      	ldr	r3, [pc, #204]	; (80004c4 <SystemClock_Config+0x104>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	4b31      	ldr	r3, [pc, #196]	; (80004c8 <SystemClock_Config+0x108>)
 8000402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000404:	4a30      	ldr	r2, [pc, #192]	; (80004c8 <SystemClock_Config+0x108>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800040c:	4b2e      	ldr	r3, [pc, #184]	; (80004c8 <SystemClock_Config+0x108>)
 800040e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000418:	bf00      	nop
 800041a:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <SystemClock_Config+0x104>)
 800041c:	699b      	ldr	r3, [r3, #24]
 800041e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000426:	d1f8      	bne.n	800041a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000428:	4b28      	ldr	r3, [pc, #160]	; (80004cc <SystemClock_Config+0x10c>)
 800042a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042c:	f023 0303 	bic.w	r3, r3, #3
 8000430:	4a26      	ldr	r2, [pc, #152]	; (80004cc <SystemClock_Config+0x10c>)
 8000432:	f043 0302 	orr.w	r3, r3, #2
 8000436:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000438:	2329      	movs	r3, #41	; 0x29
 800043a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800043c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000440:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000442:	2301      	movs	r3, #1
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000446:	2301      	movs	r3, #1
 8000448:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044a:	2302      	movs	r3, #2
 800044c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800044e:	2302      	movs	r3, #2
 8000450:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000452:	2301      	movs	r3, #1
 8000454:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000456:	2378      	movs	r3, #120	; 0x78
 8000458:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800045a:	2302      	movs	r3, #2
 800045c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 15;
 800045e:	230f      	movs	r3, #15
 8000460:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000462:	2302      	movs	r3, #2
 8000464:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000466:	230c      	movs	r3, #12
 8000468:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800046a:	2300      	movs	r3, #0
 800046c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000476:	4618      	mov	r0, r3
 8000478:	f006 ff9c 	bl	80073b4 <HAL_RCC_OscConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000482:	f000 fb0d 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000486:	233f      	movs	r3, #63	; 0x3f
 8000488:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	2303      	movs	r3, #3
 800048c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000492:	2308      	movs	r3, #8
 8000494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000496:	2340      	movs	r3, #64	; 0x40
 8000498:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800049a:	2340      	movs	r3, #64	; 0x40
 800049c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800049e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004a4:	2340      	movs	r3, #64	; 0x40
 80004a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2104      	movs	r1, #4
 80004ac:	4618      	mov	r0, r3
 80004ae:	f007 fbad 	bl	8007c0c <HAL_RCC_ClockConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80004b8:	f000 faf2 	bl	8000aa0 <Error_Handler>
  }
}
 80004bc:	bf00      	nop
 80004be:	3770      	adds	r7, #112	; 0x70
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	58024800 	.word	0x58024800
 80004c8:	58000400 	.word	0x58000400
 80004cc:	58024400 	.word	0x58024400

080004d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
 80004f2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_ADC1_Init+0xe8>)
 80004f6:	4a31      	ldr	r2, [pc, #196]	; (80005bc <MX_ADC1_Init+0xec>)
 80004f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_ADC1_Init+0xe8>)
 80004fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000502:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000504:	2208      	movs	r2, #8
 8000506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000508:	4b2b      	ldr	r3, [pc, #172]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800050e:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000510:	2208      	movs	r2, #8
 8000512:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000516:	2200      	movs	r2, #0
 8000518:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800051c:	2200      	movs	r2, #0
 800051e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000522:	2201      	movs	r2, #1
 8000524:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000526:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000528:	2201      	movs	r2, #1
 800052a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 1;
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800052e:	2201      	movs	r2, #1
 8000530:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800053a:	2200      	movs	r2, #0
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000540:	2203      	movs	r2, #3
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000546:	2200      	movs	r2, #0
 8000548:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800054c:	2200      	movs	r2, #0
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000552:	2200      	movs	r2, #0
 8000554:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000558:	4817      	ldr	r0, [pc, #92]	; (80005b8 <MX_ADC1_Init+0xe8>)
 800055a:	f001 f8b5 	bl	80016c8 <HAL_ADC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000564:	f000 fa9c 	bl	8000aa0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	4619      	mov	r1, r3
 8000572:	4811      	ldr	r0, [pc, #68]	; (80005b8 <MX_ADC1_Init+0xe8>)
 8000574:	f002 fc2c 	bl	8002dd0 <HAL_ADCEx_MultiModeConfigChannel>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800057e:	f000 fa8f 	bl	8000aa0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_ADC1_Init+0xf0>)
 8000584:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000586:	2306      	movs	r3, #6
 8000588:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 800058a:	2302      	movs	r3, #2
 800058c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800058e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000592:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000594:	2304      	movs	r3, #4
 8000596:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_ADC1_Init+0xe8>)
 80005a2:	f001 fd4d 	bl	8002040 <HAL_ADC_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80005ac:	f000 fa78 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	240024dc 	.word	0x240024dc
 80005bc:	40022000 	.word	0x40022000
 80005c0:	3ef08000 	.word	0x3ef08000

080005c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_ETH_Init+0x80>)
 80005ca:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <MX_ETH_Init+0x84>)
 80005cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ETH_Init+0x88>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_ETH_Init+0x88>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ETH_Init+0x88>)
 80005dc:	22e1      	movs	r2, #225	; 0xe1
 80005de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ETH_Init+0x88>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_ETH_Init+0x88>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <MX_ETH_Init+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ETH_Init+0x80>)
 80005f4:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_ETH_Init+0x88>)
 80005f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_ETH_Init+0x80>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_ETH_Init+0x80>)
 8000600:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_ETH_Init+0x8c>)
 8000602:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_ETH_Init+0x80>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_ETH_Init+0x90>)
 8000608:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_ETH_Init+0x80>)
 800060c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000610:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_ETH_Init+0x80>)
 8000614:	f004 fea2 	bl	800535c <HAL_ETH_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800061e:	f000 fa3f 	bl	8000aa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	480c      	ldr	r0, [pc, #48]	; (8000658 <MX_ETH_Init+0x94>)
 8000628:	f00e f9d0 	bl	800e9cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_ETH_Init+0x94>)
 800062e:	2221      	movs	r2, #33	; 0x21
 8000630:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_ETH_Init+0x94>)
 8000634:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000638:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_ETH_Init+0x94>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	240025dc 	.word	0x240025dc
 8000648:	40028000 	.word	0x40028000
 800064c:	240022b4 	.word	0x240022b4
 8000650:	24000214 	.word	0x24000214
 8000654:	240001b4 	.word	0x240001b4
 8000658:	24002664 	.word	0x24002664

0800065c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_RTC_Init+0x48>)
 8000662:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <MX_RTC_Init+0x4c>)
 8000664:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_RTC_Init+0x48>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_RTC_Init+0x48>)
 800066e:	227f      	movs	r2, #127	; 0x7f
 8000670:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_RTC_Init+0x48>)
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_RTC_Init+0x48>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_RTC_Init+0x48>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_RTC_Init+0x48>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_RTC_Init+0x48>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_RTC_Init+0x48>)
 8000692:	f009 ffa1 	bl	800a5d8 <HAL_RTC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800069c:	f000 fa00 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	240025b8 	.word	0x240025b8
 80006a8:	58004000 	.word	0x58004000

080006ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <MX_TIM16_Init+0x4c>)
 80006b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 18000;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006b8:	f244 6250 	movw	r2, #18000	; 0x4650
 80006bc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80006ca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_TIM16_Init+0x48>)
 80006e0:	f00a f88a 	bl	800a7f8 <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006ea:	f000 f9d9 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	24002698 	.word	0x24002698
 80006f8:	40014400 	.word	0x40014400

080006fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000702:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <MX_DMA_Init+0x3c>)
 8000704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000708:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <MX_DMA_Init+0x3c>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_DMA_Init+0x3c>)
 8000714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	200b      	movs	r0, #11
 8000726:	f002 fd0c 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800072a:	200b      	movs	r0, #11
 800072c:	f002 fd23 	bl	8003176 <HAL_NVIC_EnableIRQ>

}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58024400 	.word	0x58024400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b78      	ldr	r3, [pc, #480]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	4a76      	ldr	r2, [pc, #472]	; (8000934 <MX_GPIO_Init+0x1f8>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000762:	4b74      	ldr	r3, [pc, #464]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000770:	4b70      	ldr	r3, [pc, #448]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	4a6f      	ldr	r2, [pc, #444]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000780:	4b6c      	ldr	r3, [pc, #432]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b69      	ldr	r3, [pc, #420]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	4a67      	ldr	r2, [pc, #412]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079e:	4b65      	ldr	r3, [pc, #404]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ac:	4b61      	ldr	r3, [pc, #388]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	4a60      	ldr	r2, [pc, #384]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007b4:	f043 0320 	orr.w	r3, r3, #32
 80007b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007bc:	4b5d      	ldr	r3, [pc, #372]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	f003 0320 	and.w	r3, r3, #32
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	4b5a      	ldr	r3, [pc, #360]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	4a58      	ldr	r2, [pc, #352]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007da:	4b56      	ldr	r3, [pc, #344]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	4b52      	ldr	r3, [pc, #328]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	4a51      	ldr	r2, [pc, #324]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f8:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <MX_GPIO_Init+0x1f8>)
 80007fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4b4b      	ldr	r3, [pc, #300]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4a49      	ldr	r2, [pc, #292]	; (8000934 <MX_GPIO_Init+0x1f8>)
 800080e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <MX_GPIO_Init+0x1f8>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(sample_and_hold_reset_GPIO_Port, sample_and_hold_reset_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	4843      	ldr	r0, [pc, #268]	; (8000938 <MX_GPIO_Init+0x1fc>)
 800082c:	f005 fb5c 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000836:	4841      	ldr	r0, [pc, #260]	; (800093c <MX_GPIO_Init+0x200>)
 8000838:	f005 fb56 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	483f      	ldr	r0, [pc, #252]	; (8000940 <MX_GPIO_Init+0x204>)
 8000842:	f005 fb51 	bl	8005ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : rising_edge_trigger_Pin */
  GPIO_InitStruct.Pin = rising_edge_trigger_Pin;
 8000846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000852:	2302      	movs	r3, #2
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(rising_edge_trigger_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4839      	ldr	r0, [pc, #228]	; (8000944 <MX_GPIO_Init+0x208>)
 800085e:	f005 f993 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : sample_and_hold_reset_Pin */
  GPIO_InitStruct.Pin = sample_and_hold_reset_Pin;
 8000862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800086c:	2302      	movs	r3, #2
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(sample_and_hold_reset_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	482f      	ldr	r0, [pc, #188]	; (8000938 <MX_GPIO_Init+0x1fc>)
 800087c:	f005 f984 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000880:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4828      	ldr	r0, [pc, #160]	; (800093c <MX_GPIO_Init+0x200>)
 800089a:	f005 f975 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4822      	ldr	r0, [pc, #136]	; (8000940 <MX_GPIO_Init+0x204>)
 80008b6:	f005 f967 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	481c      	ldr	r0, [pc, #112]	; (8000940 <MX_GPIO_Init+0x204>)
 80008ce:	f005 f95b 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : pulse_dur_rising_Pin */
  GPIO_InitStruct.Pin = pulse_dur_rising_Pin;
 80008d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008de:	2302      	movs	r3, #2
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pulse_dur_rising_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4815      	ldr	r0, [pc, #84]	; (8000940 <MX_GPIO_Init+0x204>)
 80008ea:	f005 f94d 	bl	8005b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : pulse_dur_falling_Pin */
  GPIO_InitStruct.Pin = pulse_dur_falling_Pin;
 80008ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008fa:	2302      	movs	r3, #2
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(pulse_dur_falling_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_GPIO_Init+0x204>)
 8000906:	f005 f93f 	bl	8005b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2017      	movs	r0, #23
 8000910:	f002 fc17 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000914:	2017      	movs	r0, #23
 8000916:	f002 fc2e 	bl	8003176 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2028      	movs	r0, #40	; 0x28
 8000920:	f002 fc0f 	bl	8003142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000924:	2028      	movs	r0, #40	; 0x28
 8000926:	f002 fc26 	bl	8003176 <HAL_NVIC_EnableIRQ>

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58024400 	.word	0x58024400
 8000938:	58021000 	.word	0x58021000
 800093c:	58020400 	.word	0x58020400
 8000940:	58021800 	.word	0x58021800
 8000944:	58021400 	.word	0x58021400

08000948 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d11d      	bne.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x4c>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4811      	ldr	r0, [pc, #68]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800095c:	f005 fadd 	bl	8005f1a <HAL_GPIO_TogglePin>
		  time_cnt++;
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000968:	6013      	str	r3, [r2, #0]
		  static uint8_t sec_buffer[] = "One second elapsed!\r\n";
		  CDC_Transmit_FS(sec_buffer, sizeof(sec_buffer));
 800096a:	2116      	movs	r1, #22
 800096c:	480e      	ldr	r0, [pc, #56]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800096e:	f00d fb75 	bl	800e05c <CDC_Transmit_FS>
		  if(time_cnt%60 == 0) {
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000978:	fba3 2301 	umull	r2, r3, r3, r1
 800097c:	095a      	lsrs	r2, r3, #5
 800097e:	4613      	mov	r3, r2
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	1aca      	subs	r2, r1, r3
 8000988:	2a00      	cmp	r2, #0
 800098a:	d103      	bne.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x4c>
			    static uint8_t min_buffer[] = "One minute elapsed!\r\n";
			    CDC_Transmit_FS(min_buffer, sizeof(min_buffer));
 800098c:	2116      	movs	r1, #22
 800098e:	4808      	ldr	r0, [pc, #32]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000990:	f00d fb64 	bl	800e05c <CDC_Transmit_FS>
		  	  }
	}
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	24002698 	.word	0x24002698
 80009a0:	58020400 	.word	0x58020400
 80009a4:	240022a8 	.word	0x240022a8
 80009a8:	24000000 	.word	0x24000000
 80009ac:	88888889 	.word	0x88888889
 80009b0:	24000018 	.word	0x24000018

080009b4 <HAL_ADC_ConvCpltCallback>:

//ADC DMA CONVERSION COMPLETE INTERRUPT
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	conv_cplt = 1;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <HAL_ADC_ConvCpltCallback+0x70>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]

	// average collected samples
	uint32_t tmp_sum = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < ADC_BUF_LEN; ++i) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	72fb      	strb	r3, [r7, #11]
 80009ca:	e00a      	b.n	80009e2 <HAL_ADC_ConvCpltCallback+0x2e>
		tmp_sum += adc_dma_buf[i];
 80009cc:	7afb      	ldrb	r3, [r7, #11]
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <HAL_ADC_ConvCpltCallback+0x74>)
 80009d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < ADC_BUF_LEN; ++i) {
 80009dc:	7afb      	ldrb	r3, [r7, #11]
 80009de:	3301      	adds	r3, #1
 80009e0:	72fb      	strb	r3, [r7, #11]
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	2b09      	cmp	r3, #9
 80009e6:	d9f1      	bls.n	80009cc <HAL_ADC_ConvCpltCallback+0x18>
	    }
	uint16_t avg_sample_val =(uint16_t) (tmp_sum / ADC_BUF_LEN);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_ADC_ConvCpltCallback+0x78>)
 80009ec:	fba2 2303 	umull	r2, r3, r2, r3
 80009f0:	08db      	lsrs	r3, r3, #3
 80009f2:	813b      	strh	r3, [r7, #8]

	// increment index corresponding to registered amplitude
	pulse_ampl_cnt_arr[avg_sample_val]++;
 80009f4:	893b      	ldrh	r3, [r7, #8]
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_ADC_ConvCpltCallback+0x7c>)
 80009f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009fc:	3201      	adds	r2, #1
 80009fe:	b291      	uxth	r1, r2
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	// increment pulse count
	pulse_cnt++;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_ADC_ConvCpltCallback+0x80>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <HAL_ADC_ConvCpltCallback+0x80>)
 8000a0e:	6013      	str	r3, [r2, #0]

	//reset S&H block
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <HAL_ADC_ConvCpltCallback+0x84>)
 8000a18:	f005 fa66 	bl	8005ee8 <HAL_GPIO_WritePin>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	240022b0 	.word	0x240022b0
 8000a28:	24000290 	.word	0x24000290
 8000a2c:	cccccccd 	.word	0xcccccccd
 8000a30:	240002a4 	.word	0x240002a4
 8000a34:	240022a4 	.word	0x240022a4
 8000a38:	58021000 	.word	0x58021000

08000a3c <HAL_GPIO_EXTI_Callback>:

//Interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_9){
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a4c:	d106      	bne.n	8000a5c <HAL_GPIO_EXTI_Callback+0x20>
		//pulse duration - rising
		//enable S&H block - peak capture
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a56:	f005 fa47 	bl	8005ee8 <HAL_GPIO_WritePin>
	} else {
		//Unhandled interrupt - exception
	    Error_Handler();
	}

}
 8000a5a:	e016      	b.n	8000a8a <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_14){
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a62:	d106      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x36>
		SET_BIT(ADC1->CR, ADC_CR_ADSTART);
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6093      	str	r3, [r2, #8]
}
 8000a70:	e00b      	b.n	8000a8a <HAL_GPIO_EXTI_Callback+0x4e>
	} else if (GPIO_Pin == GPIO_PIN_15){
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a78:	d105      	bne.n	8000a86 <HAL_GPIO_EXTI_Callback+0x4a>
		rising_slope_cnt++;
 8000a7a:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x60>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x60>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	e001      	b.n	8000a8a <HAL_GPIO_EXTI_Callback+0x4e>
	    Error_Handler();
 8000a86:	f000 f80b 	bl	8000aa0 <Error_Handler>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	58021000 	.word	0x58021000
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	240022ac 	.word	0x240022ac

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x30>)
 8000ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x30>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x30>)
 8000ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	58024400 	.word	0x58024400

08000ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b0b8      	sub	sp, #224	; 0xe0
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	22bc      	movs	r2, #188	; 0xbc
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f00d ff63 	bl	800e9cc <memset>
  if(hadc->Instance==ADC1)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a47      	ldr	r2, [pc, #284]	; (8000c28 <HAL_ADC_MspInit+0x148>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	f040 8087 	bne.w	8000c20 <HAL_ADC_MspInit+0x140>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000b16:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000b1c:	2312      	movs	r3, #18
 8000b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b2c:	23c0      	movs	r3, #192	; 0xc0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b30:	2320      	movs	r3, #32
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000b34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4618      	mov	r0, r3
 8000b46:	f007 fbc1 	bl	80082cc <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 8000b50:	f7ff ffa6 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_ADC_MspInit+0x14c>)
 8000b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b5a:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <HAL_ADC_MspInit+0x14c>)
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b64:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <HAL_ADC_MspInit+0x14c>)
 8000b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6a:	f003 0320 	and.w	r3, r3, #32
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_ADC_MspInit+0x14c>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	4a2c      	ldr	r2, [pc, #176]	; (8000c2c <HAL_ADC_MspInit+0x14c>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <HAL_ADC_MspInit+0x14c>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = analog_in_Pin;
 8000b90:	2308      	movs	r3, #8
 8000b92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(analog_in_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4821      	ldr	r0, [pc, #132]	; (8000c30 <HAL_ADC_MspInit+0x150>)
 8000baa:	f004 ffed 	bl	8005b88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <HAL_ADC_MspInit+0x158>)
 8000bb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bb6:	2209      	movs	r2, #9
 8000bb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bcc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000be8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf4:	480f      	ldr	r0, [pc, #60]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000bf6:	f002 fad9 	bl	80031ac <HAL_DMA_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000c00:	f7ff ff4e 	bl	8000aa0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000c08:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_ADC_MspInit+0x154>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2012      	movs	r0, #18
 8000c16:	f002 fa94 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c1a:	2012      	movs	r0, #18
 8000c1c:	f002 faab 	bl	8003176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	37e0      	adds	r7, #224	; 0xe0
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020000 	.word	0x58020000
 8000c34:	24002540 	.word	0x24002540
 8000c38:	40020010 	.word	0x40020010

08000c3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a59      	ldr	r2, [pc, #356]	; (8000dc0 <HAL_ETH_MspInit+0x184>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	f040 80ab 	bne.w	8000db6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c60:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c66:	4a57      	ldr	r2, [pc, #348]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c70:	4b54      	ldr	r3, [pc, #336]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c7a:	623b      	str	r3, [r7, #32]
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c84:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c8e:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c9c:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca2:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cac:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	61bb      	str	r3, [r7, #24]
 8000cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	4a40      	ldr	r2, [pc, #256]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cde:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000cfe:	f043 0302 	orr.w	r3, r3, #2
 8000d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	4a2a      	ldr	r2, [pc, #168]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d24:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <HAL_ETH_MspInit+0x188>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d32:	2332      	movs	r3, #50	; 0x32
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d42:	230b      	movs	r3, #11
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	481e      	ldr	r0, [pc, #120]	; (8000dc8 <HAL_ETH_MspInit+0x18c>)
 8000d4e:	f004 ff1b 	bl	8005b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d52:	2386      	movs	r3, #134	; 0x86
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d62:	230b      	movs	r3, #11
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4817      	ldr	r0, [pc, #92]	; (8000dcc <HAL_ETH_MspInit+0x190>)
 8000d6e:	f004 ff0b 	bl	8005b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d84:	230b      	movs	r3, #11
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <HAL_ETH_MspInit+0x194>)
 8000d90:	f004 fefa 	bl	8005b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da6:	230b      	movs	r3, #11
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <HAL_ETH_MspInit+0x198>)
 8000db2:	f004 fee9 	bl	8005b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40028000 	.word	0x40028000
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58020800 	.word	0x58020800
 8000dcc:	58020000 	.word	0x58020000
 8000dd0:	58020400 	.word	0x58020400
 8000dd4:	58021800 	.word	0x58021800

08000dd8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0b2      	sub	sp, #200	; 0xc8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	22bc      	movs	r2, #188	; 0xbc
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f00d fdef 	bl	800e9cc <memset>
  if(hrtc->Instance==RTC)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_RTC_MspInit+0x58>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d116      	bne.n	8000e26 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000df8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 fa5e 	bl	80082cc <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e16:	f7ff fe43 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_RTC_MspInit+0x5c>)
 8000e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <HAL_RTC_MspInit+0x5c>)
 8000e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e24:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	37c8      	adds	r7, #200	; 0xc8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	58004000 	.word	0x58004000
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_TIM_Base_MspInit+0x48>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d116      	bne.n	8000e78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_TIM_Base_MspInit+0x4c>)
 8000e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x4c>)
 8000e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_TIM_Base_MspInit+0x4c>)
 8000e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2075      	movs	r0, #117	; 0x75
 8000e6e:	f002 f968 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000e72:	2075      	movs	r0, #117	; 0x75
 8000e74:	f002 f97f 	bl	8003176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40014400 	.word	0x40014400
 8000e84:	58024400 	.word	0x58024400

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f966 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA1_Stream0_IRQHandler+0x10>)
 8000ee2:	f002 ff29 	bl	8003d38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	24002540 	.word	0x24002540

08000ef0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <ADC_IRQHandler+0x10>)
 8000ef6:	f000 fe4b 	bl	8001b90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240024dc 	.word	0x240024dc

08000f04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_VBUS_Pin);
 8000f08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f0c:	f005 f81f 	bl	8005f4e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LD3_Pin);
 8000f18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f1c:	f005 f817 	bl	8005f4e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(rising_edge_trigger_Pin);
 8000f20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f24:	f005 f813 	bl	8005f4e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <OTG_FS_IRQHandler+0x10>)
 8000f32:	f005 f97d 	bl	8006230 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24003bc0 	.word	0x24003bc0

08000f40 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM16_IRQHandler+0x10>)
 8000f46:	f009 fd27 	bl	800a998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	24002698 	.word	0x24002698

08000f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <SystemInit+0xec>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a38      	ldr	r2, [pc, #224]	; (8001040 <SystemInit+0xec>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f68:	4b36      	ldr	r3, [pc, #216]	; (8001044 <SystemInit+0xf0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 030f 	and.w	r3, r3, #15
 8000f70:	2b06      	cmp	r3, #6
 8000f72:	d807      	bhi.n	8000f84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <SystemInit+0xf0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f023 030f 	bic.w	r3, r3, #15
 8000f7c:	4a31      	ldr	r2, [pc, #196]	; (8001044 <SystemInit+0xf0>)
 8000f7e:	f043 0307 	orr.w	r3, r3, #7
 8000f82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <SystemInit+0xf4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a2f      	ldr	r2, [pc, #188]	; (8001048 <SystemInit+0xf4>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <SystemInit+0xf4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <SystemInit+0xf4>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	492b      	ldr	r1, [pc, #172]	; (8001048 <SystemInit+0xf4>)
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <SystemInit+0xf8>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <SystemInit+0xf0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <SystemInit+0xf0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f023 030f 	bic.w	r3, r3, #15
 8000fb6:	4a23      	ldr	r2, [pc, #140]	; (8001044 <SystemInit+0xf0>)
 8000fb8:	f043 0307 	orr.w	r3, r3, #7
 8000fbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <SystemInit+0xf4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <SystemInit+0xf4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <SystemInit+0xf4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <SystemInit+0xf4>)
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <SystemInit+0xfc>)
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <SystemInit+0xf4>)
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <SystemInit+0x100>)
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <SystemInit+0xf4>)
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <SystemInit+0x104>)
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <SystemInit+0xf4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <SystemInit+0xf4>)
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <SystemInit+0x104>)
 8000fec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SystemInit+0xf4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SystemInit+0xf4>)
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <SystemInit+0x104>)
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SystemInit+0xf4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <SystemInit+0xf4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <SystemInit+0xf4>)
 8001006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SystemInit+0xf4>)
 800100e:	2200      	movs	r2, #0
 8001010:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <SystemInit+0x108>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <SystemInit+0x10c>)
 8001018:	4013      	ands	r3, r2
 800101a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800101e:	d202      	bcs.n	8001026 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <SystemInit+0x110>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <SystemInit+0x114>)
 8001028:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800102c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <SystemInit+0xec>)
 8001030:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001034:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	52002000 	.word	0x52002000
 8001048:	58024400 	.word	0x58024400
 800104c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001050:	02020200 	.word	0x02020200
 8001054:	01ff0000 	.word	0x01ff0000
 8001058:	01010280 	.word	0x01010280
 800105c:	5c001000 	.word	0x5c001000
 8001060:	ffff0000 	.word	0xffff0000
 8001064:	51008108 	.word	0x51008108
 8001068:	52004000 	.word	0x52004000

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001070:	f7ff ff70 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001074:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001076:	e003      	b.n	8001080 <LoopCopyDataInit>

08001078 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800107a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800107c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800107e:	3104      	adds	r1, #4

08001080 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001080:	480a      	ldr	r0, [pc, #40]	; (80010ac <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001084:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001086:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001088:	d3f6      	bcc.n	8001078 <CopyDataInit>
  ldr  r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800108c:	e002      	b.n	8001094 <LoopFillZerobss>

0800108e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800108e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001090:	f842 3b04 	str.w	r3, [r2], #4

08001094 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001096:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001098:	d3f9      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f00d fc65 	bl	800e968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff f91b 	bl	80002d8 <main>
  bx  lr    
 80010a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80010a8:	0800ea78 	.word	0x0800ea78
  ldr  r0, =_sdata
 80010ac:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80010b0:	240001b4 	.word	0x240001b4
  ldr  r2, =_sbss
 80010b4:	24000274 	.word	0x24000274
  ldr  r3, = _ebss
 80010b8:	24003fc8 	.word	0x24003fc8

080010bc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC3_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c6:	2003      	movs	r0, #3
 80010c8:	f002 f830 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010cc:	f006 ff54 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_Init+0x68>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	0a1b      	lsrs	r3, r3, #8
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	4913      	ldr	r1, [pc, #76]	; (800112c <HAL_Init+0x6c>)
 80010de:	5ccb      	ldrb	r3, [r1, r3]
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <HAL_Init+0x68>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_Init+0x6c>)
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <HAL_Init+0x70>)
 8001102:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_Init+0x74>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f814 	bl	8001138 <HAL_InitTick>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e002      	b.n	8001120 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800111a:	f7ff fcc7 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58024400 	.word	0x58024400
 800112c:	0800ea58 	.word	0x0800ea58
 8001130:	24000034 	.word	0x24000034
 8001134:	24000030 	.word	0x24000030

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_InitTick+0x60>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e021      	b.n	8001190 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_InitTick+0x64>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_InitTick+0x60>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f002 f815 	bl	8003192 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f001 ffdf 	bl	8003142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x68>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2400003c 	.word	0x2400003c
 800119c:	24000030 	.word	0x24000030
 80011a0:	24000038 	.word	0x24000038

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2400003c 	.word	0x2400003c
 80011c8:	240026e4 	.word	0x240026e4

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	240026e4 	.word	0x240026e4

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2400003c 	.word	0x2400003c

0800122c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetREVID+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0c1b      	lsrs	r3, r3, #16
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	5c001000 	.word	0x5c001000

08001244 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001254:	4904      	ldr	r1, [pc, #16]	; (8001268 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	58000400 	.word	0x58000400

0800126c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	609a      	str	r2, [r3, #8]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
 80012e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3360      	adds	r3, #96	; 0x60
 80012e6:	461a      	mov	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	430b      	orrs	r3, r1
 8001302:	431a      	orrs	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	431a      	orrs	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	611a      	str	r2, [r3, #16]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001346:	b480      	push	{r7}
 8001348:	b087      	sub	sp, #28
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	3360      	adds	r3, #96	; 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	431a      	orrs	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]
  }
}
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b087      	sub	sp, #28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3330      	adds	r3, #48	; 0x30
 80013b2:	461a      	mov	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	211f      	movs	r1, #31
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	401a      	ands	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0e9b      	lsrs	r3, r3, #26
 80013da:	f003 011f 	and.w	r1, r3, #31
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f003 031f 	and.w	r3, r3, #31
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013ee:	bf00      	nop
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f023 0203 	bic.w	r2, r3, #3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001446:	b480      	push	{r7}
 8001448:	b087      	sub	sp, #28
 800144a:	af00      	add	r7, sp, #0
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3314      	adds	r3, #20
 8001456:	461a      	mov	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	0e5b      	lsrs	r3, r3, #25
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	4413      	add	r3, r2
 8001464:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	0d1b      	lsrs	r3, r3, #20
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2107      	movs	r1, #7
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	0d1b      	lsrs	r3, r3, #20
 8001480:	f003 031f 	and.w	r3, r3, #31
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	431a      	orrs	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001490:	bf00      	nop
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014b4:	43db      	mvns	r3, r3
 80014b6:	401a      	ands	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0318 	and.w	r3, r3, #24
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014c0:	40d9      	lsrs	r1, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	400b      	ands	r3, r1
 80014c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	000fffff 	.word	0x000fffff

080014e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <LL_ADC_DisableDeepPowerDown+0x20>)
 800152a:	4013      	ands	r3, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6093      	str	r3, [r2, #8]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	5fffffc0 	.word	0x5fffffc0

08001540 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001554:	d101      	bne.n	800155a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <LL_ADC_EnableInternalRegulator+0x24>)
 8001576:	4013      	ands	r3, r2
 8001578:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	6fffffc0 	.word	0x6fffffc0

08001590 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015a4:	d101      	bne.n	80015aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <LL_ADC_Enable+0x24>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	7fffffc0 	.word	0x7fffffc0

080015e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <LL_ADC_Disable+0x24>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	f043 0202 	orr.w	r2, r3, #2
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	7fffffc0 	.word	0x7fffffc0

08001608 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <LL_ADC_IsEnabled+0x18>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <LL_ADC_IsEnabled+0x1a>
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b02      	cmp	r3, #2
 8001640:	d101      	bne.n	8001646 <LL_ADC_IsDisableOngoing+0x18>
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <LL_ADC_IsDisableOngoing+0x1a>
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <LL_ADC_REG_StartConversion+0x24>)
 8001662:	4013      	ands	r3, r2
 8001664:	f043 0204 	orr.w	r2, r3, #4
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	7fffffc0 	.word	0x7fffffc0

0800167c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b04      	cmp	r3, #4
 800168e:	d101      	bne.n	8001694 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d101      	bne.n	80016ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b089      	sub	sp, #36	; 0x24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e18e      	b.n	8001a00 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff f9f5 	bl	8000ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff19 	bl	8001540 <LL_ADC_IsDeepPowerDownEnabled>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff feff 	bl	800151c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff34 	bl	8001590 <LL_ADC_IsInternalRegulatorEnabled>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d114      	bne.n	8001758 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff18 	bl	8001568 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001738:	4b9a      	ldr	r3, [pc, #616]	; (80019a4 <HAL_ADC_Init+0x2dc>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	4a9a      	ldr	r2, [pc, #616]	; (80019a8 <HAL_ADC_Init+0x2e0>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	099b      	lsrs	r3, r3, #6
 8001746:	3301      	adds	r3, #1
 8001748:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800174a:	e002      	b.n	8001752 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	3b01      	subs	r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f9      	bne.n	800174c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff17 	bl	8001590 <LL_ADC_IsInternalRegulatorEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10d      	bne.n	8001784 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176c:	f043 0210 	orr.w	r2, r3, #16
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff77 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 800178e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8128 	bne.w	80019ee <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 8124 	bne.w	80019ee <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff24 	bl	8001608 <LL_ADC_IsEnabled>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d136      	bne.n	8001834 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a78      	ldr	r2, [pc, #480]	; (80019ac <HAL_ADC_Init+0x2e4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d004      	beq.n	80017da <HAL_ADC_Init+0x112>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a76      	ldr	r2, [pc, #472]	; (80019b0 <HAL_ADC_Init+0x2e8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10e      	bne.n	80017f8 <HAL_ADC_Init+0x130>
 80017da:	4874      	ldr	r0, [pc, #464]	; (80019ac <HAL_ADC_Init+0x2e4>)
 80017dc:	f7ff ff14 	bl	8001608 <LL_ADC_IsEnabled>
 80017e0:	4604      	mov	r4, r0
 80017e2:	4873      	ldr	r0, [pc, #460]	; (80019b0 <HAL_ADC_Init+0x2e8>)
 80017e4:	f7ff ff10 	bl	8001608 <LL_ADC_IsEnabled>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4323      	orrs	r3, r4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e008      	b.n	800180a <HAL_ADC_Init+0x142>
 80017f8:	486e      	ldr	r0, [pc, #440]	; (80019b4 <HAL_ADC_Init+0x2ec>)
 80017fa:	f7ff ff05 	bl	8001608 <LL_ADC_IsEnabled>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d012      	beq.n	8001834 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a66      	ldr	r2, [pc, #408]	; (80019ac <HAL_ADC_Init+0x2e4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d004      	beq.n	8001822 <HAL_ADC_Init+0x15a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a64      	ldr	r2, [pc, #400]	; (80019b0 <HAL_ADC_Init+0x2e8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_ADC_Init+0x15e>
 8001822:	4a65      	ldr	r2, [pc, #404]	; (80019b8 <HAL_ADC_Init+0x2f0>)
 8001824:	e000      	b.n	8001828 <HAL_ADC_Init+0x160>
 8001826:	4a65      	ldr	r2, [pc, #404]	; (80019bc <HAL_ADC_Init+0x2f4>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff fd1c 	bl	800126c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001834:	f7ff fcfa 	bl	800122c <HAL_GetREVID>
 8001838:	4603      	mov	r3, r0
 800183a:	f241 0203 	movw	r2, #4099	; 0x1003
 800183e:	4293      	cmp	r3, r2
 8001840:	d914      	bls.n	800186c <HAL_ADC_Init+0x1a4>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d110      	bne.n	800186c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7d5b      	ldrb	r3, [r3, #21]
 800184e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001854:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800185a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7f1b      	ldrb	r3, [r3, #28]
 8001860:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001862:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001864:	f043 030c 	orr.w	r3, r3, #12
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	e00d      	b.n	8001888 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7d5b      	ldrb	r3, [r3, #21]
 8001870:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001876:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800187c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7f1b      	ldrb	r3, [r3, #28]
 8001882:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7f1b      	ldrb	r3, [r3, #28]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	3b01      	subs	r3, #1
 8001896:	045b      	lsls	r3, r3, #17
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_ADC_Init+0x2f8>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	69b9      	ldr	r1, [r7, #24]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fed2 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 80018d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fedf 	bl	80016a2 <LL_ADC_INJ_IsConversionOngoing>
 80018e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d14a      	bne.n	8001982 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d147      	bne.n	8001982 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7d1b      	ldrb	r3, [r3, #20]
 80018f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_ADC_Init+0x2fc>)
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	69b9      	ldr	r1, [r7, #24]
 8001910:	430b      	orrs	r3, r1
 8001912:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800191a:	2b01      	cmp	r3, #1
 800191c:	d11b      	bne.n	8001956 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_ADC_Init+0x300>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001932:	3a01      	subs	r2, #1
 8001934:	0411      	lsls	r1, r2, #16
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001940:	4311      	orrs	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001946:	430a      	orrs	r2, r1
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	e007      	b.n	8001966 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f001 f82d 	bl	80029dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d120      	bne.n	80019cc <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f023 010f 	bic.w	r1, r3, #15
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	1e5a      	subs	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	631a      	str	r2, [r3, #48]	; 0x30
 80019a2:	e01b      	b.n	80019dc <HAL_ADC_Init+0x314>
 80019a4:	24000030 	.word	0x24000030
 80019a8:	053e2d63 	.word	0x053e2d63
 80019ac:	40022000 	.word	0x40022000
 80019b0:	40022100 	.word	0x40022100
 80019b4:	58026000 	.word	0x58026000
 80019b8:	40022300 	.word	0x40022300
 80019bc:	58026300 	.word	0x58026300
 80019c0:	fff0c003 	.word	0xfff0c003
 80019c4:	ffffbffc 	.word	0xffffbffc
 80019c8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020f 	bic.w	r2, r2, #15
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	f023 0303 	bic.w	r3, r3, #3
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	655a      	str	r2, [r3, #84]	; 0x54
 80019ec:	e007      	b.n	80019fe <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3724      	adds	r7, #36	; 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}

08001a08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a55      	ldr	r2, [pc, #340]	; (8001b70 <HAL_ADC_Start_DMA+0x168>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_ADC_Start_DMA+0x20>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_ADC_Start_DMA+0x16c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_Start_DMA+0x24>
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_ADC_Start_DMA+0x170>)
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_Start_DMA+0x26>
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_ADC_Start_DMA+0x174>)
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fd58 	bl	80014e4 <LL_ADC_GetMultimode>
 8001a34:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fe1e 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 808c 	bne.w	8001b60 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Start_DMA+0x4e>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e087      	b.n	8001b66 <HAL_ADC_Start_DMA+0x15e>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d002      	beq.n	8001a70 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d170      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fe35 	bl	80026e0 <ADC_Enable>
 8001a76:	4603      	mov	r3, r0
 8001a78:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a7a:	7dfb      	ldrb	r3, [r7, #23]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d163      	bne.n	8001b48 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a84:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_ADC_Start_DMA+0x178>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a37      	ldr	r2, [pc, #220]	; (8001b74 <HAL_ADC_Start_DMA+0x16c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d002      	beq.n	8001aa0 <HAL_ADC_Start_DMA+0x98>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e000      	b.n	8001aa2 <HAL_ADC_Start_DMA+0x9a>
 8001aa0:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_ADC_Start_DMA+0x168>)
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d002      	beq.n	8001ab0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f023 0206 	bic.w	r2, r3, #6
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad4:	e002      	b.n	8001adc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae0:	4a28      	ldr	r2, [pc, #160]	; (8001b84 <HAL_ADC_Start_DMA+0x17c>)
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_ADC_Start_DMA+0x180>)
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_ADC_Start_DMA+0x184>)
 8001af2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	221c      	movs	r2, #28
 8001afa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0210 	orr.w	r2, r2, #16
 8001b12:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f7ff fc6b 	bl	80013fa <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3340      	adds	r3, #64	; 0x40
 8001b2e:	4619      	mov	r1, r3
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f001 fe96 	bl	8003864 <HAL_DMA_Start_IT>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fd87 	bl	8001654 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001b46:	e00d      	b.n	8001b64 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001b50:	e008      	b.n	8001b64 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b5e:	e001      	b.n	8001b64 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
 8001b62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40022100 	.word	0x40022100
 8001b78:	40022300 	.word	0x40022300
 8001b7c:	58026300 	.word	0x58026300
 8001b80:	fffff0fe 	.word	0xfffff0fe
 8001b84:	080028b3 	.word	0x080028b3
 8001b88:	0800298b 	.word	0x0800298b
 8001b8c:	080029a7 	.word	0x080029a7

08001b90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a87      	ldr	r2, [pc, #540]	; (8001dd0 <HAL_ADC_IRQHandler+0x240>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x30>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a86      	ldr	r2, [pc, #536]	; (8001dd4 <HAL_ADC_IRQHandler+0x244>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x34>
 8001bc0:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <HAL_ADC_IRQHandler+0x248>)
 8001bc2:	e000      	b.n	8001bc6 <HAL_ADC_IRQHandler+0x36>
 8001bc4:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_ADC_IRQHandler+0x24c>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc8c 	bl	80014e4 <LL_ADC_GetMultimode>
 8001bcc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d017      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x78>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d012      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f001 f8de 	bl	8002dbc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2202      	movs	r2, #2
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_IRQHandler+0x8c>
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10a      	bne.n	8001c32 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8083 	beq.w	8001d2e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d07d      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fb94 	bl	800137c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d062      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a5d      	ldr	r2, [pc, #372]	; (8001dd4 <HAL_ADC_IRQHandler+0x244>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d002      	beq.n	8001c6a <HAL_ADC_IRQHandler+0xda>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_IRQHandler+0xdc>
 8001c6a:	4b59      	ldr	r3, [pc, #356]	; (8001dd0 <HAL_ADC_IRQHandler+0x240>)
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d008      	beq.n	8001c86 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d002      	beq.n	8001c86 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b09      	cmp	r3, #9
 8001c84:	d104      	bne.n	8001c90 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	623b      	str	r3, [r7, #32]
 8001c8e:	e00c      	b.n	8001caa <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_ADC_IRQHandler+0x244>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d002      	beq.n	8001ca0 <HAL_ADC_IRQHandler+0x110>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_IRQHandler+0x112>
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_ADC_IRQHandler+0x240>)
 8001ca2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d135      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d12e      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fcd8 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11a      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 020c 	bic.w	r2, r2, #12
 8001ce0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d112      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
 8001d06:	e00b      	b.n	8001d20 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0c:	f043 0210 	orr.w	r2, r3, #16
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7fe fe47 	bl	80009b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d004      	beq.n	8001d42 <HAL_ADC_IRQHandler+0x1b2>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80a0 	beq.w	8001e8e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 809a 	beq.w	8001e8e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fb52 	bl	8001420 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d7c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fafa 	bl	800137c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d88:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_ADC_IRQHandler+0x244>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d002      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x20a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	e000      	b.n	8001d9c <HAL_ADC_IRQHandler+0x20c>
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_ADC_IRQHandler+0x240>)
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d008      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d002      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b07      	cmp	r3, #7
 8001db4:	d104      	bne.n	8001dc0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	e014      	b.n	8001dea <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <HAL_ADC_IRQHandler+0x244>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00a      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x250>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	e008      	b.n	8001de2 <HAL_ADC_IRQHandler+0x252>
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40022100 	.word	0x40022100
 8001dd8:	40022300 	.word	0x40022300
 8001ddc:	58026300 	.word	0x58026300
 8001de0:	4b84      	ldr	r3, [pc, #528]	; (8001ff4 <HAL_ADC_IRQHandler+0x464>)
 8001de2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d047      	beq.n	8001e80 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_ADC_IRQHandler+0x27a>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03f      	beq.n	8001e80 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d13a      	bne.n	8001e80 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e14:	2b40      	cmp	r3, #64	; 0x40
 8001e16:	d133      	bne.n	8001e80 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d12e      	bne.n	8001e80 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fc3b 	bl	80016a2 <LL_ADC_INJ_IsConversionOngoing>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d11a      	bne.n	8001e68 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e40:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d112      	bne.n	8001e80 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f043 0201 	orr.w	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
 8001e66:	e00b      	b.n	8001e80 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6c:	f043 0210 	orr.w	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 ff73 	bl	8002d6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2260      	movs	r2, #96	; 0x60
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d011      	beq.n	8001ebc <HAL_ADC_IRQHandler+0x32c>
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00c      	beq.n	8001ebc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8b2 	bl	8002018 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <HAL_ADC_IRQHandler+0x35c>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 ff59 	bl	8002d94 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d012      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x38c>
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00d      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 ff4b 	bl	8002da8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d043      	beq.n	8001fae <HAL_ADC_IRQHandler+0x41e>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d03e      	beq.n	8001fae <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3c:	e021      	b.n	8001f82 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d015      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <HAL_ADC_IRQHandler+0x464>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x3c8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_ADC_IRQHandler+0x468>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x3cc>
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_ADC_IRQHandler+0x46c>)
 8001f5a:	e000      	b.n	8001f5e <HAL_ADC_IRQHandler+0x3ce>
 8001f5c:	4b28      	ldr	r3, [pc, #160]	; (8002000 <HAL_ADC_IRQHandler+0x470>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff face 	bl	8001500 <LL_ADC_GetMultiDMATransfer>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00b      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e008      	b.n	8001f82 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10e      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f043 0202 	orr.w	r2, r3, #2
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f843 	bl	800202c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2210      	movs	r2, #16
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d018      	beq.n	8001fea <HAL_ADC_IRQHandler+0x45a>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d013      	beq.n	8001fea <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f043 0208 	orr.w	r2, r3, #8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fecb 	bl	8002d80 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3728      	adds	r7, #40	; 0x28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40022100 	.word	0x40022100
 8001ffc:	40022300 	.word	0x40022300
 8002000:	58026300 	.word	0x58026300

08002004 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b0a1      	sub	sp, #132	; 0x84
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4a9d      	ldr	r2, [pc, #628]	; (80022d0 <HAL_ADC_ConfigChannel+0x290>)
 800205a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x2a>
 8002066:	2302      	movs	r3, #2
 8002068:	e321      	b.n	80026ae <HAL_ADC_ConfigChannel+0x66e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fb00 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f040 8306 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800208c:	2b00      	cmp	r3, #0
 800208e:	d108      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x62>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2201      	movs	r2, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	e016      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x90>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020b2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e003      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80020be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f003 031f 	and.w	r3, r3, #31
 80020ca:	2201      	movs	r2, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	69d1      	ldr	r1, [r2, #28]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	430b      	orrs	r3, r1
 80020dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f7ff f959 	bl	80013a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fac1 	bl	800167c <LL_ADC_REG_IsConversionOngoing>
 80020fa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff face 	bl	80016a2 <LL_ADC_INJ_IsConversionOngoing>
 8002106:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80b3 	bne.w	8002276 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002110:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80af 	bne.w	8002276 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	461a      	mov	r2, r3
 8002126:	f7ff f98e 	bl	8001446 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800212a:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_ADC_ConfigChannel+0x294>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002136:	d10b      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x110>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	e01d      	b.n	800218c <HAL_ADC_ConfigChannel+0x14c>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10b      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x136>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	e00a      	b.n	800218c <HAL_ADC_ConfigChannel+0x14c>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	695a      	ldr	r2, [r3, #20]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d027      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021a4:	f7ff f896 	bl	80012d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6919      	ldr	r1, [r3, #16]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	7e5b      	ldrb	r3, [r3, #25]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d102      	bne.n	80021be <HAL_ADC_ConfigChannel+0x17e>
 80021b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80021bc:	e000      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x180>
 80021be:	2300      	movs	r3, #0
 80021c0:	461a      	mov	r2, r3
 80021c2:	f7ff f8c0 	bl	8001346 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	7e1b      	ldrb	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x19c>
 80021d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021da:	e000      	b.n	80021de <HAL_ADC_ConfigChannel+0x19e>
 80021dc:	2300      	movs	r3, #0
 80021de:	461a      	mov	r2, r3
 80021e0:	f7ff f898 	bl	8001314 <LL_ADC_SetDataRightShift>
 80021e4:	e047      	b.n	8002276 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	069b      	lsls	r3, r3, #26
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d107      	bne.n	800220a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002208:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002210:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	069b      	lsls	r3, r3, #26
 800221a:	429a      	cmp	r2, r3
 800221c:	d107      	bne.n	800222e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800222c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002234:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	069b      	lsls	r3, r3, #26
 800223e:	429a      	cmp	r2, r3
 8002240:	d107      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002250:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002258:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	069b      	lsls	r3, r3, #26
 8002262:	429a      	cmp	r2, r3
 8002264:	d107      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002274:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f9c4 	bl	8001608 <LL_ADC_IsEnabled>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 820d 	bne.w	80026a2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	461a      	mov	r2, r3
 8002296:	f7ff f901 	bl	800149c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_ADC_ConfigChannel+0x290>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f040 8133 	bne.w	800250c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d110      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x298>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0e9b      	lsrs	r3, r3, #26
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	bf94      	ite	ls
 80022c6:	2301      	movls	r3, #1
 80022c8:	2300      	movhi	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e01e      	b.n	800230c <HAL_ADC_ConfigChannel+0x2cc>
 80022ce:	bf00      	nop
 80022d0:	47ff0000 	.word	0x47ff0000
 80022d4:	5c001000 	.word	0x5c001000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80022f0:	2320      	movs	r3, #32
 80022f2:	e003      	b.n	80022fc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80022f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	2b09      	cmp	r3, #9
 8002304:	bf94      	ite	ls
 8002306:	2301      	movls	r3, #1
 8002308:	2300      	movhi	r3, #0
 800230a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230c:	2b00      	cmp	r3, #0
 800230e:	d079      	beq.n	8002404 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_ADC_ConfigChannel+0x2ec>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	3301      	adds	r3, #1
 8002324:	069b      	lsls	r3, r3, #26
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	e015      	b.n	8002358 <HAL_ADC_ConfigChannel+0x318>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800233a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800233e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002344:	2320      	movs	r3, #32
 8002346:	e003      	b.n	8002350 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x338>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0e9b      	lsrs	r3, r3, #26
 800236a:	3301      	adds	r3, #1
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	e017      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x368>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800238a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	ea42 0103 	orr.w	r1, r2, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x38e>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	3301      	adds	r3, #1
 80023c0:	f003 021f 	and.w	r2, r3, #31
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	051b      	lsls	r3, r3, #20
 80023cc:	e018      	b.n	8002400 <HAL_ADC_ConfigChannel+0x3c0>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80023ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002400:	430b      	orrs	r3, r1
 8002402:	e07e      	b.n	8002502 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x3e0>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	3301      	adds	r3, #1
 8002418:	069b      	lsls	r3, r3, #26
 800241a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241e:	e015      	b.n	800244c <HAL_ADC_ConfigChannel+0x40c>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e003      	b.n	8002444 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	069b      	lsls	r3, r3, #26
 8002448:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_ADC_ConfigChannel+0x42c>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	3301      	adds	r3, #1
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f303 	lsl.w	r3, r1, r3
 800246a:	e017      	b.n	800249c <HAL_ADC_ConfigChannel+0x45c>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	61bb      	str	r3, [r7, #24]
  return result;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2101      	movs	r1, #1
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	ea42 0103 	orr.w	r1, r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x488>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	3301      	adds	r3, #1
 80024b4:	f003 021f 	and.w	r2, r3, #31
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	3b1e      	subs	r3, #30
 80024c0:	051b      	lsls	r3, r3, #20
 80024c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024c6:	e01b      	b.n	8002500 <HAL_ADC_ConfigChannel+0x4c0>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	60fb      	str	r3, [r7, #12]
  return result;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80024e0:	2320      	movs	r3, #32
 80024e2:	e003      	b.n	80024ec <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f003 021f 	and.w	r2, r3, #31
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	3b1e      	subs	r3, #30
 80024fa:	051b      	lsls	r3, r3, #20
 80024fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002500:	430b      	orrs	r3, r1
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	6892      	ldr	r2, [r2, #8]
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe ff9d 	bl	8001446 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f280 80c6 	bge.w	80026a2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a67      	ldr	r2, [pc, #412]	; (80026b8 <HAL_ADC_ConfigChannel+0x678>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_ADC_ConfigChannel+0x4ea>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a65      	ldr	r2, [pc, #404]	; (80026bc <HAL_ADC_ConfigChannel+0x67c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x4ee>
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_ADC_ConfigChannel+0x680>)
 800252c:	e000      	b.n	8002530 <HAL_ADC_ConfigChannel+0x4f0>
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_ADC_ConfigChannel+0x684>)
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fec1 	bl	80012b8 <LL_ADC_GetCommonPathInternalCh>
 8002536:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a5e      	ldr	r2, [pc, #376]	; (80026b8 <HAL_ADC_ConfigChannel+0x678>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d004      	beq.n	800254c <HAL_ADC_ConfigChannel+0x50c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5d      	ldr	r2, [pc, #372]	; (80026bc <HAL_ADC_ConfigChannel+0x67c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10e      	bne.n	800256a <HAL_ADC_ConfigChannel+0x52a>
 800254c:	485a      	ldr	r0, [pc, #360]	; (80026b8 <HAL_ADC_ConfigChannel+0x678>)
 800254e:	f7ff f85b 	bl	8001608 <LL_ADC_IsEnabled>
 8002552:	4604      	mov	r4, r0
 8002554:	4859      	ldr	r0, [pc, #356]	; (80026bc <HAL_ADC_ConfigChannel+0x67c>)
 8002556:	f7ff f857 	bl	8001608 <LL_ADC_IsEnabled>
 800255a:	4603      	mov	r3, r0
 800255c:	4323      	orrs	r3, r4
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	e008      	b.n	800257c <HAL_ADC_ConfigChannel+0x53c>
 800256a:	4857      	ldr	r0, [pc, #348]	; (80026c8 <HAL_ADC_ConfigChannel+0x688>)
 800256c:	f7ff f84c 	bl	8001608 <LL_ADC_IsEnabled>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d07d      	beq.n	800267c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a51      	ldr	r2, [pc, #324]	; (80026cc <HAL_ADC_ConfigChannel+0x68c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d130      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x5ac>
 800258a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d12b      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a4b      	ldr	r2, [pc, #300]	; (80026c8 <HAL_ADC_ConfigChannel+0x688>)
 800259a:	4293      	cmp	r3, r2
 800259c:	f040 8081 	bne.w	80026a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a44      	ldr	r2, [pc, #272]	; (80026b8 <HAL_ADC_ConfigChannel+0x678>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x574>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a43      	ldr	r2, [pc, #268]	; (80026bc <HAL_ADC_ConfigChannel+0x67c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x578>
 80025b4:	4a42      	ldr	r2, [pc, #264]	; (80026c0 <HAL_ADC_ConfigChannel+0x680>)
 80025b6:	e000      	b.n	80025ba <HAL_ADC_ConfigChannel+0x57a>
 80025b8:	4a42      	ldr	r2, [pc, #264]	; (80026c4 <HAL_ADC_ConfigChannel+0x684>)
 80025ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe fe65 	bl	8001292 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_ADC_ConfigChannel+0x690>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <HAL_ADC_ConfigChannel+0x694>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	3301      	adds	r3, #1
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f9      	bne.n	80025de <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ea:	e05a      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a39      	ldr	r2, [pc, #228]	; (80026d8 <HAL_ADC_ConfigChannel+0x698>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d11e      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x5f4>
 80025f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d119      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a30      	ldr	r2, [pc, #192]	; (80026c8 <HAL_ADC_ConfigChannel+0x688>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d14b      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a2a      	ldr	r2, [pc, #168]	; (80026b8 <HAL_ADC_ConfigChannel+0x678>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d004      	beq.n	800261e <HAL_ADC_ConfigChannel+0x5de>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_ADC_ConfigChannel+0x67c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d101      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x5e2>
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_ADC_ConfigChannel+0x680>)
 8002620:	e000      	b.n	8002624 <HAL_ADC_ConfigChannel+0x5e4>
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <HAL_ADC_ConfigChannel+0x684>)
 8002624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7fe fe30 	bl	8001292 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002632:	e036      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a28      	ldr	r2, [pc, #160]	; (80026dc <HAL_ADC_ConfigChannel+0x69c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d131      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
 800263e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12c      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_ADC_ConfigChannel+0x688>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d127      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <HAL_ADC_ConfigChannel+0x678>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_ADC_ConfigChannel+0x626>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_ADC_ConfigChannel+0x67c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0x62a>
 8002666:	4a16      	ldr	r2, [pc, #88]	; (80026c0 <HAL_ADC_ConfigChannel+0x680>)
 8002668:	e000      	b.n	800266c <HAL_ADC_ConfigChannel+0x62c>
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_ADC_ConfigChannel+0x684>)
 800266c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002672:	4619      	mov	r1, r3
 8002674:	4610      	mov	r0, r2
 8002676:	f7fe fe0c 	bl	8001292 <LL_ADC_SetCommonPathInternalCh>
 800267a:	e012      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800268e:	e008      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3784      	adds	r7, #132	; 0x84
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40022100 	.word	0x40022100
 80026c0:	40022300 	.word	0x40022300
 80026c4:	58026300 	.word	0x58026300
 80026c8:	58026000 	.word	0x58026000
 80026cc:	cb840000 	.word	0xcb840000
 80026d0:	24000030 	.word	0x24000030
 80026d4:	053e2d63 	.word	0x053e2d63
 80026d8:	c7520000 	.word	0xc7520000
 80026dc:	cfb80000 	.word	0xcfb80000

080026e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fe ff8b 	bl	8001608 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d16e      	bne.n	80027d6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <ADC_Enable+0x100>)
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0210 	orr.w	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e05a      	b.n	80027d8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe ff46 	bl	80015b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800272c:	f7fe fd4e 	bl	80011cc <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2b      	ldr	r2, [pc, #172]	; (80027e4 <ADC_Enable+0x104>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d004      	beq.n	8002746 <ADC_Enable+0x66>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a29      	ldr	r2, [pc, #164]	; (80027e8 <ADC_Enable+0x108>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <ADC_Enable+0x6a>
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <ADC_Enable+0x10c>)
 8002748:	e000      	b.n	800274c <ADC_Enable+0x6c>
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <ADC_Enable+0x110>)
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fec9 	bl	80014e4 <LL_ADC_GetMultimode>
 8002752:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a23      	ldr	r2, [pc, #140]	; (80027e8 <ADC_Enable+0x108>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d002      	beq.n	8002764 <ADC_Enable+0x84>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e000      	b.n	8002766 <ADC_Enable+0x86>
 8002764:	4b1f      	ldr	r3, [pc, #124]	; (80027e4 <ADC_Enable+0x104>)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	4293      	cmp	r3, r2
 800276c:	d02c      	beq.n	80027c8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d130      	bne.n	80027d6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002774:	e028      	b.n	80027c8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe ff44 	bl	8001608 <LL_ADC_IsEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe ff14 	bl	80015b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002790:	f7fe fd1c 	bl	80011cc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d914      	bls.n	80027c8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d00d      	beq.n	80027c8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e007      	b.n	80027d8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d1cf      	bne.n	8002776 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	8000003f 	.word	0x8000003f
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40022100 	.word	0x40022100
 80027ec:	40022300 	.word	0x40022300
 80027f0:	58026300 	.word	0x58026300

080027f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe ff14 	bl	800162e <LL_ADC_IsDisableOngoing>
 8002806:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe fefb 	bl	8001608 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d047      	beq.n	80028a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d144      	bne.n	80028a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030d 	and.w	r3, r3, #13
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10c      	bne.n	8002846 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fed5 	bl	80015e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2203      	movs	r2, #3
 800283c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800283e:	f7fe fcc5 	bl	80011cc <HAL_GetTick>
 8002842:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002844:	e029      	b.n	800289a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e023      	b.n	80028aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002862:	f7fe fcb3 	bl	80011cc <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d914      	bls.n	800289a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00d      	beq.n	800289a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f043 0210 	orr.w	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e007      	b.n	80028aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1dc      	bne.n	8002862 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d14b      	bne.n	8002964 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d021      	beq.n	800292a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fd46 	bl	800137c <LL_ADC_REG_IsTriggerSourceSWStart>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d032      	beq.n	800295c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d12b      	bne.n	800295c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d11f      	bne.n	800295c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002920:	f043 0201 	orr.w	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
 8002928:	e018      	b.n	800295c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d111      	bne.n	800295c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d105      	bne.n	800295c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7fe f829 	bl	80009b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002962:	e00e      	b.n	8002982 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff fb5b 	bl	800202c <HAL_ADC_ErrorCallback>
}
 8002976:	e004      	b.n	8002982 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002996:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff fb33 	bl	8002004 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	f043 0204 	orr.w	r2, r3, #4
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f7ff fb2d 	bl	800202c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a79      	ldr	r2, [pc, #484]	; (8002bd0 <ADC_ConfigureBoostMode+0x1f4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <ADC_ConfigureBoostMode+0x1c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a78      	ldr	r2, [pc, #480]	; (8002bd4 <ADC_ConfigureBoostMode+0x1f8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d109      	bne.n	8002a0c <ADC_ConfigureBoostMode+0x30>
 80029f8:	4b77      	ldr	r3, [pc, #476]	; (8002bd8 <ADC_ConfigureBoostMode+0x1fc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e008      	b.n	8002a1e <ADC_ConfigureBoostMode+0x42>
 8002a0c:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <ADC_ConfigureBoostMode+0x200>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf14      	ite	ne
 8002a18:	2301      	movne	r3, #1
 8002a1a:	2300      	moveq	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01c      	beq.n	8002a5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002a22:	f005 fc23 	bl	800826c <HAL_RCC_GetHCLKFreq>
 8002a26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a30:	d010      	beq.n	8002a54 <ADC_ConfigureBoostMode+0x78>
 8002a32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a36:	d871      	bhi.n	8002b1c <ADC_ConfigureBoostMode+0x140>
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d002      	beq.n	8002a44 <ADC_ConfigureBoostMode+0x68>
 8002a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a42:	d16b      	bne.n	8002b1c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	60fb      	str	r3, [r7, #12]
        break;
 8002a52:	e066      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	60fb      	str	r3, [r7, #12]
        break;
 8002a5a:	e062      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002a5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a60:	f006 fb74 	bl	800914c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a6e:	d051      	beq.n	8002b14 <ADC_ConfigureBoostMode+0x138>
 8002a70:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a74:	d854      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002a76:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a7a:	d047      	beq.n	8002b0c <ADC_ConfigureBoostMode+0x130>
 8002a7c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a80:	d84e      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002a82:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a86:	d03d      	beq.n	8002b04 <ADC_ConfigureBoostMode+0x128>
 8002a88:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a8c:	d848      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a92:	d033      	beq.n	8002afc <ADC_ConfigureBoostMode+0x120>
 8002a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a98:	d842      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002a9a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a9e:	d029      	beq.n	8002af4 <ADC_ConfigureBoostMode+0x118>
 8002aa0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002aa4:	d83c      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002aa6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002aaa:	d01a      	beq.n	8002ae2 <ADC_ConfigureBoostMode+0x106>
 8002aac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002ab0:	d836      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002ab2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ab6:	d014      	beq.n	8002ae2 <ADC_ConfigureBoostMode+0x106>
 8002ab8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002abc:	d830      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac2:	d00e      	beq.n	8002ae2 <ADC_ConfigureBoostMode+0x106>
 8002ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac8:	d82a      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002aca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ace:	d008      	beq.n	8002ae2 <ADC_ConfigureBoostMode+0x106>
 8002ad0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ad4:	d824      	bhi.n	8002b20 <ADC_ConfigureBoostMode+0x144>
 8002ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ada:	d002      	beq.n	8002ae2 <ADC_ConfigureBoostMode+0x106>
 8002adc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ae0:	d11e      	bne.n	8002b20 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	0c9b      	lsrs	r3, r3, #18
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]
        break;
 8002af2:	e016      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	60fb      	str	r3, [r7, #12]
        break;
 8002afa:	e012      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	60fb      	str	r3, [r7, #12]
        break;
 8002b02:	e00e      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	60fb      	str	r3, [r7, #12]
        break;
 8002b0a:	e00a      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	09db      	lsrs	r3, r3, #7
 8002b10:	60fb      	str	r3, [r7, #12]
        break;
 8002b12:	e006      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	60fb      	str	r3, [r7, #12]
        break;
 8002b1a:	e002      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
        break;
 8002b1c:	bf00      	nop
 8002b1e:	e000      	b.n	8002b22 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002b20:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002b22:	f7fe fb83 	bl	800122c <HAL_GetREVID>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d815      	bhi.n	8002b5c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <ADC_ConfigureBoostMode+0x204>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d908      	bls.n	8002b4a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b46:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002b48:	e03e      	b.n	8002bc8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	e035      	b.n	8002bc8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a1f      	ldr	r2, [pc, #124]	; (8002be4 <ADC_ConfigureBoostMode+0x208>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d808      	bhi.n	8002b7c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002b78:	609a      	str	r2, [r3, #8]
}
 8002b7a:	e025      	b.n	8002bc8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <ADC_ConfigureBoostMode+0x20c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d80a      	bhi.n	8002b9a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b96:	609a      	str	r2, [r3, #8]
}
 8002b98:	e016      	b.n	8002bc8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a13      	ldr	r2, [pc, #76]	; (8002bec <ADC_ConfigureBoostMode+0x210>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d80a      	bhi.n	8002bb8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb4:	609a      	str	r2, [r3, #8]
}
 8002bb6:	e007      	b.n	8002bc8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40022100 	.word	0x40022100
 8002bd8:	40022300 	.word	0x40022300
 8002bdc:	58026300 	.word	0x58026300
 8002be0:	01312d00 	.word	0x01312d00
 8002be4:	005f5e10 	.word	0x005f5e10
 8002be8:	00bebc20 	.word	0x00bebc20
 8002bec:	017d7840 	.word	0x017d7840

08002bf0 <LL_ADC_IsEnabled>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <LL_ADC_IsEnabled+0x18>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <LL_ADC_IsEnabled+0x1a>
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <LL_ADC_StartCalibration>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <LL_ADC_StartCalibration+0x38>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	609a      	str	r2, [r3, #8]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	3ffeffc0 	.word	0x3ffeffc0

08002c54 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c68:	d101      	bne.n	8002c6e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_REG_IsConversionOngoing>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d101      	bne.n	8002c94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e04c      	b.n	8002d5c <HAL_ADCEx_Calibration_Start+0xb8>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff fd92 	bl	80027f4 <ADC_Disable>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d135      	bne.n	8002d46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff90 	bl	8002c18 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cf8:	e014      	b.n	8002d24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d30d      	bcc.n	8002d24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f023 0312 	bic.w	r3, r3, #18
 8002d10:	f043 0210 	orr.w	r2, r3, #16
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e01b      	b.n	8002d5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff93 	bl	8002c54 <LL_ADC_IsCalibrationOnGoing>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1e2      	bne.n	8002cfa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f023 0303 	bic.w	r3, r3, #3
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
 8002d44:	e005      	b.n	8002d52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f043 0210 	orr.w	r2, r3, #16
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	ffffeefd 	.word	0xffffeefd
 8002d68:	25c3f800 	.word	0x25c3f800

08002d6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b09f      	sub	sp, #124	; 0x7c
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e0be      	b.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a5c      	ldr	r2, [pc, #368]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d102      	bne.n	8002e0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e08:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	e001      	b.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10b      	bne.n	8002e30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e09d      	b.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff22 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8002e38:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff1c 	bl	8002c7c <LL_ADC_REG_IsConversionOngoing>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d17f      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d17c      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002e64:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e66:	e000      	b.n	8002e6a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002e68:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e6a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d039      	beq.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a3a      	ldr	r2, [pc, #232]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a38      	ldr	r2, [pc, #224]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10e      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002e9a:	4836      	ldr	r0, [pc, #216]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e9c:	f7ff fea8 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	4835      	ldr	r0, [pc, #212]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ea4:	f7ff fea4 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	4323      	orrs	r3, r4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	e008      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002eb8:	4832      	ldr	r0, [pc, #200]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002eba:	f7ff fe99 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d047      	beq.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6811      	ldr	r1, [r2, #0]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	6892      	ldr	r2, [r2, #8]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ee6:	e03a      	b.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10e      	bne.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002f08:	481a      	ldr	r0, [pc, #104]	; (8002f74 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f0a:	f7ff fe71 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4819      	ldr	r0, [pc, #100]	; (8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f12:	f7ff fe6d 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4323      	orrs	r3, r4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e008      	b.n	8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f26:	4817      	ldr	r0, [pc, #92]	; (8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f28:	f7ff fe62 	bl	8002bf0 <LL_ADC_IsEnabled>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf0c      	ite	eq
 8002f32:	2301      	moveq	r3, #1
 8002f34:	2300      	movne	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f46:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f48:	e009      	b.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f5c:	e000      	b.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f5e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	377c      	adds	r7, #124	; 0x7c
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40022100 	.word	0x40022100
 8002f7c:	40022300 	.word	0x40022300
 8002f80:	58026300 	.word	0x58026300
 8002f84:	58026000 	.word	0x58026000
 8002f88:	fffff0e0 	.word	0xfffff0e0

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <__NVIC_SetPriorityGrouping+0x40>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <__NVIC_SetPriorityGrouping+0x40>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00
 8002fd0:	05fa0000 	.word	0x05fa0000

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003150:	f7ff ff40 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6978      	ldr	r0, [r7, #20]
 800315c:	f7ff ff90 	bl	8003080 <NVIC_EncodePriority>
 8003160:	4602      	mov	r2, r0
 8003162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff5f 	bl	800302c <__NVIC_SetPriority>
}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	4603      	mov	r3, r0
 800317e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff33 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffa4 	bl	80030e8 <SysTick_Config>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80031b4:	f7fe f80a 	bl	80011cc <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e316      	b.n	80037f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a66      	ldr	r2, [pc, #408]	; (8003364 <HAL_DMA_Init+0x1b8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d04a      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a65      	ldr	r2, [pc, #404]	; (8003368 <HAL_DMA_Init+0x1bc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d045      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a63      	ldr	r2, [pc, #396]	; (800336c <HAL_DMA_Init+0x1c0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d040      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a62      	ldr	r2, [pc, #392]	; (8003370 <HAL_DMA_Init+0x1c4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d03b      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a60      	ldr	r2, [pc, #384]	; (8003374 <HAL_DMA_Init+0x1c8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d036      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5f      	ldr	r2, [pc, #380]	; (8003378 <HAL_DMA_Init+0x1cc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d031      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5d      	ldr	r2, [pc, #372]	; (800337c <HAL_DMA_Init+0x1d0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d02c      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a5c      	ldr	r2, [pc, #368]	; (8003380 <HAL_DMA_Init+0x1d4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d027      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5a      	ldr	r2, [pc, #360]	; (8003384 <HAL_DMA_Init+0x1d8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d022      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a59      	ldr	r2, [pc, #356]	; (8003388 <HAL_DMA_Init+0x1dc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d01d      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a57      	ldr	r2, [pc, #348]	; (800338c <HAL_DMA_Init+0x1e0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d018      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a56      	ldr	r2, [pc, #344]	; (8003390 <HAL_DMA_Init+0x1e4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a54      	ldr	r2, [pc, #336]	; (8003394 <HAL_DMA_Init+0x1e8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a53      	ldr	r2, [pc, #332]	; (8003398 <HAL_DMA_Init+0x1ec>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a51      	ldr	r2, [pc, #324]	; (800339c <HAL_DMA_Init+0x1f0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_DMA_Init+0xb8>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a50      	ldr	r2, [pc, #320]	; (80033a0 <HAL_DMA_Init+0x1f4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_DMA_Init+0xbc>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <HAL_DMA_Init+0xbe>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 813b 	beq.w	80034e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a37      	ldr	r2, [pc, #220]	; (8003364 <HAL_DMA_Init+0x1b8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d04a      	beq.n	8003320 <HAL_DMA_Init+0x174>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a36      	ldr	r2, [pc, #216]	; (8003368 <HAL_DMA_Init+0x1bc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d045      	beq.n	8003320 <HAL_DMA_Init+0x174>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a34      	ldr	r2, [pc, #208]	; (800336c <HAL_DMA_Init+0x1c0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d040      	beq.n	8003320 <HAL_DMA_Init+0x174>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a33      	ldr	r2, [pc, #204]	; (8003370 <HAL_DMA_Init+0x1c4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d03b      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a31      	ldr	r2, [pc, #196]	; (8003374 <HAL_DMA_Init+0x1c8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d036      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a30      	ldr	r2, [pc, #192]	; (8003378 <HAL_DMA_Init+0x1cc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d031      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2e      	ldr	r2, [pc, #184]	; (800337c <HAL_DMA_Init+0x1d0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02c      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2d      	ldr	r2, [pc, #180]	; (8003380 <HAL_DMA_Init+0x1d4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d027      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <HAL_DMA_Init+0x1d8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d022      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <HAL_DMA_Init+0x1dc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d01d      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <HAL_DMA_Init+0x1e0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d018      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a27      	ldr	r2, [pc, #156]	; (8003390 <HAL_DMA_Init+0x1e4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_DMA_Init+0x174>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a25      	ldr	r2, [pc, #148]	; (8003394 <HAL_DMA_Init+0x1e8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00e      	beq.n	8003320 <HAL_DMA_Init+0x174>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a24      	ldr	r2, [pc, #144]	; (8003398 <HAL_DMA_Init+0x1ec>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d009      	beq.n	8003320 <HAL_DMA_Init+0x174>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_DMA_Init+0x1f0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_DMA_Init+0x174>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a21      	ldr	r2, [pc, #132]	; (80033a0 <HAL_DMA_Init+0x1f4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <HAL_DMA_Init+0x186>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	e007      	b.n	8003342 <HAL_DMA_Init+0x196>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003342:	e02f      	b.n	80033a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003344:	f7fd ff42 	bl	80011cc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b05      	cmp	r3, #5
 8003350:	d928      	bls.n	80033a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2203      	movs	r2, #3
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e246      	b.n	80037f2 <HAL_DMA_Init+0x646>
 8003364:	40020010 	.word	0x40020010
 8003368:	40020028 	.word	0x40020028
 800336c:	40020040 	.word	0x40020040
 8003370:	40020058 	.word	0x40020058
 8003374:	40020070 	.word	0x40020070
 8003378:	40020088 	.word	0x40020088
 800337c:	400200a0 	.word	0x400200a0
 8003380:	400200b8 	.word	0x400200b8
 8003384:	40020410 	.word	0x40020410
 8003388:	40020428 	.word	0x40020428
 800338c:	40020440 	.word	0x40020440
 8003390:	40020458 	.word	0x40020458
 8003394:	40020470 	.word	0x40020470
 8003398:	40020488 	.word	0x40020488
 800339c:	400204a0 	.word	0x400204a0
 80033a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1c8      	bne.n	8003344 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4b83      	ldr	r3, [pc, #524]	; (80035cc <HAL_DMA_Init+0x420>)
 80033be:	4013      	ands	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80033ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d107      	bne.n	8003408 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	4313      	orrs	r3, r2
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003408:	4b71      	ldr	r3, [pc, #452]	; (80035d0 <HAL_DMA_Init+0x424>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b71      	ldr	r3, [pc, #452]	; (80035d4 <HAL_DMA_Init+0x428>)
 800340e:	4013      	ands	r3, r2
 8003410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003414:	d328      	bcc.n	8003468 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b28      	cmp	r3, #40	; 0x28
 800341c:	d903      	bls.n	8003426 <HAL_DMA_Init+0x27a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b2e      	cmp	r3, #46	; 0x2e
 8003424:	d917      	bls.n	8003456 <HAL_DMA_Init+0x2aa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b3e      	cmp	r3, #62	; 0x3e
 800342c:	d903      	bls.n	8003436 <HAL_DMA_Init+0x28a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b42      	cmp	r3, #66	; 0x42
 8003434:	d90f      	bls.n	8003456 <HAL_DMA_Init+0x2aa>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b46      	cmp	r3, #70	; 0x46
 800343c:	d903      	bls.n	8003446 <HAL_DMA_Init+0x29a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b48      	cmp	r3, #72	; 0x48
 8003444:	d907      	bls.n	8003456 <HAL_DMA_Init+0x2aa>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b4e      	cmp	r3, #78	; 0x4e
 800344c:	d905      	bls.n	800345a <HAL_DMA_Init+0x2ae>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b52      	cmp	r3, #82	; 0x52
 8003454:	d801      	bhi.n	800345a <HAL_DMA_Init+0x2ae>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <HAL_DMA_Init+0x2b0>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003466:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f023 0307 	bic.w	r3, r3, #7
 800347e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	2b04      	cmp	r3, #4
 8003490:	d117      	bne.n	80034c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f001 fdcf 	bl	8005048 <DMA_CheckFifoParam>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e197      	b.n	80037f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f001 fd0a 	bl	8004ee4 <DMA_CalcBaseAndBitshift>
 80034d0:	4603      	mov	r3, r0
 80034d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	223f      	movs	r2, #63	; 0x3f
 80034de:	409a      	lsls	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	e0cd      	b.n	8003682 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a3b      	ldr	r2, [pc, #236]	; (80035d8 <HAL_DMA_Init+0x42c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_Init+0x38a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a39      	ldr	r2, [pc, #228]	; (80035dc <HAL_DMA_Init+0x430>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_DMA_Init+0x38a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a38      	ldr	r2, [pc, #224]	; (80035e0 <HAL_DMA_Init+0x434>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_DMA_Init+0x38a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a36      	ldr	r2, [pc, #216]	; (80035e4 <HAL_DMA_Init+0x438>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_DMA_Init+0x38a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a35      	ldr	r2, [pc, #212]	; (80035e8 <HAL_DMA_Init+0x43c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_Init+0x38a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a33      	ldr	r2, [pc, #204]	; (80035ec <HAL_DMA_Init+0x440>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_DMA_Init+0x38a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <HAL_DMA_Init+0x444>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_DMA_Init+0x38a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a30      	ldr	r2, [pc, #192]	; (80035f4 <HAL_DMA_Init+0x448>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d101      	bne.n	800353a <HAL_DMA_Init+0x38e>
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_DMA_Init+0x390>
 800353a:	2300      	movs	r3, #0
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8097 	beq.w	8003670 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <HAL_DMA_Init+0x42c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d021      	beq.n	8003590 <HAL_DMA_Init+0x3e4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_DMA_Init+0x430>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01c      	beq.n	8003590 <HAL_DMA_Init+0x3e4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a21      	ldr	r2, [pc, #132]	; (80035e0 <HAL_DMA_Init+0x434>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d017      	beq.n	8003590 <HAL_DMA_Init+0x3e4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <HAL_DMA_Init+0x438>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d012      	beq.n	8003590 <HAL_DMA_Init+0x3e4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1e      	ldr	r2, [pc, #120]	; (80035e8 <HAL_DMA_Init+0x43c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00d      	beq.n	8003590 <HAL_DMA_Init+0x3e4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_DMA_Init+0x440>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d008      	beq.n	8003590 <HAL_DMA_Init+0x3e4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <HAL_DMA_Init+0x444>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <HAL_DMA_Init+0x3e4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_DMA_Init+0x448>)
 800358e:	4293      	cmp	r3, r2
 8003590:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2202      	movs	r2, #2
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <HAL_DMA_Init+0x44c>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d020      	beq.n	80035fc <HAL_DMA_Init+0x450>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b80      	cmp	r3, #128	; 0x80
 80035c0:	d102      	bne.n	80035c8 <HAL_DMA_Init+0x41c>
 80035c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035c6:	e01a      	b.n	80035fe <HAL_DMA_Init+0x452>
 80035c8:	2300      	movs	r3, #0
 80035ca:	e018      	b.n	80035fe <HAL_DMA_Init+0x452>
 80035cc:	fe10803f 	.word	0xfe10803f
 80035d0:	5c001000 	.word	0x5c001000
 80035d4:	ffff0000 	.word	0xffff0000
 80035d8:	58025408 	.word	0x58025408
 80035dc:	5802541c 	.word	0x5802541c
 80035e0:	58025430 	.word	0x58025430
 80035e4:	58025444 	.word	0x58025444
 80035e8:	58025458 	.word	0x58025458
 80035ec:	5802546c 	.word	0x5802546c
 80035f0:	58025480 	.word	0x58025480
 80035f4:	58025494 	.word	0x58025494
 80035f8:	fffe000f 	.word	0xfffe000f
 80035fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800360c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003614:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800361c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003624:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800362c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b6e      	ldr	r3, [pc, #440]	; (80037fc <HAL_DMA_Init+0x650>)
 8003644:	4413      	add	r3, r2
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_DMA_Init+0x654>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	009a      	lsls	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f001 fc45 	bl	8004ee4 <DMA_CalcBaseAndBitshift>
 800365a:	4603      	mov	r3, r0
 800365c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2201      	movs	r2, #1
 8003668:	409a      	lsls	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	e008      	b.n	8003682 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2240      	movs	r2, #64	; 0x40
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2203      	movs	r2, #3
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0b7      	b.n	80037f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5f      	ldr	r2, [pc, #380]	; (8003804 <HAL_DMA_Init+0x658>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d072      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <HAL_DMA_Init+0x65c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d06d      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a5c      	ldr	r2, [pc, #368]	; (800380c <HAL_DMA_Init+0x660>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d068      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5a      	ldr	r2, [pc, #360]	; (8003810 <HAL_DMA_Init+0x664>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d063      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a59      	ldr	r2, [pc, #356]	; (8003814 <HAL_DMA_Init+0x668>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d05e      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a57      	ldr	r2, [pc, #348]	; (8003818 <HAL_DMA_Init+0x66c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d059      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a56      	ldr	r2, [pc, #344]	; (800381c <HAL_DMA_Init+0x670>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d054      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a54      	ldr	r2, [pc, #336]	; (8003820 <HAL_DMA_Init+0x674>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d04f      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a53      	ldr	r2, [pc, #332]	; (8003824 <HAL_DMA_Init+0x678>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d04a      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a51      	ldr	r2, [pc, #324]	; (8003828 <HAL_DMA_Init+0x67c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d045      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a50      	ldr	r2, [pc, #320]	; (800382c <HAL_DMA_Init+0x680>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d040      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4e      	ldr	r2, [pc, #312]	; (8003830 <HAL_DMA_Init+0x684>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d03b      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4d      	ldr	r2, [pc, #308]	; (8003834 <HAL_DMA_Init+0x688>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d036      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a4b      	ldr	r2, [pc, #300]	; (8003838 <HAL_DMA_Init+0x68c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d031      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_DMA_Init+0x690>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d02c      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a48      	ldr	r2, [pc, #288]	; (8003840 <HAL_DMA_Init+0x694>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d027      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a47      	ldr	r2, [pc, #284]	; (8003844 <HAL_DMA_Init+0x698>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a45      	ldr	r2, [pc, #276]	; (8003848 <HAL_DMA_Init+0x69c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01d      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a44      	ldr	r2, [pc, #272]	; (800384c <HAL_DMA_Init+0x6a0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d018      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a42      	ldr	r2, [pc, #264]	; (8003850 <HAL_DMA_Init+0x6a4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d013      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a41      	ldr	r2, [pc, #260]	; (8003854 <HAL_DMA_Init+0x6a8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00e      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a3f      	ldr	r2, [pc, #252]	; (8003858 <HAL_DMA_Init+0x6ac>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d009      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a3e      	ldr	r2, [pc, #248]	; (800385c <HAL_DMA_Init+0x6b0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d004      	beq.n	8003772 <HAL_DMA_Init+0x5c6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a3c      	ldr	r2, [pc, #240]	; (8003860 <HAL_DMA_Init+0x6b4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_DMA_Init+0x5ca>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <HAL_DMA_Init+0x5cc>
 8003776:	2300      	movs	r3, #0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d032      	beq.n	80037e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f001 fcdf 	bl	8005140 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2b80      	cmp	r3, #128	; 0x80
 8003788:	d102      	bne.n	8003790 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d010      	beq.n	80037d0 <HAL_DMA_Init+0x624>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d80c      	bhi.n	80037d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 fd5c 	bl	8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	e008      	b.n	80037e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	a7fdabf8 	.word	0xa7fdabf8
 8003800:	cccccccd 	.word	0xcccccccd
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8
 8003844:	58025408 	.word	0x58025408
 8003848:	5802541c 	.word	0x5802541c
 800384c:	58025430 	.word	0x58025430
 8003850:	58025444 	.word	0x58025444
 8003854:	58025458 	.word	0x58025458
 8003858:	5802546c 	.word	0x5802546c
 800385c:	58025480 	.word	0x58025480
 8003860:	58025494 	.word	0x58025494

08003864 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e226      	b.n	8003cce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_DMA_Start_IT+0x2a>
 800388a:	2302      	movs	r3, #2
 800388c:	e21f      	b.n	8003cce <HAL_DMA_Start_IT+0x46a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	f040 820a 	bne.w	8003cb8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a68      	ldr	r2, [pc, #416]	; (8003a58 <HAL_DMA_Start_IT+0x1f4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d04a      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a66      	ldr	r2, [pc, #408]	; (8003a5c <HAL_DMA_Start_IT+0x1f8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d045      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_DMA_Start_IT+0x1fc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d040      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a63      	ldr	r2, [pc, #396]	; (8003a64 <HAL_DMA_Start_IT+0x200>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d03b      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a62      	ldr	r2, [pc, #392]	; (8003a68 <HAL_DMA_Start_IT+0x204>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d036      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a60      	ldr	r2, [pc, #384]	; (8003a6c <HAL_DMA_Start_IT+0x208>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d031      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5f      	ldr	r2, [pc, #380]	; (8003a70 <HAL_DMA_Start_IT+0x20c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d02c      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a5d      	ldr	r2, [pc, #372]	; (8003a74 <HAL_DMA_Start_IT+0x210>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d027      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a5c      	ldr	r2, [pc, #368]	; (8003a78 <HAL_DMA_Start_IT+0x214>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d022      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5a      	ldr	r2, [pc, #360]	; (8003a7c <HAL_DMA_Start_IT+0x218>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01d      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a59      	ldr	r2, [pc, #356]	; (8003a80 <HAL_DMA_Start_IT+0x21c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d018      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a57      	ldr	r2, [pc, #348]	; (8003a84 <HAL_DMA_Start_IT+0x220>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d013      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a56      	ldr	r2, [pc, #344]	; (8003a88 <HAL_DMA_Start_IT+0x224>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a54      	ldr	r2, [pc, #336]	; (8003a8c <HAL_DMA_Start_IT+0x228>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a53      	ldr	r2, [pc, #332]	; (8003a90 <HAL_DMA_Start_IT+0x22c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_DMA_Start_IT+0xee>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a51      	ldr	r2, [pc, #324]	; (8003a94 <HAL_DMA_Start_IT+0x230>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d108      	bne.n	8003964 <HAL_DMA_Start_IT+0x100>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e007      	b.n	8003974 <HAL_DMA_Start_IT+0x110>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f001 f906 	bl	8004b8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <HAL_DMA_Start_IT+0x1f4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04a      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_DMA_Start_IT+0x1f8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d045      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <HAL_DMA_Start_IT+0x1fc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d040      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <HAL_DMA_Start_IT+0x200>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d03b      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <HAL_DMA_Start_IT+0x204>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d036      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <HAL_DMA_Start_IT+0x208>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d031      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2b      	ldr	r2, [pc, #172]	; (8003a70 <HAL_DMA_Start_IT+0x20c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d02c      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2a      	ldr	r2, [pc, #168]	; (8003a74 <HAL_DMA_Start_IT+0x210>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d027      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <HAL_DMA_Start_IT+0x214>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <HAL_DMA_Start_IT+0x218>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d01d      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <HAL_DMA_Start_IT+0x21c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <HAL_DMA_Start_IT+0x220>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <HAL_DMA_Start_IT+0x224>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <HAL_DMA_Start_IT+0x228>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1f      	ldr	r2, [pc, #124]	; (8003a90 <HAL_DMA_Start_IT+0x22c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_Start_IT+0x1bc>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_DMA_Start_IT+0x230>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <HAL_DMA_Start_IT+0x1c0>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_DMA_Start_IT+0x1c2>
 8003a24:	2300      	movs	r3, #0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f023 021e 	bic.w	r2, r3, #30
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0216 	orr.w	r2, r2, #22
 8003a3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03e      	beq.n	8003ac4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0208 	orr.w	r2, r2, #8
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	e035      	b.n	8003ac4 <HAL_DMA_Start_IT+0x260>
 8003a58:	40020010 	.word	0x40020010
 8003a5c:	40020028 	.word	0x40020028
 8003a60:	40020040 	.word	0x40020040
 8003a64:	40020058 	.word	0x40020058
 8003a68:	40020070 	.word	0x40020070
 8003a6c:	40020088 	.word	0x40020088
 8003a70:	400200a0 	.word	0x400200a0
 8003a74:	400200b8 	.word	0x400200b8
 8003a78:	40020410 	.word	0x40020410
 8003a7c:	40020428 	.word	0x40020428
 8003a80:	40020440 	.word	0x40020440
 8003a84:	40020458 	.word	0x40020458
 8003a88:	40020470 	.word	0x40020470
 8003a8c:	40020488 	.word	0x40020488
 8003a90:	400204a0 	.word	0x400204a0
 8003a94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 020e 	bic.w	r2, r3, #14
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 020a 	orr.w	r2, r2, #10
 8003aaa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0204 	orr.w	r2, r2, #4
 8003ac2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a83      	ldr	r2, [pc, #524]	; (8003cd8 <HAL_DMA_Start_IT+0x474>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d072      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a82      	ldr	r2, [pc, #520]	; (8003cdc <HAL_DMA_Start_IT+0x478>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d06d      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a80      	ldr	r2, [pc, #512]	; (8003ce0 <HAL_DMA_Start_IT+0x47c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d068      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a7f      	ldr	r2, [pc, #508]	; (8003ce4 <HAL_DMA_Start_IT+0x480>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d063      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a7d      	ldr	r2, [pc, #500]	; (8003ce8 <HAL_DMA_Start_IT+0x484>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d05e      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a7c      	ldr	r2, [pc, #496]	; (8003cec <HAL_DMA_Start_IT+0x488>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d059      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a7a      	ldr	r2, [pc, #488]	; (8003cf0 <HAL_DMA_Start_IT+0x48c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d054      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a79      	ldr	r2, [pc, #484]	; (8003cf4 <HAL_DMA_Start_IT+0x490>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04f      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a77      	ldr	r2, [pc, #476]	; (8003cf8 <HAL_DMA_Start_IT+0x494>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04a      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a76      	ldr	r2, [pc, #472]	; (8003cfc <HAL_DMA_Start_IT+0x498>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d045      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a74      	ldr	r2, [pc, #464]	; (8003d00 <HAL_DMA_Start_IT+0x49c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d040      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a73      	ldr	r2, [pc, #460]	; (8003d04 <HAL_DMA_Start_IT+0x4a0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d03b      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a71      	ldr	r2, [pc, #452]	; (8003d08 <HAL_DMA_Start_IT+0x4a4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d036      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a70      	ldr	r2, [pc, #448]	; (8003d0c <HAL_DMA_Start_IT+0x4a8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d031      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a6e      	ldr	r2, [pc, #440]	; (8003d10 <HAL_DMA_Start_IT+0x4ac>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d02c      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6d      	ldr	r2, [pc, #436]	; (8003d14 <HAL_DMA_Start_IT+0x4b0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d027      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6b      	ldr	r2, [pc, #428]	; (8003d18 <HAL_DMA_Start_IT+0x4b4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d022      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_DMA_Start_IT+0x4b8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01d      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a68      	ldr	r2, [pc, #416]	; (8003d20 <HAL_DMA_Start_IT+0x4bc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d018      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a67      	ldr	r2, [pc, #412]	; (8003d24 <HAL_DMA_Start_IT+0x4c0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d013      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a65      	ldr	r2, [pc, #404]	; (8003d28 <HAL_DMA_Start_IT+0x4c4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00e      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a64      	ldr	r2, [pc, #400]	; (8003d2c <HAL_DMA_Start_IT+0x4c8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d009      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a62      	ldr	r2, [pc, #392]	; (8003d30 <HAL_DMA_Start_IT+0x4cc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <HAL_DMA_Start_IT+0x350>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a61      	ldr	r2, [pc, #388]	; (8003d34 <HAL_DMA_Start_IT+0x4d0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d101      	bne.n	8003bb8 <HAL_DMA_Start_IT+0x354>
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <HAL_DMA_Start_IT+0x356>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01a      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bda:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a37      	ldr	r2, [pc, #220]	; (8003cd8 <HAL_DMA_Start_IT+0x474>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d04a      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a36      	ldr	r2, [pc, #216]	; (8003cdc <HAL_DMA_Start_IT+0x478>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d045      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a34      	ldr	r2, [pc, #208]	; (8003ce0 <HAL_DMA_Start_IT+0x47c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d040      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a33      	ldr	r2, [pc, #204]	; (8003ce4 <HAL_DMA_Start_IT+0x480>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d03b      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <HAL_DMA_Start_IT+0x484>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d036      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a30      	ldr	r2, [pc, #192]	; (8003cec <HAL_DMA_Start_IT+0x488>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d031      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2e      	ldr	r2, [pc, #184]	; (8003cf0 <HAL_DMA_Start_IT+0x48c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d02c      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <HAL_DMA_Start_IT+0x490>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d027      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2b      	ldr	r2, [pc, #172]	; (8003cf8 <HAL_DMA_Start_IT+0x494>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d022      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <HAL_DMA_Start_IT+0x498>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d01d      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <HAL_DMA_Start_IT+0x49c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d018      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <HAL_DMA_Start_IT+0x4a0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <HAL_DMA_Start_IT+0x4a4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00e      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <HAL_DMA_Start_IT+0x4a8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d009      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_DMA_Start_IT+0x4ac>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d004      	beq.n	8003c94 <HAL_DMA_Start_IT+0x430>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_DMA_Start_IT+0x4b0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d108      	bne.n	8003ca6 <HAL_DMA_Start_IT+0x442>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e012      	b.n	8003ccc <HAL_DMA_Start_IT+0x468>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e009      	b.n	8003ccc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40020010 	.word	0x40020010
 8003cdc:	40020028 	.word	0x40020028
 8003ce0:	40020040 	.word	0x40020040
 8003ce4:	40020058 	.word	0x40020058
 8003ce8:	40020070 	.word	0x40020070
 8003cec:	40020088 	.word	0x40020088
 8003cf0:	400200a0 	.word	0x400200a0
 8003cf4:	400200b8 	.word	0x400200b8
 8003cf8:	40020410 	.word	0x40020410
 8003cfc:	40020428 	.word	0x40020428
 8003d00:	40020440 	.word	0x40020440
 8003d04:	40020458 	.word	0x40020458
 8003d08:	40020470 	.word	0x40020470
 8003d0c:	40020488 	.word	0x40020488
 8003d10:	400204a0 	.word	0x400204a0
 8003d14:	400204b8 	.word	0x400204b8
 8003d18:	58025408 	.word	0x58025408
 8003d1c:	5802541c 	.word	0x5802541c
 8003d20:	58025430 	.word	0x58025430
 8003d24:	58025444 	.word	0x58025444
 8003d28:	58025458 	.word	0x58025458
 8003d2c:	5802546c 	.word	0x5802546c
 8003d30:	58025480 	.word	0x58025480
 8003d34:	58025494 	.word	0x58025494

08003d38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	; 0x28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d44:	4b67      	ldr	r3, [pc, #412]	; (8003ee4 <HAL_DMA_IRQHandler+0x1ac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a67      	ldr	r2, [pc, #412]	; (8003ee8 <HAL_DMA_IRQHandler+0x1b0>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0a9b      	lsrs	r3, r3, #10
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5f      	ldr	r2, [pc, #380]	; (8003eec <HAL_DMA_IRQHandler+0x1b4>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d04a      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5d      	ldr	r2, [pc, #372]	; (8003ef0 <HAL_DMA_IRQHandler+0x1b8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d045      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a5c      	ldr	r2, [pc, #368]	; (8003ef4 <HAL_DMA_IRQHandler+0x1bc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d040      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5a      	ldr	r2, [pc, #360]	; (8003ef8 <HAL_DMA_IRQHandler+0x1c0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d03b      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a59      	ldr	r2, [pc, #356]	; (8003efc <HAL_DMA_IRQHandler+0x1c4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d036      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a57      	ldr	r2, [pc, #348]	; (8003f00 <HAL_DMA_IRQHandler+0x1c8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d031      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a56      	ldr	r2, [pc, #344]	; (8003f04 <HAL_DMA_IRQHandler+0x1cc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d02c      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a54      	ldr	r2, [pc, #336]	; (8003f08 <HAL_DMA_IRQHandler+0x1d0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d027      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a53      	ldr	r2, [pc, #332]	; (8003f0c <HAL_DMA_IRQHandler+0x1d4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a51      	ldr	r2, [pc, #324]	; (8003f10 <HAL_DMA_IRQHandler+0x1d8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01d      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a50      	ldr	r2, [pc, #320]	; (8003f14 <HAL_DMA_IRQHandler+0x1dc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4e      	ldr	r2, [pc, #312]	; (8003f18 <HAL_DMA_IRQHandler+0x1e0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4d      	ldr	r2, [pc, #308]	; (8003f1c <HAL_DMA_IRQHandler+0x1e4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4b      	ldr	r2, [pc, #300]	; (8003f20 <HAL_DMA_IRQHandler+0x1e8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4a      	ldr	r2, [pc, #296]	; (8003f24 <HAL_DMA_IRQHandler+0x1ec>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xd2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <HAL_DMA_IRQHandler+0x1f0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_DMA_IRQHandler+0xd6>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_DMA_IRQHandler+0xd8>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 842b 	beq.w	800466c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	2208      	movs	r2, #8
 8003e20:	409a      	lsls	r2, r3
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a2 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2e      	ldr	r2, [pc, #184]	; (8003eec <HAL_DMA_IRQHandler+0x1b4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d04a      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_DMA_IRQHandler+0x1b8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d045      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <HAL_DMA_IRQHandler+0x1bc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d040      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <HAL_DMA_IRQHandler+0x1c0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d03b      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <HAL_DMA_IRQHandler+0x1c4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d036      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <HAL_DMA_IRQHandler+0x1c8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d031      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a25      	ldr	r2, [pc, #148]	; (8003f04 <HAL_DMA_IRQHandler+0x1cc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02c      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_DMA_IRQHandler+0x1d0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d027      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <HAL_DMA_IRQHandler+0x1d4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d022      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <HAL_DMA_IRQHandler+0x1d8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d01d      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1f      	ldr	r2, [pc, #124]	; (8003f14 <HAL_DMA_IRQHandler+0x1dc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <HAL_DMA_IRQHandler+0x1e0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_DMA_IRQHandler+0x1e4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	; (8003f20 <HAL_DMA_IRQHandler+0x1e8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_DMA_IRQHandler+0x1ec>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x194>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_DMA_IRQHandler+0x1f0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d12f      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x1f4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	e02e      	b.n	8003f40 <HAL_DMA_IRQHandler+0x208>
 8003ee2:	bf00      	nop
 8003ee4:	24000030 	.word	0x24000030
 8003ee8:	1b4e81b5 	.word	0x1b4e81b5
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0204 	bic.w	r2, r2, #4
 8003f52:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	f003 031f 	and.w	r3, r3, #31
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d06e      	beq.n	8004064 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a69      	ldr	r2, [pc, #420]	; (8004130 <HAL_DMA_IRQHandler+0x3f8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04a      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a67      	ldr	r2, [pc, #412]	; (8004134 <HAL_DMA_IRQHandler+0x3fc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d045      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a66      	ldr	r2, [pc, #408]	; (8004138 <HAL_DMA_IRQHandler+0x400>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d040      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a64      	ldr	r2, [pc, #400]	; (800413c <HAL_DMA_IRQHandler+0x404>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d03b      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a63      	ldr	r2, [pc, #396]	; (8004140 <HAL_DMA_IRQHandler+0x408>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d036      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a61      	ldr	r2, [pc, #388]	; (8004144 <HAL_DMA_IRQHandler+0x40c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d031      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a60      	ldr	r2, [pc, #384]	; (8004148 <HAL_DMA_IRQHandler+0x410>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d02c      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5e      	ldr	r2, [pc, #376]	; (800414c <HAL_DMA_IRQHandler+0x414>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d027      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5d      	ldr	r2, [pc, #372]	; (8004150 <HAL_DMA_IRQHandler+0x418>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5b      	ldr	r2, [pc, #364]	; (8004154 <HAL_DMA_IRQHandler+0x41c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a5a      	ldr	r2, [pc, #360]	; (8004158 <HAL_DMA_IRQHandler+0x420>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a58      	ldr	r2, [pc, #352]	; (800415c <HAL_DMA_IRQHandler+0x424>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a57      	ldr	r2, [pc, #348]	; (8004160 <HAL_DMA_IRQHandler+0x428>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a55      	ldr	r2, [pc, #340]	; (8004164 <HAL_DMA_IRQHandler+0x42c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a54      	ldr	r2, [pc, #336]	; (8004168 <HAL_DMA_IRQHandler+0x430>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_DMA_IRQHandler+0x2ee>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a52      	ldr	r2, [pc, #328]	; (800416c <HAL_DMA_IRQHandler+0x434>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10a      	bne.n	800403c <HAL_DMA_IRQHandler+0x304>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e003      	b.n	8004044 <HAL_DMA_IRQHandler+0x30c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f043 0202 	orr.w	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2204      	movs	r2, #4
 800406e:	409a      	lsls	r2, r3
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 808f 	beq.w	8004198 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <HAL_DMA_IRQHandler+0x3f8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d04a      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <HAL_DMA_IRQHandler+0x3fc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d045      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a29      	ldr	r2, [pc, #164]	; (8004138 <HAL_DMA_IRQHandler+0x400>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d040      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a27      	ldr	r2, [pc, #156]	; (800413c <HAL_DMA_IRQHandler+0x404>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a26      	ldr	r2, [pc, #152]	; (8004140 <HAL_DMA_IRQHandler+0x408>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d036      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a24      	ldr	r2, [pc, #144]	; (8004144 <HAL_DMA_IRQHandler+0x40c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d031      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a23      	ldr	r2, [pc, #140]	; (8004148 <HAL_DMA_IRQHandler+0x410>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d02c      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a21      	ldr	r2, [pc, #132]	; (800414c <HAL_DMA_IRQHandler+0x414>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a20      	ldr	r2, [pc, #128]	; (8004150 <HAL_DMA_IRQHandler+0x418>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <HAL_DMA_IRQHandler+0x41c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01d      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_DMA_IRQHandler+0x420>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <HAL_DMA_IRQHandler+0x424>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <HAL_DMA_IRQHandler+0x428>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_DMA_IRQHandler+0x42c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a17      	ldr	r2, [pc, #92]	; (8004168 <HAL_DMA_IRQHandler+0x430>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_DMA_IRQHandler+0x3e2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a15      	ldr	r2, [pc, #84]	; (800416c <HAL_DMA_IRQHandler+0x434>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d12a      	bne.n	8004170 <HAL_DMA_IRQHandler+0x438>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e023      	b.n	8004178 <HAL_DMA_IRQHandler+0x440>
 8004130:	40020010 	.word	0x40020010
 8004134:	40020028 	.word	0x40020028
 8004138:	40020040 	.word	0x40020040
 800413c:	40020058 	.word	0x40020058
 8004140:	40020070 	.word	0x40020070
 8004144:	40020088 	.word	0x40020088
 8004148:	400200a0 	.word	0x400200a0
 800414c:	400200b8 	.word	0x400200b8
 8004150:	40020410 	.word	0x40020410
 8004154:	40020428 	.word	0x40020428
 8004158:	40020440 	.word	0x40020440
 800415c:	40020458 	.word	0x40020458
 8004160:	40020470 	.word	0x40020470
 8004164:	40020488 	.word	0x40020488
 8004168:	400204a0 	.word	0x400204a0
 800416c:	400204b8 	.word	0x400204b8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2300      	movs	r3, #0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00d      	beq.n	8004198 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2204      	movs	r2, #4
 8004186:	409a      	lsls	r2, r3
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f043 0204 	orr.w	r2, r3, #4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2210      	movs	r2, #16
 80041a2:	409a      	lsls	r2, r3
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a6 	beq.w	80042fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a85      	ldr	r2, [pc, #532]	; (80043c8 <HAL_DMA_IRQHandler+0x690>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d04a      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a83      	ldr	r2, [pc, #524]	; (80043cc <HAL_DMA_IRQHandler+0x694>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d045      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a82      	ldr	r2, [pc, #520]	; (80043d0 <HAL_DMA_IRQHandler+0x698>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d040      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a80      	ldr	r2, [pc, #512]	; (80043d4 <HAL_DMA_IRQHandler+0x69c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d03b      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7f      	ldr	r2, [pc, #508]	; (80043d8 <HAL_DMA_IRQHandler+0x6a0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d036      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7d      	ldr	r2, [pc, #500]	; (80043dc <HAL_DMA_IRQHandler+0x6a4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a7c      	ldr	r2, [pc, #496]	; (80043e0 <HAL_DMA_IRQHandler+0x6a8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d02c      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a7a      	ldr	r2, [pc, #488]	; (80043e4 <HAL_DMA_IRQHandler+0x6ac>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d027      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a79      	ldr	r2, [pc, #484]	; (80043e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a77      	ldr	r2, [pc, #476]	; (80043ec <HAL_DMA_IRQHandler+0x6b4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a76      	ldr	r2, [pc, #472]	; (80043f0 <HAL_DMA_IRQHandler+0x6b8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d018      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a74      	ldr	r2, [pc, #464]	; (80043f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a73      	ldr	r2, [pc, #460]	; (80043f8 <HAL_DMA_IRQHandler+0x6c0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a71      	ldr	r2, [pc, #452]	; (80043fc <HAL_DMA_IRQHandler+0x6c4>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a70      	ldr	r2, [pc, #448]	; (8004400 <HAL_DMA_IRQHandler+0x6c8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_DMA_IRQHandler+0x516>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_DMA_IRQHandler+0x6cc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10a      	bne.n	8004264 <HAL_DMA_IRQHandler+0x52c>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e009      	b.n	8004278 <HAL_DMA_IRQHandler+0x540>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d03e      	beq.n	80042fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2210      	movs	r2, #16
 8004286:	409a      	lsls	r2, r3
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d018      	beq.n	80042cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d108      	bne.n	80042ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d024      	beq.n	80042fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	4798      	blx	r3
 80042b8:	e01f      	b.n	80042fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01b      	beq.n	80042fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e016      	b.n	80042fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0208 	bic.w	r2, r2, #8
 80042e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	2220      	movs	r2, #32
 8004304:	409a      	lsls	r2, r3
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8110 	beq.w	8004530 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2c      	ldr	r2, [pc, #176]	; (80043c8 <HAL_DMA_IRQHandler+0x690>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04a      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2b      	ldr	r2, [pc, #172]	; (80043cc <HAL_DMA_IRQHandler+0x694>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d045      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <HAL_DMA_IRQHandler+0x698>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a28      	ldr	r2, [pc, #160]	; (80043d4 <HAL_DMA_IRQHandler+0x69c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d03b      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a26      	ldr	r2, [pc, #152]	; (80043d8 <HAL_DMA_IRQHandler+0x6a0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d036      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a25      	ldr	r2, [pc, #148]	; (80043dc <HAL_DMA_IRQHandler+0x6a4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d031      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a23      	ldr	r2, [pc, #140]	; (80043e0 <HAL_DMA_IRQHandler+0x6a8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <HAL_DMA_IRQHandler+0x6ac>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d027      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a20      	ldr	r2, [pc, #128]	; (80043e8 <HAL_DMA_IRQHandler+0x6b0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1f      	ldr	r2, [pc, #124]	; (80043ec <HAL_DMA_IRQHandler+0x6b4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_DMA_IRQHandler+0x6b8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <HAL_DMA_IRQHandler+0x6bc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1a      	ldr	r2, [pc, #104]	; (80043f8 <HAL_DMA_IRQHandler+0x6c0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_DMA_IRQHandler+0x6c4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_DMA_IRQHandler+0x6c8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x678>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_DMA_IRQHandler+0x6cc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d12b      	bne.n	8004408 <HAL_DMA_IRQHandler+0x6d0>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e02a      	b.n	800441c <HAL_DMA_IRQHandler+0x6e4>
 80043c6:	bf00      	nop
 80043c8:	40020010 	.word	0x40020010
 80043cc:	40020028 	.word	0x40020028
 80043d0:	40020040 	.word	0x40020040
 80043d4:	40020058 	.word	0x40020058
 80043d8:	40020070 	.word	0x40020070
 80043dc:	40020088 	.word	0x40020088
 80043e0:	400200a0 	.word	0x400200a0
 80043e4:	400200b8 	.word	0x400200b8
 80043e8:	40020410 	.word	0x40020410
 80043ec:	40020428 	.word	0x40020428
 80043f0:	40020440 	.word	0x40020440
 80043f4:	40020458 	.word	0x40020458
 80043f8:	40020470 	.word	0x40020470
 80043fc:	40020488 	.word	0x40020488
 8004400:	400204a0 	.word	0x400204a0
 8004404:	400204b8 	.word	0x400204b8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8087 	beq.w	8004530 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2220      	movs	r2, #32
 800442c:	409a      	lsls	r2, r3
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b04      	cmp	r3, #4
 800443c:	d139      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0216 	bic.w	r2, r2, #22
 800444c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <HAL_DMA_IRQHandler+0x736>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0208 	bic.w	r2, r2, #8
 800447c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	223f      	movs	r2, #63	; 0x3f
 8004488:	409a      	lsls	r2, r3
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 834a 	beq.w	8004b3c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
          }
          return;
 80044b0:	e344      	b.n	8004b3c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d018      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d02c      	beq.n	8004530 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
 80044de:	e027      	b.n	8004530 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d023      	beq.n	8004530 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e01e      	b.n	8004530 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10f      	bne.n	8004520 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0210 	bic.w	r2, r2, #16
 800450e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8306 	beq.w	8004b46 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8088 	beq.w	8004658 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2204      	movs	r2, #4
 800454c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a7a      	ldr	r2, [pc, #488]	; (8004740 <HAL_DMA_IRQHandler+0xa08>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d04a      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a79      	ldr	r2, [pc, #484]	; (8004744 <HAL_DMA_IRQHandler+0xa0c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d045      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a77      	ldr	r2, [pc, #476]	; (8004748 <HAL_DMA_IRQHandler+0xa10>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d040      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a76      	ldr	r2, [pc, #472]	; (800474c <HAL_DMA_IRQHandler+0xa14>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d03b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a74      	ldr	r2, [pc, #464]	; (8004750 <HAL_DMA_IRQHandler+0xa18>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d036      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a73      	ldr	r2, [pc, #460]	; (8004754 <HAL_DMA_IRQHandler+0xa1c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d031      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a71      	ldr	r2, [pc, #452]	; (8004758 <HAL_DMA_IRQHandler+0xa20>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02c      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a70      	ldr	r2, [pc, #448]	; (800475c <HAL_DMA_IRQHandler+0xa24>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d027      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6e      	ldr	r2, [pc, #440]	; (8004760 <HAL_DMA_IRQHandler+0xa28>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a6d      	ldr	r2, [pc, #436]	; (8004764 <HAL_DMA_IRQHandler+0xa2c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d01d      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a6b      	ldr	r2, [pc, #428]	; (8004768 <HAL_DMA_IRQHandler+0xa30>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a6a      	ldr	r2, [pc, #424]	; (800476c <HAL_DMA_IRQHandler+0xa34>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a68      	ldr	r2, [pc, #416]	; (8004770 <HAL_DMA_IRQHandler+0xa38>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a67      	ldr	r2, [pc, #412]	; (8004774 <HAL_DMA_IRQHandler+0xa3c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a65      	ldr	r2, [pc, #404]	; (8004778 <HAL_DMA_IRQHandler+0xa40>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x8b8>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a64      	ldr	r2, [pc, #400]	; (800477c <HAL_DMA_IRQHandler+0xa44>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d108      	bne.n	8004602 <HAL_DMA_IRQHandler+0x8ca>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e007      	b.n	8004612 <HAL_DMA_IRQHandler+0x8da>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	429a      	cmp	r2, r3
 800461c:	d307      	bcc.n	800462e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f2      	bne.n	8004612 <HAL_DMA_IRQHandler+0x8da>
 800462c:	e000      	b.n	8004630 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800462e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2203      	movs	r2, #3
 8004642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004646:	e003      	b.n	8004650 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8272 	beq.w	8004b46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
 800466a:	e26c      	b.n	8004b46 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a43      	ldr	r2, [pc, #268]	; (8004780 <HAL_DMA_IRQHandler+0xa48>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d022      	beq.n	80046bc <HAL_DMA_IRQHandler+0x984>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a42      	ldr	r2, [pc, #264]	; (8004784 <HAL_DMA_IRQHandler+0xa4c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d01d      	beq.n	80046bc <HAL_DMA_IRQHandler+0x984>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a40      	ldr	r2, [pc, #256]	; (8004788 <HAL_DMA_IRQHandler+0xa50>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <HAL_DMA_IRQHandler+0x984>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3f      	ldr	r2, [pc, #252]	; (800478c <HAL_DMA_IRQHandler+0xa54>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <HAL_DMA_IRQHandler+0x984>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <HAL_DMA_IRQHandler+0xa58>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <HAL_DMA_IRQHandler+0x984>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a3c      	ldr	r2, [pc, #240]	; (8004794 <HAL_DMA_IRQHandler+0xa5c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_DMA_IRQHandler+0x984>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <HAL_DMA_IRQHandler+0xa60>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_DMA_IRQHandler+0x984>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a39      	ldr	r2, [pc, #228]	; (800479c <HAL_DMA_IRQHandler+0xa64>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x988>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_DMA_IRQHandler+0x98a>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 823f 	beq.w	8004b46 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	2204      	movs	r2, #4
 80046da:	409a      	lsls	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80cd 	beq.w	8004880 <HAL_DMA_IRQHandler+0xb48>
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 80c7 	beq.w	8004880 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	2204      	movs	r2, #4
 80046fc:	409a      	lsls	r2, r3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d049      	beq.n	80047a0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 8210 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004728:	e20a      	b.n	8004b40 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8206 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800473c:	e200      	b.n	8004b40 <HAL_DMA_IRQHandler+0xe08>
 800473e:	bf00      	nop
 8004740:	40020010 	.word	0x40020010
 8004744:	40020028 	.word	0x40020028
 8004748:	40020040 	.word	0x40020040
 800474c:	40020058 	.word	0x40020058
 8004750:	40020070 	.word	0x40020070
 8004754:	40020088 	.word	0x40020088
 8004758:	400200a0 	.word	0x400200a0
 800475c:	400200b8 	.word	0x400200b8
 8004760:	40020410 	.word	0x40020410
 8004764:	40020428 	.word	0x40020428
 8004768:	40020440 	.word	0x40020440
 800476c:	40020458 	.word	0x40020458
 8004770:	40020470 	.word	0x40020470
 8004774:	40020488 	.word	0x40020488
 8004778:	400204a0 	.word	0x400204a0
 800477c:	400204b8 	.word	0x400204b8
 8004780:	58025408 	.word	0x58025408
 8004784:	5802541c 	.word	0x5802541c
 8004788:	58025430 	.word	0x58025430
 800478c:	58025444 	.word	0x58025444
 8004790:	58025458 	.word	0x58025458
 8004794:	5802546c 	.word	0x5802546c
 8004798:	58025480 	.word	0x58025480
 800479c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d160      	bne.n	800486c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a8c      	ldr	r2, [pc, #560]	; (80049e0 <HAL_DMA_IRQHandler+0xca8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d04a      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a8a      	ldr	r2, [pc, #552]	; (80049e4 <HAL_DMA_IRQHandler+0xcac>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d045      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a89      	ldr	r2, [pc, #548]	; (80049e8 <HAL_DMA_IRQHandler+0xcb0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d040      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a87      	ldr	r2, [pc, #540]	; (80049ec <HAL_DMA_IRQHandler+0xcb4>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d03b      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a86      	ldr	r2, [pc, #536]	; (80049f0 <HAL_DMA_IRQHandler+0xcb8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d036      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a84      	ldr	r2, [pc, #528]	; (80049f4 <HAL_DMA_IRQHandler+0xcbc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a83      	ldr	r2, [pc, #524]	; (80049f8 <HAL_DMA_IRQHandler+0xcc0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d02c      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a81      	ldr	r2, [pc, #516]	; (80049fc <HAL_DMA_IRQHandler+0xcc4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d027      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a80      	ldr	r2, [pc, #512]	; (8004a00 <HAL_DMA_IRQHandler+0xcc8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d022      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7e      	ldr	r2, [pc, #504]	; (8004a04 <HAL_DMA_IRQHandler+0xccc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d01d      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a7d      	ldr	r2, [pc, #500]	; (8004a08 <HAL_DMA_IRQHandler+0xcd0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d018      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7b      	ldr	r2, [pc, #492]	; (8004a0c <HAL_DMA_IRQHandler+0xcd4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7a      	ldr	r2, [pc, #488]	; (8004a10 <HAL_DMA_IRQHandler+0xcd8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00e      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a78      	ldr	r2, [pc, #480]	; (8004a14 <HAL_DMA_IRQHandler+0xcdc>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a77      	ldr	r2, [pc, #476]	; (8004a18 <HAL_DMA_IRQHandler+0xce0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d004      	beq.n	800484a <HAL_DMA_IRQHandler+0xb12>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a75      	ldr	r2, [pc, #468]	; (8004a1c <HAL_DMA_IRQHandler+0xce4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <HAL_DMA_IRQHandler+0xb24>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0208 	bic.w	r2, r2, #8
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e007      	b.n	800486c <HAL_DMA_IRQHandler+0xb34>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0204 	bic.w	r2, r2, #4
 800486a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8165 	beq.w	8004b40 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800487e:	e15f      	b.n	8004b40 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2202      	movs	r2, #2
 800488a:	409a      	lsls	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80c5 	beq.w	8004a20 <HAL_DMA_IRQHandler+0xce8>
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80bf 	beq.w	8004a20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2202      	movs	r2, #2
 80048ac:	409a      	lsls	r2, r3
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 813a 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d8:	e134      	b.n	8004b44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 8130 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ec:	e12a      	b.n	8004b44 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d168      	bne.n	80049ca <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <HAL_DMA_IRQHandler+0xca8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d04a      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <HAL_DMA_IRQHandler+0xcac>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d045      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a35      	ldr	r2, [pc, #212]	; (80049e8 <HAL_DMA_IRQHandler+0xcb0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d040      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <HAL_DMA_IRQHandler+0xcb4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d03b      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a32      	ldr	r2, [pc, #200]	; (80049f0 <HAL_DMA_IRQHandler+0xcb8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d036      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a31      	ldr	r2, [pc, #196]	; (80049f4 <HAL_DMA_IRQHandler+0xcbc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d031      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <HAL_DMA_IRQHandler+0xcc0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02c      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <HAL_DMA_IRQHandler+0xcc4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d027      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <HAL_DMA_IRQHandler+0xcc8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d022      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <HAL_DMA_IRQHandler+0xccc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d01d      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <HAL_DMA_IRQHandler+0xcd0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d018      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <HAL_DMA_IRQHandler+0xcd4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a26      	ldr	r2, [pc, #152]	; (8004a10 <HAL_DMA_IRQHandler+0xcd8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00e      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <HAL_DMA_IRQHandler+0xcdc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a23      	ldr	r2, [pc, #140]	; (8004a18 <HAL_DMA_IRQHandler+0xce0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_DMA_IRQHandler+0xc60>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_DMA_IRQHandler+0xce4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d108      	bne.n	80049aa <HAL_DMA_IRQHandler+0xc72>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0214 	bic.w	r2, r2, #20
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e007      	b.n	80049ba <HAL_DMA_IRQHandler+0xc82>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 020a 	bic.w	r2, r2, #10
 80049b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80b8 	beq.w	8004b44 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049dc:	e0b2      	b.n	8004b44 <HAL_DMA_IRQHandler+0xe0c>
 80049de:	bf00      	nop
 80049e0:	40020010 	.word	0x40020010
 80049e4:	40020028 	.word	0x40020028
 80049e8:	40020040 	.word	0x40020040
 80049ec:	40020058 	.word	0x40020058
 80049f0:	40020070 	.word	0x40020070
 80049f4:	40020088 	.word	0x40020088
 80049f8:	400200a0 	.word	0x400200a0
 80049fc:	400200b8 	.word	0x400200b8
 8004a00:	40020410 	.word	0x40020410
 8004a04:	40020428 	.word	0x40020428
 8004a08:	40020440 	.word	0x40020440
 8004a0c:	40020458 	.word	0x40020458
 8004a10:	40020470 	.word	0x40020470
 8004a14:	40020488 	.word	0x40020488
 8004a18:	400204a0 	.word	0x400204a0
 8004a1c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2208      	movs	r2, #8
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8088 	beq.w	8004b46 <HAL_DMA_IRQHandler+0xe0e>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8082 	beq.w	8004b46 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a41      	ldr	r2, [pc, #260]	; (8004b4c <HAL_DMA_IRQHandler+0xe14>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d04a      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a3f      	ldr	r2, [pc, #252]	; (8004b50 <HAL_DMA_IRQHandler+0xe18>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d045      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a3e      	ldr	r2, [pc, #248]	; (8004b54 <HAL_DMA_IRQHandler+0xe1c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d040      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a3c      	ldr	r2, [pc, #240]	; (8004b58 <HAL_DMA_IRQHandler+0xe20>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d03b      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a3b      	ldr	r2, [pc, #236]	; (8004b5c <HAL_DMA_IRQHandler+0xe24>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d036      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a39      	ldr	r2, [pc, #228]	; (8004b60 <HAL_DMA_IRQHandler+0xe28>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d031      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a38      	ldr	r2, [pc, #224]	; (8004b64 <HAL_DMA_IRQHandler+0xe2c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d02c      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a36      	ldr	r2, [pc, #216]	; (8004b68 <HAL_DMA_IRQHandler+0xe30>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d027      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a35      	ldr	r2, [pc, #212]	; (8004b6c <HAL_DMA_IRQHandler+0xe34>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d022      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a33      	ldr	r2, [pc, #204]	; (8004b70 <HAL_DMA_IRQHandler+0xe38>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01d      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a32      	ldr	r2, [pc, #200]	; (8004b74 <HAL_DMA_IRQHandler+0xe3c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d018      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a30      	ldr	r2, [pc, #192]	; (8004b78 <HAL_DMA_IRQHandler+0xe40>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2f      	ldr	r2, [pc, #188]	; (8004b7c <HAL_DMA_IRQHandler+0xe44>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a2d      	ldr	r2, [pc, #180]	; (8004b80 <HAL_DMA_IRQHandler+0xe48>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d009      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2c      	ldr	r2, [pc, #176]	; (8004b84 <HAL_DMA_IRQHandler+0xe4c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0xdaa>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <HAL_DMA_IRQHandler+0xe50>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <HAL_DMA_IRQHandler+0xdbc>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 021c 	bic.w	r2, r2, #28
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e007      	b.n	8004b04 <HAL_DMA_IRQHandler+0xdcc>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020e 	bic.w	r2, r2, #14
 8004b02:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
 8004b3a:	e004      	b.n	8004b46 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b3c:	bf00      	nop
 8004b3e:	e002      	b.n	8004b46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b40:	bf00      	nop
 8004b42:	e000      	b.n	8004b46 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b44:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b46:	3728      	adds	r7, #40	; 0x28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40020010 	.word	0x40020010
 8004b50:	40020028 	.word	0x40020028
 8004b54:	40020040 	.word	0x40020040
 8004b58:	40020058 	.word	0x40020058
 8004b5c:	40020070 	.word	0x40020070
 8004b60:	40020088 	.word	0x40020088
 8004b64:	400200a0 	.word	0x400200a0
 8004b68:	400200b8 	.word	0x400200b8
 8004b6c:	40020410 	.word	0x40020410
 8004b70:	40020428 	.word	0x40020428
 8004b74:	40020440 	.word	0x40020440
 8004b78:	40020458 	.word	0x40020458
 8004b7c:	40020470 	.word	0x40020470
 8004b80:	40020488 	.word	0x40020488
 8004b84:	400204a0 	.word	0x400204a0
 8004b88:	400204b8 	.word	0x400204b8

08004b8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a84      	ldr	r2, [pc, #528]	; (8004dbc <DMA_SetConfig+0x230>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d072      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a82      	ldr	r2, [pc, #520]	; (8004dc0 <DMA_SetConfig+0x234>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d06d      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a81      	ldr	r2, [pc, #516]	; (8004dc4 <DMA_SetConfig+0x238>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d068      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7f      	ldr	r2, [pc, #508]	; (8004dc8 <DMA_SetConfig+0x23c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d063      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a7e      	ldr	r2, [pc, #504]	; (8004dcc <DMA_SetConfig+0x240>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d05e      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a7c      	ldr	r2, [pc, #496]	; (8004dd0 <DMA_SetConfig+0x244>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d059      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a7b      	ldr	r2, [pc, #492]	; (8004dd4 <DMA_SetConfig+0x248>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d054      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a79      	ldr	r2, [pc, #484]	; (8004dd8 <DMA_SetConfig+0x24c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d04f      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a78      	ldr	r2, [pc, #480]	; (8004ddc <DMA_SetConfig+0x250>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d04a      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a76      	ldr	r2, [pc, #472]	; (8004de0 <DMA_SetConfig+0x254>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d045      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a75      	ldr	r2, [pc, #468]	; (8004de4 <DMA_SetConfig+0x258>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d040      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a73      	ldr	r2, [pc, #460]	; (8004de8 <DMA_SetConfig+0x25c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d03b      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a72      	ldr	r2, [pc, #456]	; (8004dec <DMA_SetConfig+0x260>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d036      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a70      	ldr	r2, [pc, #448]	; (8004df0 <DMA_SetConfig+0x264>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d031      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6f      	ldr	r2, [pc, #444]	; (8004df4 <DMA_SetConfig+0x268>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d02c      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a6d      	ldr	r2, [pc, #436]	; (8004df8 <DMA_SetConfig+0x26c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d027      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6c      	ldr	r2, [pc, #432]	; (8004dfc <DMA_SetConfig+0x270>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d022      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a6a      	ldr	r2, [pc, #424]	; (8004e00 <DMA_SetConfig+0x274>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01d      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a69      	ldr	r2, [pc, #420]	; (8004e04 <DMA_SetConfig+0x278>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a67      	ldr	r2, [pc, #412]	; (8004e08 <DMA_SetConfig+0x27c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a66      	ldr	r2, [pc, #408]	; (8004e0c <DMA_SetConfig+0x280>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a64      	ldr	r2, [pc, #400]	; (8004e10 <DMA_SetConfig+0x284>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a63      	ldr	r2, [pc, #396]	; (8004e14 <DMA_SetConfig+0x288>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a61      	ldr	r2, [pc, #388]	; (8004e18 <DMA_SetConfig+0x28c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <DMA_SetConfig+0x10e>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <DMA_SetConfig+0x110>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00d      	beq.n	8004cbc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ca8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004cba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a3e      	ldr	r2, [pc, #248]	; (8004dbc <DMA_SetConfig+0x230>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d04a      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3d      	ldr	r2, [pc, #244]	; (8004dc0 <DMA_SetConfig+0x234>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d045      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a3b      	ldr	r2, [pc, #236]	; (8004dc4 <DMA_SetConfig+0x238>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d040      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3a      	ldr	r2, [pc, #232]	; (8004dc8 <DMA_SetConfig+0x23c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d03b      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a38      	ldr	r2, [pc, #224]	; (8004dcc <DMA_SetConfig+0x240>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d036      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a37      	ldr	r2, [pc, #220]	; (8004dd0 <DMA_SetConfig+0x244>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d031      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a35      	ldr	r2, [pc, #212]	; (8004dd4 <DMA_SetConfig+0x248>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02c      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <DMA_SetConfig+0x24c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d027      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a32      	ldr	r2, [pc, #200]	; (8004ddc <DMA_SetConfig+0x250>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a31      	ldr	r2, [pc, #196]	; (8004de0 <DMA_SetConfig+0x254>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01d      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2f      	ldr	r2, [pc, #188]	; (8004de4 <DMA_SetConfig+0x258>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2e      	ldr	r2, [pc, #184]	; (8004de8 <DMA_SetConfig+0x25c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2c      	ldr	r2, [pc, #176]	; (8004dec <DMA_SetConfig+0x260>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2b      	ldr	r2, [pc, #172]	; (8004df0 <DMA_SetConfig+0x264>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <DMA_SetConfig+0x268>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a28      	ldr	r2, [pc, #160]	; (8004df8 <DMA_SetConfig+0x26c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <DMA_SetConfig+0x1d4>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <DMA_SetConfig+0x1d6>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d05a      	beq.n	8004e1c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	223f      	movs	r2, #63	; 0x3f
 8004d70:	409a      	lsls	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d108      	bne.n	8004da8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004da6:	e087      	b.n	8004eb8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
}
 8004db8:	e07e      	b.n	8004eb8 <DMA_SetConfig+0x32c>
 8004dba:	bf00      	nop
 8004dbc:	40020010 	.word	0x40020010
 8004dc0:	40020028 	.word	0x40020028
 8004dc4:	40020040 	.word	0x40020040
 8004dc8:	40020058 	.word	0x40020058
 8004dcc:	40020070 	.word	0x40020070
 8004dd0:	40020088 	.word	0x40020088
 8004dd4:	400200a0 	.word	0x400200a0
 8004dd8:	400200b8 	.word	0x400200b8
 8004ddc:	40020410 	.word	0x40020410
 8004de0:	40020428 	.word	0x40020428
 8004de4:	40020440 	.word	0x40020440
 8004de8:	40020458 	.word	0x40020458
 8004dec:	40020470 	.word	0x40020470
 8004df0:	40020488 	.word	0x40020488
 8004df4:	400204a0 	.word	0x400204a0
 8004df8:	400204b8 	.word	0x400204b8
 8004dfc:	58025408 	.word	0x58025408
 8004e00:	5802541c 	.word	0x5802541c
 8004e04:	58025430 	.word	0x58025430
 8004e08:	58025444 	.word	0x58025444
 8004e0c:	58025458 	.word	0x58025458
 8004e10:	5802546c 	.word	0x5802546c
 8004e14:	58025480 	.word	0x58025480
 8004e18:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <DMA_SetConfig+0x338>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d022      	beq.n	8004e6c <DMA_SetConfig+0x2e0>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <DMA_SetConfig+0x33c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01d      	beq.n	8004e6c <DMA_SetConfig+0x2e0>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <DMA_SetConfig+0x340>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <DMA_SetConfig+0x2e0>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a24      	ldr	r2, [pc, #144]	; (8004ed0 <DMA_SetConfig+0x344>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <DMA_SetConfig+0x2e0>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a22      	ldr	r2, [pc, #136]	; (8004ed4 <DMA_SetConfig+0x348>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <DMA_SetConfig+0x2e0>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	; (8004ed8 <DMA_SetConfig+0x34c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <DMA_SetConfig+0x2e0>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	; (8004edc <DMA_SetConfig+0x350>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <DMA_SetConfig+0x2e0>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1e      	ldr	r2, [pc, #120]	; (8004ee0 <DMA_SetConfig+0x354>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <DMA_SetConfig+0x2e4>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <DMA_SetConfig+0x2e6>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d020      	beq.n	8004eb8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7a:	f003 031f 	and.w	r3, r3, #31
 8004e7e:	2201      	movs	r2, #1
 8004e80:	409a      	lsls	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d108      	bne.n	8004ea8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	60da      	str	r2, [r3, #12]
}
 8004ea6:	e007      	b.n	8004eb8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	58025408 	.word	0x58025408
 8004ec8:	5802541c 	.word	0x5802541c
 8004ecc:	58025430 	.word	0x58025430
 8004ed0:	58025444 	.word	0x58025444
 8004ed4:	58025458 	.word	0x58025458
 8004ed8:	5802546c 	.word	0x5802546c
 8004edc:	58025480 	.word	0x58025480
 8004ee0:	58025494 	.word	0x58025494

08004ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a42      	ldr	r2, [pc, #264]	; (8004ffc <DMA_CalcBaseAndBitshift+0x118>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d04a      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a41      	ldr	r2, [pc, #260]	; (8005000 <DMA_CalcBaseAndBitshift+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d045      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3f      	ldr	r2, [pc, #252]	; (8005004 <DMA_CalcBaseAndBitshift+0x120>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d040      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3e      	ldr	r2, [pc, #248]	; (8005008 <DMA_CalcBaseAndBitshift+0x124>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d03b      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3c      	ldr	r2, [pc, #240]	; (800500c <DMA_CalcBaseAndBitshift+0x128>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d036      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a3b      	ldr	r2, [pc, #236]	; (8005010 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d031      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a39      	ldr	r2, [pc, #228]	; (8005014 <DMA_CalcBaseAndBitshift+0x130>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02c      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a38      	ldr	r2, [pc, #224]	; (8005018 <DMA_CalcBaseAndBitshift+0x134>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d027      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a36      	ldr	r2, [pc, #216]	; (800501c <DMA_CalcBaseAndBitshift+0x138>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a35      	ldr	r2, [pc, #212]	; (8005020 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01d      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a33      	ldr	r2, [pc, #204]	; (8005024 <DMA_CalcBaseAndBitshift+0x140>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a32      	ldr	r2, [pc, #200]	; (8005028 <DMA_CalcBaseAndBitshift+0x144>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a30      	ldr	r2, [pc, #192]	; (800502c <DMA_CalcBaseAndBitshift+0x148>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2f      	ldr	r2, [pc, #188]	; (8005030 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <DMA_CalcBaseAndBitshift+0x150>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <DMA_CalcBaseAndBitshift+0x154>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d101      	bne.n	8004f90 <DMA_CalcBaseAndBitshift+0xac>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <DMA_CalcBaseAndBitshift+0xae>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d024      	beq.n	8004fe0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	3b10      	subs	r3, #16
 8004f9e:	4a27      	ldr	r2, [pc, #156]	; (800503c <DMA_CalcBaseAndBitshift+0x158>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	4a24      	ldr	r2, [pc, #144]	; (8005040 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fb0:	5cd3      	ldrb	r3, [r2, r3]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d908      	bls.n	8004fd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b1f      	ldr	r3, [pc, #124]	; (8005044 <DMA_CalcBaseAndBitshift+0x160>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	659a      	str	r2, [r3, #88]	; 0x58
 8004fce:	e00d      	b.n	8004fec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <DMA_CalcBaseAndBitshift+0x160>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8004fde:	e005      	b.n	8004fec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40020010 	.word	0x40020010
 8005000:	40020028 	.word	0x40020028
 8005004:	40020040 	.word	0x40020040
 8005008:	40020058 	.word	0x40020058
 800500c:	40020070 	.word	0x40020070
 8005010:	40020088 	.word	0x40020088
 8005014:	400200a0 	.word	0x400200a0
 8005018:	400200b8 	.word	0x400200b8
 800501c:	40020410 	.word	0x40020410
 8005020:	40020428 	.word	0x40020428
 8005024:	40020440 	.word	0x40020440
 8005028:	40020458 	.word	0x40020458
 800502c:	40020470 	.word	0x40020470
 8005030:	40020488 	.word	0x40020488
 8005034:	400204a0 	.word	0x400204a0
 8005038:	400204b8 	.word	0x400204b8
 800503c:	aaaaaaab 	.word	0xaaaaaaab
 8005040:	0800ea68 	.word	0x0800ea68
 8005044:	fffffc00 	.word	0xfffffc00

08005048 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d120      	bne.n	800509e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	2b03      	cmp	r3, #3
 8005062:	d858      	bhi.n	8005116 <DMA_CheckFifoParam+0xce>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <DMA_CheckFifoParam+0x24>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800507d 	.word	0x0800507d
 8005070:	0800508f 	.word	0x0800508f
 8005074:	0800507d 	.word	0x0800507d
 8005078:	08005117 	.word	0x08005117
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d048      	beq.n	800511a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800508c:	e045      	b.n	800511a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005096:	d142      	bne.n	800511e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800509c:	e03f      	b.n	800511e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050a6:	d123      	bne.n	80050f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d838      	bhi.n	8005122 <DMA_CheckFifoParam+0xda>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <DMA_CheckFifoParam+0x70>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050cf 	.word	0x080050cf
 80050c0:	080050c9 	.word	0x080050c9
 80050c4:	080050e1 	.word	0x080050e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
        break;
 80050cc:	e030      	b.n	8005130 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d025      	beq.n	8005126 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050de:	e022      	b.n	8005126 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050e8:	d11f      	bne.n	800512a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ee:	e01c      	b.n	800512a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d902      	bls.n	80050fe <DMA_CheckFifoParam+0xb6>
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d003      	beq.n	8005104 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050fc:	e018      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
        break;
 8005102:	e015      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
    break;
 8005114:	e00b      	b.n	800512e <DMA_CheckFifoParam+0xe6>
        break;
 8005116:	bf00      	nop
 8005118:	e00a      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 800511a:	bf00      	nop
 800511c:	e008      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 800511e:	bf00      	nop
 8005120:	e006      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
    break;
 800512e:	bf00      	nop
    }
  }

  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop

08005140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a38      	ldr	r2, [pc, #224]	; (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d022      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a36      	ldr	r2, [pc, #216]	; (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01d      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a35      	ldr	r2, [pc, #212]	; (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d018      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a33      	ldr	r2, [pc, #204]	; (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a32      	ldr	r2, [pc, #200]	; (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a30      	ldr	r2, [pc, #192]	; (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2d      	ldr	r2, [pc, #180]	; (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	3b08      	subs	r3, #8
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4b26      	ldr	r3, [pc, #152]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a24      	ldr	r2, [pc, #144]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051dc:	e024      	b.n	8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	3b10      	subs	r3, #16
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d806      	bhi.n	8005206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d902      	bls.n	8005206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3308      	adds	r3, #8
 8005204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4b18      	ldr	r3, [pc, #96]	; (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005218:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2201      	movs	r2, #1
 8005222:	409a      	lsls	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	58025408 	.word	0x58025408
 8005238:	5802541c 	.word	0x5802541c
 800523c:	58025430 	.word	0x58025430
 8005240:	58025444 	.word	0x58025444
 8005244:	58025458 	.word	0x58025458
 8005248:	5802546c 	.word	0x5802546c
 800524c:	58025480 	.word	0x58025480
 8005250:	58025494 	.word	0x58025494
 8005254:	cccccccd 	.word	0xcccccccd
 8005258:	16009600 	.word	0x16009600
 800525c:	58025880 	.word	0x58025880
 8005260:	aaaaaaab 	.word	0xaaaaaaab
 8005264:	400204b8 	.word	0x400204b8
 8005268:	4002040f 	.word	0x4002040f
 800526c:	10008200 	.word	0x10008200
 8005270:	40020880 	.word	0x40020880

08005274 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d04a      	beq.n	8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d847      	bhi.n	8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a25      	ldr	r2, [pc, #148]	; (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a24      	ldr	r2, [pc, #144]	; (8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d01d      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a22      	ldr	r2, [pc, #136]	; (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a21      	ldr	r2, [pc, #132]	; (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1f      	ldr	r2, [pc, #124]	; (800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d101      	bne.n	80052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4b17      	ldr	r3, [pc, #92]	; (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	461a      	mov	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a15      	ldr	r2, [pc, #84]	; (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052fc:	671a      	str	r2, [r3, #112]	; 0x70
 80052fe:	e009      	b.n	8005314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4b14      	ldr	r3, [pc, #80]	; (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a11      	ldr	r2, [pc, #68]	; (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005312:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3b01      	subs	r3, #1
 8005318:	2201      	movs	r2, #1
 800531a:	409a      	lsls	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	58025408 	.word	0x58025408
 8005330:	5802541c 	.word	0x5802541c
 8005334:	58025430 	.word	0x58025430
 8005338:	58025444 	.word	0x58025444
 800533c:	58025458 	.word	0x58025458
 8005340:	5802546c 	.word	0x5802546c
 8005344:	58025480 	.word	0x58025480
 8005348:	58025494 	.word	0x58025494
 800534c:	1600963f 	.word	0x1600963f
 8005350:	58025940 	.word	0x58025940
 8005354:	1000823f 	.word	0x1000823f
 8005358:	40020940 	.word	0x40020940

0800535c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0c6      	b.n	80054fc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fb fc60 	bl	8000c3c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2223      	movs	r2, #35	; 0x23
 8005380:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005382:	4b60      	ldr	r3, [pc, #384]	; (8005504 <HAL_ETH_Init+0x1a8>)
 8005384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005388:	4a5e      	ldr	r2, [pc, #376]	; (8005504 <HAL_ETH_Init+0x1a8>)
 800538a:	f043 0302 	orr.w	r3, r3, #2
 800538e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005392:	4b5c      	ldr	r3, [pc, #368]	; (8005504 <HAL_ETH_Init+0x1a8>)
 8005394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	7a1b      	ldrb	r3, [r3, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d103      	bne.n	80053b0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80053a8:	2000      	movs	r0, #0
 80053aa:	f7fb ff4b 	bl	8001244 <HAL_SYSCFG_ETHInterfaceSelect>
 80053ae:	e003      	b.n	80053b8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80053b4:	f7fb ff46 	bl	8001244 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053d0:	f7fb fefc 	bl	80011cc <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053d6:	e00f      	b.n	80053f8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80053d8:	f7fb fef8 	bl	80011cc <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053e6:	d907      	bls.n	80053f8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2204      	movs	r2, #4
 80053ec:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	22e0      	movs	r2, #224	; 0xe0
 80053f2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e081      	b.n	80054fc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fac0 	bl	8005990 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005410:	f002 ff2c 	bl	800826c <HAL_RCC_GetHCLKFreq>
 8005414:	4603      	mov	r3, r0
 8005416:	4a3c      	ldr	r2, [pc, #240]	; (8005508 <HAL_ETH_Init+0x1ac>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	0c9a      	lsrs	r2, r3, #18
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3a01      	subs	r2, #1
 8005424:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fa13 	bl	8005854 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005444:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005448:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	22e0      	movs	r2, #224	; 0xe0
 8005460:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e04a      	b.n	80054fc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f241 1308 	movw	r3, #4360	; 0x1108
 800546e:	4413      	add	r3, r2
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	4b26      	ldr	r3, [pc, #152]	; (800550c <HAL_ETH_Init+0x1b0>)
 8005474:	4013      	ands	r3, r2
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6952      	ldr	r2, [r2, #20]
 800547a:	0052      	lsls	r2, r2, #1
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	6809      	ldr	r1, [r1, #0]
 8005480:	431a      	orrs	r2, r3
 8005482:	f241 1308 	movw	r3, #4360	; 0x1108
 8005486:	440b      	add	r3, r1
 8005488:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fad8 	bl	8005a40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fb1c 	bl	8005ace <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	3305      	adds	r3, #5
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	021a      	lsls	r2, r3, #8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	4619      	mov	r1, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	3303      	adds	r3, #3
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	061a      	lsls	r2, r3, #24
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	3302      	adds	r3, #2
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	3301      	adds	r3, #1
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2210      	movs	r2, #16
 80054f2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2210      	movs	r2, #16
 80054f8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	58024400 	.word	0x58024400
 8005508:	431bde83 	.word	0x431bde83
 800550c:	ffff8001 	.word	0xffff8001

08005510 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005522:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	791b      	ldrb	r3, [r3, #4]
 8005528:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800552a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	7b1b      	ldrb	r3, [r3, #12]
 8005530:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005532:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	7b5b      	ldrb	r3, [r3, #13]
 8005538:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800553a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	7b9b      	ldrb	r3, [r3, #14]
 8005540:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005542:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	7bdb      	ldrb	r3, [r3, #15]
 8005548:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800554a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	7c12      	ldrb	r2, [r2, #16]
 8005550:	2a00      	cmp	r2, #0
 8005552:	d102      	bne.n	800555a <ETH_SetMACConfig+0x4a>
 8005554:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005558:	e000      	b.n	800555c <ETH_SetMACConfig+0x4c>
 800555a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800555c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	7c52      	ldrb	r2, [r2, #17]
 8005562:	2a00      	cmp	r2, #0
 8005564:	d102      	bne.n	800556c <ETH_SetMACConfig+0x5c>
 8005566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800556a:	e000      	b.n	800556e <ETH_SetMACConfig+0x5e>
 800556c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800556e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	7c9b      	ldrb	r3, [r3, #18]
 8005574:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005576:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800557c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005582:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	7f1b      	ldrb	r3, [r3, #28]
 8005588:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800558a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	7f5b      	ldrb	r3, [r3, #29]
 8005590:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005592:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	7f92      	ldrb	r2, [r2, #30]
 8005598:	2a00      	cmp	r2, #0
 800559a:	d102      	bne.n	80055a2 <ETH_SetMACConfig+0x92>
 800559c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055a0:	e000      	b.n	80055a4 <ETH_SetMACConfig+0x94>
 80055a2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80055a4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	7fdb      	ldrb	r3, [r3, #31]
 80055aa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80055ac:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80055b4:	2a00      	cmp	r2, #0
 80055b6:	d102      	bne.n	80055be <ETH_SetMACConfig+0xae>
 80055b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055bc:	e000      	b.n	80055c0 <ETH_SetMACConfig+0xb0>
 80055be:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80055c0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80055c6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ce:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80055d0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4b56      	ldr	r3, [pc, #344]	; (800573c <ETH_SetMACConfig+0x22c>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80055fc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005604:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005606:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800560e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005610:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005618:	2a00      	cmp	r2, #0
 800561a:	d102      	bne.n	8005622 <ETH_SetMACConfig+0x112>
 800561c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005620:	e000      	b.n	8005624 <ETH_SetMACConfig+0x114>
 8005622:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005624:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4b42      	ldr	r3, [pc, #264]	; (8005740 <ETH_SetMACConfig+0x230>)
 8005636:	4013      	ands	r3, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	430b      	orrs	r3, r1
 8005640:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005648:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68da      	ldr	r2, [r3, #12]
 8005658:	4b3a      	ldr	r3, [pc, #232]	; (8005744 <ETH_SetMACConfig+0x234>)
 800565a:	4013      	ands	r3, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	430b      	orrs	r3, r1
 8005664:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800566c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005672:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800567a:	2a00      	cmp	r2, #0
 800567c:	d101      	bne.n	8005682 <ETH_SetMACConfig+0x172>
 800567e:	2280      	movs	r2, #128	; 0x80
 8005680:	e000      	b.n	8005684 <ETH_SetMACConfig+0x174>
 8005682:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005684:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800568a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005696:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800569a:	4013      	ands	r3, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	430b      	orrs	r3, r1
 80056a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80056ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80056b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f023 0103 	bic.w	r1, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80056da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80056f6:	2a00      	cmp	r2, #0
 80056f8:	d101      	bne.n	80056fe <ETH_SetMACConfig+0x1ee>
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	e000      	b.n	8005700 <ETH_SetMACConfig+0x1f0>
 80056fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005700:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005708:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800570a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005712:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005720:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	430a      	orrs	r2, r1
 800572c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	00048083 	.word	0x00048083
 8005740:	c0f88000 	.word	0xc0f88000
 8005744:	fffffef0 	.word	0xfffffef0

08005748 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b38      	ldr	r3, [pc, #224]	; (8005840 <ETH_SetDMAConfig+0xf8>)
 800575e:	4013      	ands	r3, r2
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	6812      	ldr	r2, [r2, #0]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	6809      	ldr	r1, [r1, #0]
 8005768:	431a      	orrs	r2, r3
 800576a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800576e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	791b      	ldrb	r3, [r3, #4]
 8005774:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800577a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	7b1b      	ldrb	r3, [r3, #12]
 8005780:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	f241 0304 	movw	r3, #4100	; 0x1004
 800578e:	4413      	add	r3, r2
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <ETH_SetDMAConfig+0xfc>)
 8005794:	4013      	ands	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6811      	ldr	r1, [r2, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	431a      	orrs	r2, r3
 800579e:	f241 0304 	movw	r3, #4100	; 0x1004
 80057a2:	440b      	add	r3, r1
 80057a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	7b5b      	ldrb	r3, [r3, #13]
 80057aa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b22      	ldr	r3, [pc, #136]	; (8005848 <ETH_SetDMAConfig+0x100>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6811      	ldr	r1, [r2, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80057ce:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	7d1b      	ldrb	r3, [r3, #20]
 80057d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80057da:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	7f5b      	ldrb	r3, [r3, #29]
 80057e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80057ee:	4413      	add	r3, r2
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b16      	ldr	r3, [pc, #88]	; (800584c <ETH_SetDMAConfig+0x104>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6811      	ldr	r1, [r2, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	431a      	orrs	r2, r3
 80057fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8005802:	440b      	add	r3, r1
 8005804:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	7f1b      	ldrb	r3, [r3, #28]
 800580a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005810:	4313      	orrs	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	f241 1308 	movw	r3, #4360	; 0x1108
 800581c:	4413      	add	r3, r2
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <ETH_SetDMAConfig+0x108>)
 8005822:	4013      	ands	r3, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6811      	ldr	r1, [r2, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	431a      	orrs	r2, r3
 800582c:	f241 1308 	movw	r3, #4360	; 0x1108
 8005830:	440b      	add	r3, r1
 8005832:	601a      	str	r2, [r3, #0]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	ffff87fd 	.word	0xffff87fd
 8005844:	ffff2ffe 	.word	0xffff2ffe
 8005848:	fffec000 	.word	0xfffec000
 800584c:	ffc0efef 	.word	0xffc0efef
 8005850:	7fc0ffff 	.word	0x7fc0ffff

08005854 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b0a4      	sub	sp, #144	; 0x90
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005862:	2300      	movs	r3, #0
 8005864:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005866:	2300      	movs	r3, #0
 8005868:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800587e:	2301      	movs	r3, #1
 8005880:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005884:	2300      	movs	r3, #0
 8005886:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005894:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005896:	2300      	movs	r3, #0
 8005898:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800589c:	2300      	movs	r3, #0
 800589e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80058ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80058b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80058b8:	2300      	movs	r3, #0
 80058ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80058ce:	2300      	movs	r3, #0
 80058d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80058d6:	2300      	movs	r3, #0
 80058d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80058da:	2300      	movs	r3, #0
 80058dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80058ec:	2320      	movs	r3, #32
 80058ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80058fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005908:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800590a:	2300      	movs	r3, #0
 800590c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005910:	2302      	movs	r3, #2
 8005912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005916:	2300      	movs	r3, #0
 8005918:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005922:	2300      	movs	r3, #0
 8005924:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800592e:	2300      	movs	r3, #0
 8005930:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fde6 	bl	8005510 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005944:	2301      	movs	r3, #1
 8005946:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005948:	2301      	movs	r3, #1
 800594a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005956:	2300      	movs	r3, #0
 8005958:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800595a:	2300      	movs	r3, #0
 800595c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800595e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005962:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005964:	2300      	movs	r3, #0
 8005966:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800596c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005974:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800597a:	f107 0308 	add.w	r3, r7, #8
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fee1 	bl	8005748 <ETH_SetDMAConfig>
}
 8005986:	bf00      	nop
 8005988:	3790      	adds	r7, #144	; 0x90
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80059aa:	f002 fc5f 	bl	800826c <HAL_RCC_GetHCLKFreq>
 80059ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d908      	bls.n	80059ca <ETH_MAC_MDIO_ClkConfig+0x3a>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d804      	bhi.n	80059ca <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e027      	b.n	8005a1a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4a18      	ldr	r2, [pc, #96]	; (8005a30 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d908      	bls.n	80059e4 <ETH_MAC_MDIO_ClkConfig+0x54>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d204      	bcs.n	80059e4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e01a      	b.n	8005a1a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d303      	bcc.n	80059f4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d911      	bls.n	8005a18 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d908      	bls.n	8005a0e <ETH_MAC_MDIO_ClkConfig+0x7e>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d804      	bhi.n	8005a0e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e005      	b.n	8005a1a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e000      	b.n	8005a1a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005a18:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	01312cff 	.word	0x01312cff
 8005a30:	02160ebf 	.word	0x02160ebf
 8005a34:	03938700 	.word	0x03938700
 8005a38:	05f5e0ff 	.word	0x05f5e0ff
 8005a3c:	08f0d17f 	.word	0x08f0d17f

08005a40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	e01d      	b.n	8005a8a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68d9      	ldr	r1, [r3, #12]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4613      	mov	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	3206      	adds	r2, #6
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d9de      	bls.n	8005a4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	f241 132c 	movw	r3, #4396	; 0x112c
 8005a9e:	4413      	add	r3, r2
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68d9      	ldr	r1, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	f241 1314 	movw	r3, #4372	; 0x1114
 8005ab0:	4413      	add	r3, r2
 8005ab2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e024      	b.n	8005b26 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6919      	ldr	r1, [r3, #16]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	440b      	add	r3, r1
 8005aec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2200      	movs	r2, #0
 8005b04:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3310      	adds	r3, #16
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d9d7      	bls.n	8005adc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	f241 1330 	movw	r3, #4400	; 0x1130
 8005b52:	4413      	add	r3, r2
 8005b54:	2203      	movs	r2, #3
 8005b56:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6919      	ldr	r1, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	f241 131c 	movw	r3, #4380	; 0x111c
 8005b64:	4413      	add	r3, r2
 8005b66:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	f241 1328 	movw	r3, #4392	; 0x1128
 8005b78:	4413      	add	r3, r2
 8005b7a:	6019      	str	r1, [r3, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b089      	sub	sp, #36	; 0x24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b96:	4b89      	ldr	r3, [pc, #548]	; (8005dbc <HAL_GPIO_Init+0x234>)
 8005b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b9a:	e194      	b.n	8005ec6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba8:	4013      	ands	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 8186 	beq.w	8005ec0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d005      	beq.n	8005bcc <HAL_GPIO_Init+0x44>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d130      	bne.n	8005c2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	4013      	ands	r3, r2
 8005be2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c02:	2201      	movs	r2, #1
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	f003 0201 	and.w	r2, r3, #1
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f003 0303 	and.w	r3, r3, #3
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d017      	beq.n	8005c6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	2203      	movs	r2, #3
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43db      	mvns	r3, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d123      	bne.n	8005cbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	08da      	lsrs	r2, r3, #3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3208      	adds	r2, #8
 8005c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	220f      	movs	r2, #15
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43db      	mvns	r3, r3
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4013      	ands	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	08da      	lsrs	r2, r3, #3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3208      	adds	r2, #8
 8005cb8:	69b9      	ldr	r1, [r7, #24]
 8005cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	2203      	movs	r2, #3
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 0203 	and.w	r2, r3, #3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f000 80e0 	beq.w	8005ec0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d00:	4b2f      	ldr	r3, [pc, #188]	; (8005dc0 <HAL_GPIO_Init+0x238>)
 8005d02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d06:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <HAL_GPIO_Init+0x238>)
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <HAL_GPIO_Init+0x238>)
 8005d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d1e:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <HAL_GPIO_Init+0x23c>)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	089b      	lsrs	r3, r3, #2
 8005d24:	3302      	adds	r3, #2
 8005d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	220f      	movs	r2, #15
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a20      	ldr	r2, [pc, #128]	; (8005dc8 <HAL_GPIO_Init+0x240>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d052      	beq.n	8005df0 <HAL_GPIO_Init+0x268>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1f      	ldr	r2, [pc, #124]	; (8005dcc <HAL_GPIO_Init+0x244>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d031      	beq.n	8005db6 <HAL_GPIO_Init+0x22e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a1e      	ldr	r2, [pc, #120]	; (8005dd0 <HAL_GPIO_Init+0x248>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d02b      	beq.n	8005db2 <HAL_GPIO_Init+0x22a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1d      	ldr	r2, [pc, #116]	; (8005dd4 <HAL_GPIO_Init+0x24c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d025      	beq.n	8005dae <HAL_GPIO_Init+0x226>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <HAL_GPIO_Init+0x250>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01f      	beq.n	8005daa <HAL_GPIO_Init+0x222>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_GPIO_Init+0x254>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d019      	beq.n	8005da6 <HAL_GPIO_Init+0x21e>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <HAL_GPIO_Init+0x258>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <HAL_GPIO_Init+0x21a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a19      	ldr	r2, [pc, #100]	; (8005de4 <HAL_GPIO_Init+0x25c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00d      	beq.n	8005d9e <HAL_GPIO_Init+0x216>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <HAL_GPIO_Init+0x260>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <HAL_GPIO_Init+0x212>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a17      	ldr	r2, [pc, #92]	; (8005dec <HAL_GPIO_Init+0x264>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d101      	bne.n	8005d96 <HAL_GPIO_Init+0x20e>
 8005d92:	2309      	movs	r3, #9
 8005d94:	e02d      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005d96:	230a      	movs	r3, #10
 8005d98:	e02b      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005d9a:	2308      	movs	r3, #8
 8005d9c:	e029      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005d9e:	2307      	movs	r3, #7
 8005da0:	e027      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005da2:	2306      	movs	r3, #6
 8005da4:	e025      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005da6:	2305      	movs	r3, #5
 8005da8:	e023      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005daa:	2304      	movs	r3, #4
 8005dac:	e021      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005dae:	2303      	movs	r3, #3
 8005db0:	e01f      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e01d      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e01b      	b.n	8005df2 <HAL_GPIO_Init+0x26a>
 8005dba:	bf00      	nop
 8005dbc:	58000080 	.word	0x58000080
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	58000400 	.word	0x58000400
 8005dc8:	58020000 	.word	0x58020000
 8005dcc:	58020400 	.word	0x58020400
 8005dd0:	58020800 	.word	0x58020800
 8005dd4:	58020c00 	.word	0x58020c00
 8005dd8:	58021000 	.word	0x58021000
 8005ddc:	58021400 	.word	0x58021400
 8005de0:	58021800 	.word	0x58021800
 8005de4:	58021c00 	.word	0x58021c00
 8005de8:	58022000 	.word	0x58022000
 8005dec:	58022400 	.word	0x58022400
 8005df0:	2300      	movs	r3, #0
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	f002 0203 	and.w	r2, r2, #3
 8005df8:	0092      	lsls	r2, r2, #2
 8005dfa:	4093      	lsls	r3, r2
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e02:	4938      	ldr	r1, [pc, #224]	; (8005ee4 <HAL_GPIO_Init+0x35c>)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	089b      	lsrs	r3, r3, #2
 8005e08:	3302      	adds	r3, #2
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	43db      	mvns	r3, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f47f ae63 	bne.w	8005b9c <HAL_GPIO_Init+0x14>
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	3724      	adds	r7, #36	; 0x24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	58000400 	.word	0x58000400

08005ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ef8:	787b      	ldrb	r3, [r7, #1]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005efe:	887a      	ldrh	r2, [r7, #2]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f04:	e003      	b.n	8005f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f06:	887b      	ldrh	r3, [r7, #2]
 8005f08:	041a      	lsls	r2, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	619a      	str	r2, [r3, #24]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f2c:	887a      	ldrh	r2, [r7, #2]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	041a      	lsls	r2, r3, #16
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	43d9      	mvns	r1, r3
 8005f38:	887b      	ldrh	r3, [r7, #2]
 8005f3a:	400b      	ands	r3, r1
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	619a      	str	r2, [r3, #24]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005f60:	88fb      	ldrh	r3, [r7, #6]
 8005f62:	4013      	ands	r3, r2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d008      	beq.n	8005f7a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6c:	88fb      	ldrh	r3, [r7, #6]
 8005f6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fa fd61 	bl	8000a3c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f84:	b08f      	sub	sp, #60	; 0x3c
 8005f86:	af0a      	add	r7, sp, #40	; 0x28
 8005f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e116      	b.n	80061c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f008 f9a4 	bl	800e2fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f005 f801 	bl	800afda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	687e      	ldr	r6, [r7, #4]
 8005fe0:	466d      	mov	r5, sp
 8005fe2:	f106 0410 	add.w	r4, r6, #16
 8005fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ff2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ff6:	1d33      	adds	r3, r6, #4
 8005ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ffa:	6838      	ldr	r0, [r7, #0]
 8005ffc:	f004 fecc 	bl	800ad98 <USB_CoreInit>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e0d7      	b.n	80061c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2100      	movs	r1, #0
 8006018:	4618      	mov	r0, r3
 800601a:	f004 ffef 	bl	800affc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
 8006022:	e04a      	b.n	80060ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	1a9b      	subs	r3, r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	333d      	adds	r3, #61	; 0x3d
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006038:	7bfa      	ldrb	r2, [r7, #15]
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	333c      	adds	r3, #60	; 0x3c
 8006048:	7bfa      	ldrb	r2, [r7, #15]
 800604a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800604c:	7bfa      	ldrb	r2, [r7, #15]
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	b298      	uxth	r0, r3
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3342      	adds	r3, #66	; 0x42
 8006060:	4602      	mov	r2, r0
 8006062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006064:	7bfa      	ldrb	r2, [r7, #15]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	333f      	adds	r3, #63	; 0x3f
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006078:	7bfa      	ldrb	r2, [r7, #15]
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	3344      	adds	r3, #68	; 0x44
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	3348      	adds	r3, #72	; 0x48
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060a0:	7bfa      	ldrb	r2, [r7, #15]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	1a9b      	subs	r3, r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	3350      	adds	r3, #80	; 0x50
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	3301      	adds	r3, #1
 80060b8:	73fb      	strb	r3, [r7, #15]
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d3af      	bcc.n	8006024 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060c4:	2300      	movs	r3, #0
 80060c6:	73fb      	strb	r3, [r7, #15]
 80060c8:	e044      	b.n	8006154 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80060ca:	7bfa      	ldrb	r2, [r7, #15]
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80060e0:	7bfa      	ldrb	r2, [r7, #15]
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	1a9b      	subs	r3, r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80060f6:	7bfa      	ldrb	r2, [r7, #15]
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800610c:	7bfa      	ldrb	r2, [r7, #15]
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	1a9b      	subs	r3, r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006122:	7bfa      	ldrb	r2, [r7, #15]
 8006124:	6879      	ldr	r1, [r7, #4]
 8006126:	4613      	mov	r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	3301      	adds	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	429a      	cmp	r2, r3
 800615c:	d3b5      	bcc.n	80060ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	687e      	ldr	r6, [r7, #4]
 8006166:	466d      	mov	r5, sp
 8006168:	f106 0410 	add.w	r4, r6, #16
 800616c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800616e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006174:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006178:	e885 0003 	stmia.w	r5, {r0, r1}
 800617c:	1d33      	adds	r3, r6, #4
 800617e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006180:	6838      	ldr	r0, [r7, #0]
 8006182:	f004 ff87 	bl	800b094 <USB_DevInit>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e014      	b.n	80061c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d102      	bne.n	80061b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 f885 	bl	80072c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f006 f81f 	bl	800c1fe <USB_DevDisconnect>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_PCD_Start+0x1c>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e020      	b.n	8006228 <HAL_PCD_Start+0x5e>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d109      	bne.n	800620a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d005      	beq.n	800620a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f004 fed2 	bl	800afb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4618      	mov	r0, r3
 800621a:	f005 ffcf 	bl	800c1bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006230:	b590      	push	{r4, r7, lr}
 8006232:	b08d      	sub	sp, #52	; 0x34
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f006 f88d 	bl	800c366 <USB_GetMode>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	f040 83be 	bne.w	80069d0 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f005 fff1 	bl	800c240 <USB_ReadInterrupts>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 83b4 	beq.w	80069ce <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f005 ffe8 	bl	800c240 <USB_ReadInterrupts>
 8006270:	4603      	mov	r3, r0
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d107      	bne.n	800628a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f002 0202 	and.w	r2, r2, #2
 8006288:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f005 ffd6 	bl	800c240 <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b10      	cmp	r3, #16
 800629c:	d161      	bne.n	8006362 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699a      	ldr	r2, [r3, #24]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0210 	bic.w	r2, r2, #16
 80062ac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f003 020f 	and.w	r2, r3, #15
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4413      	add	r3, r2
 80062ca:	3304      	adds	r3, #4
 80062cc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	0c5b      	lsrs	r3, r3, #17
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d124      	bne.n	8006324 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d035      	beq.n	8006352 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80062f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	6a38      	ldr	r0, [r7, #32]
 80062fa:	f005 fe0d 	bl	800bf18 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630a:	441a      	add	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631c:	441a      	add	r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	619a      	str	r2, [r3, #24]
 8006322:	e016      	b.n	8006352 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	0c5b      	lsrs	r3, r3, #17
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	2b06      	cmp	r3, #6
 800632e:	d110      	bne.n	8006352 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006336:	2208      	movs	r2, #8
 8006338:	4619      	mov	r1, r3
 800633a:	6a38      	ldr	r0, [r7, #32]
 800633c:	f005 fdec 	bl	800bf18 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	091b      	lsrs	r3, r3, #4
 8006348:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800634c:	441a      	add	r2, r3
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0210 	orr.w	r2, r2, #16
 8006360:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f005 ff6a 	bl	800c240 <USB_ReadInterrupts>
 800636c:	4603      	mov	r3, r0
 800636e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006372:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006376:	d16e      	bne.n	8006456 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f005 ff70 	bl	800c266 <USB_ReadDevAllOutEpInterrupt>
 8006386:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006388:	e062      	b.n	8006450 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d057      	beq.n	8006444 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f005 ff95 	bl	800c2ce <USB_ReadDevOutEPInterrupt>
 80063a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	461a      	mov	r2, r3
 80063be:	2301      	movs	r3, #1
 80063c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80063c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 fdd1 	bl	8006f6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00c      	beq.n	80063ee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e0:	461a      	mov	r2, r3
 80063e2:	2308      	movs	r3, #8
 80063e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80063e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fecb 	bl	8007184 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	2310      	movs	r3, #16
 8006408:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	461a      	mov	r2, r3
 8006422:	2320      	movs	r3, #32
 8006424:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006442:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	3301      	adds	r3, #1
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	085b      	lsrs	r3, r3, #1
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	2b00      	cmp	r3, #0
 8006454:	d199      	bne.n	800638a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f005 fef0 	bl	800c240 <USB_ReadInterrupts>
 8006460:	4603      	mov	r3, r0
 8006462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006466:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800646a:	f040 80c4 	bne.w	80065f6 <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f005 ff11 	bl	800c29a <USB_ReadDevAllInEpInterrupt>
 8006478:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800647e:	e0b6      	b.n	80065ee <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80ab 	beq.w	80065e2 <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f005 ff37 	bl	800c30a <USB_ReadDevInEPInterrupt>
 800649c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d057      	beq.n	8006558 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	2201      	movs	r2, #1
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	43db      	mvns	r3, r3
 80064c2:	69f9      	ldr	r1, [r7, #28]
 80064c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c8:	4013      	ands	r3, r2
 80064ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	461a      	mov	r2, r3
 80064da:	2301      	movs	r3, #1
 80064dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d132      	bne.n	800654c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ea:	4613      	mov	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	3348      	adds	r3, #72	; 0x48
 80064f6:	6819      	ldr	r1, [r3, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fc:	4613      	mov	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	1a9b      	subs	r3, r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4403      	add	r3, r0
 8006506:	3344      	adds	r3, #68	; 0x44
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4419      	add	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4403      	add	r3, r0
 800651a:	3348      	adds	r3, #72	; 0x48
 800651c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	d113      	bne.n	800654c <HAL_PCD_IRQHandler+0x31c>
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006528:	4613      	mov	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	3350      	adds	r3, #80	; 0x50
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d108      	bne.n	800654c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006544:	461a      	mov	r2, r3
 8006546:	2101      	movs	r1, #1
 8006548:	f005 ff40 	bl	800c3cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f007 ff71 	bl	800e43a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656e:	461a      	mov	r2, r3
 8006570:	2308      	movs	r3, #8
 8006572:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	2b00      	cmp	r3, #0
 800657c:	d008      	beq.n	8006590 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	461a      	mov	r2, r3
 800658c:	2310      	movs	r3, #16
 800658e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d008      	beq.n	80065ac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a6:	461a      	mov	r2, r3
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80065b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065b8:	6a38      	ldr	r0, [r7, #32]
 80065ba:	f004 fec9 	bl	800b350 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ca:	461a      	mov	r2, r3
 80065cc:	2302      	movs	r3, #2
 80065ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80065da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fc38 	bl	8006e52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	3301      	adds	r3, #1
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f47f af45 	bne.w	8006480 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f005 fe20 	bl	800c240 <USB_ReadInterrupts>
 8006600:	4603      	mov	r3, r0
 8006602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800660a:	d122      	bne.n	8006652 <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800661a:	f023 0301 	bic.w	r3, r3, #1
 800661e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006626:	2b01      	cmp	r3, #1
 8006628:	d108      	bne.n	800663c <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006632:	2100      	movs	r1, #0
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fe67 	bl	8007308 <HAL_PCDEx_LPM_Callback>
 800663a:	e002      	b.n	8006642 <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f007 ff73 	bl	800e528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f005 fdf2 	bl	800c240 <USB_ReadInterrupts>
 800665c:	4603      	mov	r3, r0
 800665e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006666:	d112      	bne.n	800668e <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f007 ff2f 	bl	800e4dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695a      	ldr	r2, [r3, #20]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800668c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f005 fdd4 	bl	800c240 <USB_ReadInterrupts>
 8006698:	4603      	mov	r3, r0
 800669a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800669e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a2:	d121      	bne.n	80066e8 <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80066b2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d111      	bne.n	80066e2 <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066cc:	089b      	lsrs	r3, r3, #2
 80066ce:	f003 020f 	and.w	r2, r3, #15
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80066d8:	2101      	movs	r1, #1
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fe14 	bl	8007308 <HAL_PCDEx_LPM_Callback>
 80066e0:	e002      	b.n	80066e8 <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f007 fefa 	bl	800e4dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f005 fda7 	bl	800c240 <USB_ReadInterrupts>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fc:	f040 80b7 	bne.w	800686e <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2110      	movs	r1, #16
 800671a:	4618      	mov	r0, r3
 800671c:	f004 fe18 	bl	800b350 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006720:	2300      	movs	r3, #0
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006724:	e046      	b.n	80067b4 <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	461a      	mov	r2, r3
 8006734:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006738:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006754:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006758:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	461a      	mov	r2, r3
 8006768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800676c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800676e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006788:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800678c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b0:	3301      	adds	r3, #1
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3b3      	bcc.n	8006726 <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80067d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d016      	beq.n	8006808 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e4:	69fa      	ldr	r2, [r7, #28]
 80067e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ea:	f043 030b 	orr.w	r3, r3, #11
 80067ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006800:	f043 030b 	orr.w	r3, r3, #11
 8006804:	6453      	str	r3, [r2, #68]	; 0x44
 8006806:	e015      	b.n	8006834 <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	4619      	mov	r1, r3
 8006818:	f242 032b 	movw	r3, #8235	; 0x202b
 800681c:	4313      	orrs	r3, r2
 800681e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800682e:	f043 030b 	orr.w	r3, r3, #11
 8006832:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006842:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006846:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006858:	461a      	mov	r2, r3
 800685a:	f005 fdb7 	bl	800c3cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695a      	ldr	r2, [r3, #20]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800686c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f005 fce4 	bl	800c240 <USB_ReadInterrupts>
 8006878:	4603      	mov	r3, r0
 800687a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006882:	d124      	bne.n	80068ce <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f005 fd7b 	bl	800c384 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f004 fdd5 	bl	800b442 <USB_GetDevSpeed>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681c      	ldr	r4, [r3, #0]
 80068a4:	f001 fce2 	bl	800826c <HAL_RCC_GetHCLKFreq>
 80068a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	4620      	mov	r0, r4
 80068b4:	f004 fade 	bl	800ae74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f007 fde6 	bl	800e48a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80068cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f005 fcb4 	bl	800c240 <USB_ReadInterrupts>
 80068d8:	4603      	mov	r3, r0
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d10a      	bne.n	80068f8 <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f007 fdc3 	bl	800e46e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f002 0208 	and.w	r2, r2, #8
 80068f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f005 fc9f 	bl	800c240 <USB_ReadInterrupts>
 8006902:	4603      	mov	r3, r0
 8006904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800690c:	d10f      	bne.n	800692e <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	b2db      	uxtb	r3, r3
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f007 fe25 	bl	800e568 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695a      	ldr	r2, [r3, #20]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800692c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f005 fc84 	bl	800c240 <USB_ReadInterrupts>
 8006938:	4603      	mov	r3, r0
 800693a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800693e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006942:	d10f      	bne.n	8006964 <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f007 fdf8 	bl	800e544 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695a      	ldr	r2, [r3, #20]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f005 fc69 	bl	800c240 <USB_ReadInterrupts>
 800696e:	4603      	mov	r3, r0
 8006970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d10a      	bne.n	8006990 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f007 fe06 	bl	800e58c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695a      	ldr	r2, [r3, #20]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800698e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	f005 fc53 	bl	800c240 <USB_ReadInterrupts>
 800699a:	4603      	mov	r3, r0
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d115      	bne.n	80069d0 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f007 fdf6 	bl	800e5a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6859      	ldr	r1, [r3, #4]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
 80069cc:	e000      	b.n	80069d0 <HAL_PCD_IRQHandler+0x7a0>
      return;
 80069ce:	bf00      	nop
    }
  }
}
 80069d0:	3734      	adds	r7, #52	; 0x34
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd90      	pop	{r4, r7, pc}

080069d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_PCD_SetAddress+0x1a>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e013      	b.n	8006a18 <HAL_PCD_SetAddress+0x42>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	78fa      	ldrb	r2, [r7, #3]
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f005 fbb1 	bl	800c170 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	4608      	mov	r0, r1
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	70fb      	strb	r3, [r7, #3]
 8006a32:	460b      	mov	r3, r1
 8006a34:	803b      	strh	r3, [r7, #0]
 8006a36:	4613      	mov	r3, r2
 8006a38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da0f      	bge.n	8006a66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	1a9b      	subs	r3, r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	3338      	adds	r3, #56	; 0x38
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	4413      	add	r3, r2
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	705a      	strb	r2, [r3, #1]
 8006a64:	e00f      	b.n	8006a86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	f003 020f 	and.w	r2, r3, #15
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006a92:	883a      	ldrh	r2, [r7, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	78ba      	ldrb	r2, [r7, #2]
 8006a9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d004      	beq.n	8006ab0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006ab0:	78bb      	ldrb	r3, [r7, #2]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d102      	bne.n	8006abc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_PCD_EP_Open+0xaa>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e00e      	b.n	8006ae8 <HAL_PCD_EP_Open+0xc8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f004 fcd7 	bl	800b48c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da0f      	bge.n	8006b24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	f003 020f 	and.w	r2, r3, #15
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	3338      	adds	r3, #56	; 0x38
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	3304      	adds	r3, #4
 8006b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	705a      	strb	r2, [r3, #1]
 8006b22:	e00f      	b.n	8006b44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_PCD_EP_Close+0x6e>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e00e      	b.n	8006b7c <HAL_PCD_EP_Close+0x8c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f004 fd15 	bl	800b59c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	460b      	mov	r3, r1
 8006b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	f003 020f 	and.w	r2, r3, #15
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	3304      	adds	r3, #4
 8006bac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d102      	bne.n	8006be0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	6979      	ldr	r1, [r7, #20]
 8006bf8:	f004 fff8 	bl	800bbec <USB_EP0StartXfer>
 8006bfc:	e008      	b.n	8006c10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6979      	ldr	r1, [r7, #20]
 8006c0c:	f004 fda2 	bl	800b754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	1a9b      	subs	r3, r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006c3c:	681b      	ldr	r3, [r3, #0]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b086      	sub	sp, #24
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	460b      	mov	r3, r1
 8006c58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c5a:	7afb      	ldrb	r3, [r7, #11]
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	4613      	mov	r3, r2
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	3338      	adds	r3, #56	; 0x38
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3304      	adds	r3, #4
 8006c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2200      	movs	r2, #0
 8006c82:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2201      	movs	r2, #1
 8006c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d102      	bne.n	8006ca4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6818      	ldr	r0, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6979      	ldr	r1, [r7, #20]
 8006cbc:	f004 ff96 	bl	800bbec <USB_EP0StartXfer>
 8006cc0:	e008      	b.n	8006cd4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6979      	ldr	r1, [r7, #20]
 8006cd0:	f004 fd40 	bl	800b754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d901      	bls.n	8006cfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e050      	b.n	8006d9e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da0f      	bge.n	8006d24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	f003 020f 	and.w	r2, r3, #15
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	3338      	adds	r3, #56	; 0x38
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	4413      	add	r3, r2
 8006d18:	3304      	adds	r3, #4
 8006d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	705a      	strb	r2, [r3, #1]
 8006d22:	e00d      	b.n	8006d40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	4613      	mov	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	1a9b      	subs	r3, r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	4413      	add	r3, r2
 8006d36:	3304      	adds	r3, #4
 8006d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_PCD_EP_SetStall+0x82>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e01e      	b.n	8006d9e <HAL_PCD_EP_SetStall+0xc0>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68f9      	ldr	r1, [r7, #12]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f005 f92a 	bl	800bfc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10a      	bne.n	8006d94 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	b2d9      	uxtb	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f005 fb1c 	bl	800c3cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	f003 020f 	and.w	r2, r3, #15
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d901      	bls.n	8006dc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e042      	b.n	8006e4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da0f      	bge.n	8006dec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	f003 020f 	and.w	r2, r3, #15
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	3338      	adds	r3, #56	; 0x38
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	4413      	add	r3, r2
 8006de0:	3304      	adds	r3, #4
 8006de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	705a      	strb	r2, [r3, #1]
 8006dea:	e00f      	b.n	8006e0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	f003 020f 	and.w	r2, r3, #15
 8006df2:	4613      	mov	r3, r2
 8006df4:	00db      	lsls	r3, r3, #3
 8006df6:	1a9b      	subs	r3, r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	4413      	add	r3, r2
 8006e02:	3304      	adds	r3, #4
 8006e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e12:	78fb      	ldrb	r3, [r7, #3]
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_PCD_EP_ClrStall+0x86>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e00e      	b.n	8006e4a <HAL_PCD_EP_ClrStall+0xa4>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68f9      	ldr	r1, [r7, #12]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f005 f932 	bl	800c0a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b08a      	sub	sp, #40	; 0x28
 8006e56:	af02      	add	r7, sp, #8
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	3338      	adds	r3, #56	; 0x38
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	4413      	add	r3, r2
 8006e76:	3304      	adds	r3, #4
 8006e78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d901      	bls.n	8006e8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e06c      	b.n	8006f64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d902      	bls.n	8006ea6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	3303      	adds	r3, #3
 8006eaa:	089b      	lsrs	r3, r3, #2
 8006eac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eae:	e02b      	b.n	8006f08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d902      	bls.n	8006ecc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	3303      	adds	r3, #3
 8006ed0:	089b      	lsrs	r3, r3, #2
 8006ed2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68d9      	ldr	r1, [r3, #12]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	4603      	mov	r3, r0
 8006eea:	6978      	ldr	r0, [r7, #20]
 8006eec:	f004 ffd6 	bl	800be9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	441a      	add	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	699a      	ldr	r2, [r3, #24]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	441a      	add	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d809      	bhi.n	8006f32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d203      	bcs.n	8006f32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1be      	bne.n	8006eb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	695a      	ldr	r2, [r3, #20]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d811      	bhi.n	8006f62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	2201      	movs	r2, #1
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	43db      	mvns	r3, r3
 8006f58:	6939      	ldr	r1, [r7, #16]
 8006f5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f5e:	4013      	ands	r3, r2
 8006f60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	333c      	adds	r3, #60	; 0x3c
 8006f84:	3304      	adds	r3, #4
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	f040 80a0 	bne.w	80070e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d015      	beq.n	8006fda <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	4a72      	ldr	r2, [pc, #456]	; (800717c <PCD_EP_OutXfrComplete_int+0x210>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	f240 80dd 	bls.w	8007172 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80d7 	beq.w	8007172 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd6:	6093      	str	r3, [r2, #8]
 8006fd8:	e0cb      	b.n	8007172 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2320      	movs	r3, #32
 8006ff4:	6093      	str	r3, [r2, #8]
 8006ff6:	e0bc      	b.n	8007172 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 80b7 	bne.w	8007172 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4a5d      	ldr	r2, [pc, #372]	; (800717c <PCD_EP_OutXfrComplete_int+0x210>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d90f      	bls.n	800702c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	461a      	mov	r2, r3
 8007024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007028:	6093      	str	r3, [r2, #8]
 800702a:	e0a2      	b.n	8007172 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	440b      	add	r3, r1
 800703a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800703e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	0159      	lsls	r1, r3, #5
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	440b      	add	r3, r1
 8007048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007052:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4403      	add	r3, r0
 8007062:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007066:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800707a:	6819      	ldr	r1, [r3, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4403      	add	r3, r0
 800708a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4419      	add	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4403      	add	r3, r0
 80070a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d114      	bne.n	80070d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d108      	bne.n	80070d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070ce:	461a      	mov	r2, r3
 80070d0:	2101      	movs	r1, #1
 80070d2:	f005 f97b 	bl	800c3cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f007 f991 	bl	800e404 <HAL_PCD_DataOutStageCallback>
 80070e2:	e046      	b.n	8007172 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	4a26      	ldr	r2, [pc, #152]	; (8007180 <PCD_EP_OutXfrComplete_int+0x214>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d124      	bne.n	8007136 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	461a      	mov	r2, r3
 8007104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007108:	6093      	str	r3, [r2, #8]
 800710a:	e032      	b.n	8007172 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007122:	461a      	mov	r2, r3
 8007124:	2320      	movs	r3, #32
 8007126:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f007 f968 	bl	800e404 <HAL_PCD_DataOutStageCallback>
 8007134:	e01d      	b.n	8007172 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d114      	bne.n	8007166 <PCD_EP_OutXfrComplete_int+0x1fa>
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d108      	bne.n	8007166 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6818      	ldr	r0, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800715e:	461a      	mov	r2, r3
 8007160:	2100      	movs	r1, #0
 8007162:	f005 f933 	bl	800c3cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f007 f949 	bl	800e404 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3718      	adds	r7, #24
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	4f54300a 	.word	0x4f54300a
 8007180:	4f54310a 	.word	0x4f54310a

08007184 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	333c      	adds	r3, #60	; 0x3c
 800719c:	3304      	adds	r3, #4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a15      	ldr	r2, [pc, #84]	; (800720c <PCD_EP_OutSetupPacket_int+0x88>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d90e      	bls.n	80071d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	461a      	mov	r2, r3
 80071d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f007 f901 	bl	800e3e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4a0a      	ldr	r2, [pc, #40]	; (800720c <PCD_EP_OutSetupPacket_int+0x88>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d90c      	bls.n	8007200 <PCD_EP_OutSetupPacket_int+0x7c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d108      	bne.n	8007200 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071f8:	461a      	mov	r2, r3
 80071fa:	2101      	movs	r1, #1
 80071fc:	f005 f8e6 	bl	800c3cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	4f54300a 	.word	0x4f54300a

08007210 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
 800721c:	4613      	mov	r3, r2
 800721e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800722e:	883b      	ldrh	r3, [r7, #0]
 8007230:	0419      	lsls	r1, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	430a      	orrs	r2, r1
 800723a:	629a      	str	r2, [r3, #40]	; 0x28
 800723c:	e028      	b.n	8007290 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	0c1b      	lsrs	r3, r3, #16
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4413      	add	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]
 8007250:	e00d      	b.n	800726e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	3340      	adds	r3, #64	; 0x40
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	4413      	add	r3, r2
 8007266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	3301      	adds	r3, #1
 800726c:	73fb      	strb	r3, [r7, #15]
 800726e:	7bfa      	ldrb	r2, [r7, #15]
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	3b01      	subs	r3, #1
 8007274:	429a      	cmp	r2, r3
 8007276:	d3ec      	bcc.n	8007252 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007278:	883b      	ldrh	r3, [r7, #0]
 800727a:	0418      	lsls	r0, r3, #16
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	3b01      	subs	r3, #1
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	4302      	orrs	r2, r0
 8007288:	3340      	adds	r3, #64	; 0x40
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	887a      	ldrh	r2, [r7, #2]
 80072b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072ee:	4b05      	ldr	r3, [pc, #20]	; (8007304 <HAL_PCDEx_ActivateLPM+0x44>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	10000003 	.word	0x10000003

08007308 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007328:	4b19      	ldr	r3, [pc, #100]	; (8007390 <HAL_PWREx_ConfigSupply+0x70>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b04      	cmp	r3, #4
 8007332:	d00a      	beq.n	800734a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007334:	4b16      	ldr	r3, [pc, #88]	; (8007390 <HAL_PWREx_ConfigSupply+0x70>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	429a      	cmp	r2, r3
 8007340:	d001      	beq.n	8007346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e01f      	b.n	8007386 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e01d      	b.n	8007386 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800734a:	4b11      	ldr	r3, [pc, #68]	; (8007390 <HAL_PWREx_ConfigSupply+0x70>)
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f023 0207 	bic.w	r2, r3, #7
 8007352:	490f      	ldr	r1, [pc, #60]	; (8007390 <HAL_PWREx_ConfigSupply+0x70>)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4313      	orrs	r3, r2
 8007358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800735a:	f7f9 ff37 	bl	80011cc <HAL_GetTick>
 800735e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007360:	e009      	b.n	8007376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007362:	f7f9 ff33 	bl	80011cc <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007370:	d901      	bls.n	8007376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e007      	b.n	8007386 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007376:	4b06      	ldr	r3, [pc, #24]	; (8007390 <HAL_PWREx_ConfigSupply+0x70>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800737e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007382:	d1ee      	bne.n	8007362 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	58024800 	.word	0x58024800

08007394 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	4a04      	ldr	r2, [pc, #16]	; (80073b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800739e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073a2:	60d3      	str	r3, [r2, #12]
}
 80073a4:	bf00      	nop
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	58024800 	.word	0x58024800

080073b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08c      	sub	sp, #48	; 0x30
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f000 bc1c 	b.w	8007c00 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8087 	beq.w	80074e4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073d6:	4b9e      	ldr	r3, [pc, #632]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073e0:	4b9b      	ldr	r3, [pc, #620]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d007      	beq.n	80073fc <HAL_RCC_OscConfig+0x48>
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	2b18      	cmp	r3, #24
 80073f0:	d110      	bne.n	8007414 <HAL_RCC_OscConfig+0x60>
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d10b      	bne.n	8007414 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073fc:	4b94      	ldr	r3, [pc, #592]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d06c      	beq.n	80074e2 <HAL_RCC_OscConfig+0x12e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d168      	bne.n	80074e2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e3f5      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741c:	d106      	bne.n	800742c <HAL_RCC_OscConfig+0x78>
 800741e:	4b8c      	ldr	r3, [pc, #560]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a8b      	ldr	r2, [pc, #556]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	e02e      	b.n	800748a <HAL_RCC_OscConfig+0xd6>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10c      	bne.n	800744e <HAL_RCC_OscConfig+0x9a>
 8007434:	4b86      	ldr	r3, [pc, #536]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a85      	ldr	r2, [pc, #532]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800743a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	4b83      	ldr	r3, [pc, #524]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a82      	ldr	r2, [pc, #520]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	e01d      	b.n	800748a <HAL_RCC_OscConfig+0xd6>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007456:	d10c      	bne.n	8007472 <HAL_RCC_OscConfig+0xbe>
 8007458:	4b7d      	ldr	r3, [pc, #500]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a7c      	ldr	r2, [pc, #496]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800745e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	4b7a      	ldr	r3, [pc, #488]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a79      	ldr	r2, [pc, #484]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800746a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	e00b      	b.n	800748a <HAL_RCC_OscConfig+0xd6>
 8007472:	4b77      	ldr	r3, [pc, #476]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a76      	ldr	r2, [pc, #472]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	4b74      	ldr	r3, [pc, #464]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a73      	ldr	r2, [pc, #460]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d013      	beq.n	80074ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007492:	f7f9 fe9b 	bl	80011cc <HAL_GetTick>
 8007496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007498:	e008      	b.n	80074ac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800749a:	f7f9 fe97 	bl	80011cc <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b64      	cmp	r3, #100	; 0x64
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e3a9      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ac:	4b68      	ldr	r3, [pc, #416]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0f0      	beq.n	800749a <HAL_RCC_OscConfig+0xe6>
 80074b8:	e014      	b.n	80074e4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ba:	f7f9 fe87 	bl	80011cc <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074c2:	f7f9 fe83 	bl	80011cc <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b64      	cmp	r3, #100	; 0x64
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e395      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074d4:	4b5e      	ldr	r3, [pc, #376]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f0      	bne.n	80074c2 <HAL_RCC_OscConfig+0x10e>
 80074e0:	e000      	b.n	80074e4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 80ca 	beq.w	8007686 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074f2:	4b57      	ldr	r3, [pc, #348]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074fc:	4b54      	ldr	r3, [pc, #336]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d007      	beq.n	8007518 <HAL_RCC_OscConfig+0x164>
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b18      	cmp	r3, #24
 800750c:	d156      	bne.n	80075bc <HAL_RCC_OscConfig+0x208>
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d151      	bne.n	80075bc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007518:	4b4d      	ldr	r3, [pc, #308]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_RCC_OscConfig+0x17c>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e367      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007530:	4b47      	ldr	r3, [pc, #284]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f023 0219 	bic.w	r2, r3, #25
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4944      	ldr	r1, [pc, #272]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800753e:	4313      	orrs	r3, r2
 8007540:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007542:	f7f9 fe43 	bl	80011cc <HAL_GetTick>
 8007546:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800754a:	f7f9 fe3f 	bl	80011cc <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e351      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800755c:	4b3c      	ldr	r3, [pc, #240]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007568:	f7f9 fe60 	bl	800122c <HAL_GetREVID>
 800756c:	4603      	mov	r3, r0
 800756e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007572:	4293      	cmp	r3, r2
 8007574:	d817      	bhi.n	80075a6 <HAL_RCC_OscConfig+0x1f2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d108      	bne.n	8007590 <HAL_RCC_OscConfig+0x1dc>
 800757e:	4b34      	ldr	r3, [pc, #208]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007586:	4a32      	ldr	r2, [pc, #200]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800758c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800758e:	e07a      	b.n	8007686 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007590:	4b2f      	ldr	r3, [pc, #188]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	031b      	lsls	r3, r3, #12
 800759e:	492c      	ldr	r1, [pc, #176]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075a4:	e06f      	b.n	8007686 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075a6:	4b2a      	ldr	r3, [pc, #168]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	061b      	lsls	r3, r3, #24
 80075b4:	4926      	ldr	r1, [pc, #152]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075ba:	e064      	b.n	8007686 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d047      	beq.n	8007654 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075c4:	4b22      	ldr	r3, [pc, #136]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f023 0219 	bic.w	r2, r3, #25
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	491f      	ldr	r1, [pc, #124]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d6:	f7f9 fdf9 	bl	80011cc <HAL_GetTick>
 80075da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075dc:	e008      	b.n	80075f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075de:	f7f9 fdf5 	bl	80011cc <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e307      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075f0:	4b17      	ldr	r3, [pc, #92]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0f0      	beq.n	80075de <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075fc:	f7f9 fe16 	bl	800122c <HAL_GetREVID>
 8007600:	4603      	mov	r3, r0
 8007602:	f241 0203 	movw	r2, #4099	; 0x1003
 8007606:	4293      	cmp	r3, r2
 8007608:	d817      	bhi.n	800763a <HAL_RCC_OscConfig+0x286>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d108      	bne.n	8007624 <HAL_RCC_OscConfig+0x270>
 8007612:	4b0f      	ldr	r3, [pc, #60]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800761a:	4a0d      	ldr	r2, [pc, #52]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800761c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007620:	6053      	str	r3, [r2, #4]
 8007622:	e030      	b.n	8007686 <HAL_RCC_OscConfig+0x2d2>
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	031b      	lsls	r3, r3, #12
 8007632:	4907      	ldr	r1, [pc, #28]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 8007634:	4313      	orrs	r3, r2
 8007636:	604b      	str	r3, [r1, #4]
 8007638:	e025      	b.n	8007686 <HAL_RCC_OscConfig+0x2d2>
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	061b      	lsls	r3, r3, #24
 8007648:	4901      	ldr	r1, [pc, #4]	; (8007650 <HAL_RCC_OscConfig+0x29c>)
 800764a:	4313      	orrs	r3, r2
 800764c:	604b      	str	r3, [r1, #4]
 800764e:	e01a      	b.n	8007686 <HAL_RCC_OscConfig+0x2d2>
 8007650:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007654:	4b9e      	ldr	r3, [pc, #632]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a9d      	ldr	r2, [pc, #628]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 800765a:	f023 0301 	bic.w	r3, r3, #1
 800765e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007660:	f7f9 fdb4 	bl	80011cc <HAL_GetTick>
 8007664:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007668:	f7f9 fdb0 	bl	80011cc <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e2c2      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800767a:	4b95      	ldr	r3, [pc, #596]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1f0      	bne.n	8007668 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 80a9 	beq.w	80077e6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007694:	4b8e      	ldr	r3, [pc, #568]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800769c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800769e:	4b8c      	ldr	r3, [pc, #560]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d007      	beq.n	80076ba <HAL_RCC_OscConfig+0x306>
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b18      	cmp	r3, #24
 80076ae:	d13a      	bne.n	8007726 <HAL_RCC_OscConfig+0x372>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f003 0303 	and.w	r3, r3, #3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d135      	bne.n	8007726 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076ba:	4b85      	ldr	r3, [pc, #532]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <HAL_RCC_OscConfig+0x31e>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	2b80      	cmp	r3, #128	; 0x80
 80076cc:	d001      	beq.n	80076d2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e296      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076d2:	f7f9 fdab 	bl	800122c <HAL_GetREVID>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80076dc:	4293      	cmp	r3, r2
 80076de:	d817      	bhi.n	8007710 <HAL_RCC_OscConfig+0x35c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d108      	bne.n	80076fa <HAL_RCC_OscConfig+0x346>
 80076e8:	4b79      	ldr	r3, [pc, #484]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80076f0:	4a77      	ldr	r2, [pc, #476]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80076f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076f8:	e075      	b.n	80077e6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076fa:	4b75      	ldr	r3, [pc, #468]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	069b      	lsls	r3, r3, #26
 8007708:	4971      	ldr	r1, [pc, #452]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 800770a:	4313      	orrs	r3, r2
 800770c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800770e:	e06a      	b.n	80077e6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007710:	4b6f      	ldr	r3, [pc, #444]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	496c      	ldr	r1, [pc, #432]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007720:	4313      	orrs	r3, r2
 8007722:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007724:	e05f      	b.n	80077e6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d042      	beq.n	80077b4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800772e:	4b68      	ldr	r3, [pc, #416]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a67      	ldr	r2, [pc, #412]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773a:	f7f9 fd47 	bl	80011cc <HAL_GetTick>
 800773e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007740:	e008      	b.n	8007754 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007742:	f7f9 fd43 	bl	80011cc <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e255      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007754:	4b5e      	ldr	r3, [pc, #376]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007760:	f7f9 fd64 	bl	800122c <HAL_GetREVID>
 8007764:	4603      	mov	r3, r0
 8007766:	f241 0203 	movw	r2, #4099	; 0x1003
 800776a:	4293      	cmp	r3, r2
 800776c:	d817      	bhi.n	800779e <HAL_RCC_OscConfig+0x3ea>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	2b20      	cmp	r3, #32
 8007774:	d108      	bne.n	8007788 <HAL_RCC_OscConfig+0x3d4>
 8007776:	4b56      	ldr	r3, [pc, #344]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800777e:	4a54      	ldr	r2, [pc, #336]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007784:	6053      	str	r3, [r2, #4]
 8007786:	e02e      	b.n	80077e6 <HAL_RCC_OscConfig+0x432>
 8007788:	4b51      	ldr	r3, [pc, #324]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	069b      	lsls	r3, r3, #26
 8007796:	494e      	ldr	r1, [pc, #312]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007798:	4313      	orrs	r3, r2
 800779a:	604b      	str	r3, [r1, #4]
 800779c:	e023      	b.n	80077e6 <HAL_RCC_OscConfig+0x432>
 800779e:	4b4c      	ldr	r3, [pc, #304]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	061b      	lsls	r3, r3, #24
 80077ac:	4948      	ldr	r1, [pc, #288]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	60cb      	str	r3, [r1, #12]
 80077b2:	e018      	b.n	80077e6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077b4:	4b46      	ldr	r3, [pc, #280]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a45      	ldr	r2, [pc, #276]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80077ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c0:	f7f9 fd04 	bl	80011cc <HAL_GetTick>
 80077c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077c6:	e008      	b.n	80077da <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80077c8:	f7f9 fd00 	bl	80011cc <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d901      	bls.n	80077da <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e212      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077da:	4b3d      	ldr	r3, [pc, #244]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1f0      	bne.n	80077c8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0308 	and.w	r3, r3, #8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d036      	beq.n	8007860 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d019      	beq.n	800782e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077fa:	4b35      	ldr	r3, [pc, #212]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80077fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fe:	4a34      	ldr	r2, [pc, #208]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007806:	f7f9 fce1 	bl	80011cc <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800780e:	f7f9 fcdd 	bl	80011cc <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e1ef      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007820:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <HAL_RCC_OscConfig+0x45a>
 800782c:	e018      	b.n	8007860 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800782e:	4b28      	ldr	r3, [pc, #160]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007832:	4a27      	ldr	r2, [pc, #156]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783a:	f7f9 fcc7 	bl	80011cc <HAL_GetTick>
 800783e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007840:	e008      	b.n	8007854 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007842:	f7f9 fcc3 	bl	80011cc <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e1d5      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007854:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f0      	bne.n	8007842 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b00      	cmp	r3, #0
 800786a:	d039      	beq.n	80078e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d019      	beq.n	80078a8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 800787a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800787e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007880:	f7f9 fca4 	bl	80011cc <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007888:	f7f9 fca0 	bl	80011cc <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e1b2      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800789a:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d0f0      	beq.n	8007888 <HAL_RCC_OscConfig+0x4d4>
 80078a6:	e01b      	b.n	80078e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078a8:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <HAL_RCC_OscConfig+0x51c>)
 80078ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078b4:	f7f9 fc8a 	bl	80011cc <HAL_GetTick>
 80078b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078ba:	e00b      	b.n	80078d4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80078bc:	f7f9 fc86 	bl	80011cc <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d904      	bls.n	80078d4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e198      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
 80078ce:	bf00      	nop
 80078d0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078d4:	4ba3      	ldr	r3, [pc, #652]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1ed      	bne.n	80078bc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0304 	and.w	r3, r3, #4
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8081 	beq.w	80079f0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078ee:	4b9e      	ldr	r3, [pc, #632]	; (8007b68 <HAL_RCC_OscConfig+0x7b4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a9d      	ldr	r2, [pc, #628]	; (8007b68 <HAL_RCC_OscConfig+0x7b4>)
 80078f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078fa:	f7f9 fc67 	bl	80011cc <HAL_GetTick>
 80078fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007900:	e008      	b.n	8007914 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007902:	f7f9 fc63 	bl	80011cc <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b64      	cmp	r3, #100	; 0x64
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e175      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007914:	4b94      	ldr	r3, [pc, #592]	; (8007b68 <HAL_RCC_OscConfig+0x7b4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d106      	bne.n	8007936 <HAL_RCC_OscConfig+0x582>
 8007928:	4b8e      	ldr	r3, [pc, #568]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	4a8d      	ldr	r2, [pc, #564]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6713      	str	r3, [r2, #112]	; 0x70
 8007934:	e02d      	b.n	8007992 <HAL_RCC_OscConfig+0x5de>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10c      	bne.n	8007958 <HAL_RCC_OscConfig+0x5a4>
 800793e:	4b89      	ldr	r3, [pc, #548]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	4a88      	ldr	r2, [pc, #544]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007944:	f023 0301 	bic.w	r3, r3, #1
 8007948:	6713      	str	r3, [r2, #112]	; 0x70
 800794a:	4b86      	ldr	r3, [pc, #536]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	4a85      	ldr	r2, [pc, #532]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007950:	f023 0304 	bic.w	r3, r3, #4
 8007954:	6713      	str	r3, [r2, #112]	; 0x70
 8007956:	e01c      	b.n	8007992 <HAL_RCC_OscConfig+0x5de>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b05      	cmp	r3, #5
 800795e:	d10c      	bne.n	800797a <HAL_RCC_OscConfig+0x5c6>
 8007960:	4b80      	ldr	r3, [pc, #512]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	4a7f      	ldr	r2, [pc, #508]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007966:	f043 0304 	orr.w	r3, r3, #4
 800796a:	6713      	str	r3, [r2, #112]	; 0x70
 800796c:	4b7d      	ldr	r3, [pc, #500]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007970:	4a7c      	ldr	r2, [pc, #496]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007972:	f043 0301 	orr.w	r3, r3, #1
 8007976:	6713      	str	r3, [r2, #112]	; 0x70
 8007978:	e00b      	b.n	8007992 <HAL_RCC_OscConfig+0x5de>
 800797a:	4b7a      	ldr	r3, [pc, #488]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	4a79      	ldr	r2, [pc, #484]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007980:	f023 0301 	bic.w	r3, r3, #1
 8007984:	6713      	str	r3, [r2, #112]	; 0x70
 8007986:	4b77      	ldr	r3, [pc, #476]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	4a76      	ldr	r2, [pc, #472]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 800798c:	f023 0304 	bic.w	r3, r3, #4
 8007990:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d015      	beq.n	80079c6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800799a:	f7f9 fc17 	bl	80011cc <HAL_GetTick>
 800799e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079a0:	e00a      	b.n	80079b8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a2:	f7f9 fc13 	bl	80011cc <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e123      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079b8:	4b6a      	ldr	r3, [pc, #424]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0ee      	beq.n	80079a2 <HAL_RCC_OscConfig+0x5ee>
 80079c4:	e014      	b.n	80079f0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c6:	f7f9 fc01 	bl	80011cc <HAL_GetTick>
 80079ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079cc:	e00a      	b.n	80079e4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ce:	f7f9 fbfd 	bl	80011cc <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079dc:	4293      	cmp	r3, r2
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e10d      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079e4:	4b5f      	ldr	r3, [pc, #380]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 80079e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1ee      	bne.n	80079ce <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 8102 	beq.w	8007bfe <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80079fa:	4b5a      	ldr	r3, [pc, #360]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a02:	2b18      	cmp	r3, #24
 8007a04:	f000 80bd 	beq.w	8007b82 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	f040 8095 	bne.w	8007b3c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a12:	4b54      	ldr	r3, [pc, #336]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a53      	ldr	r2, [pc, #332]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a1e:	f7f9 fbd5 	bl	80011cc <HAL_GetTick>
 8007a22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a26:	f7f9 fbd1 	bl	80011cc <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e0e3      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a38:	4b4a      	ldr	r3, [pc, #296]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f0      	bne.n	8007a26 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a44:	4b47      	ldr	r3, [pc, #284]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a48:	4b48      	ldr	r3, [pc, #288]	; (8007b6c <HAL_RCC_OscConfig+0x7b8>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a54:	0112      	lsls	r2, r2, #4
 8007a56:	430a      	orrs	r2, r1
 8007a58:	4942      	ldr	r1, [pc, #264]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	628b      	str	r3, [r1, #40]	; 0x28
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	3b01      	subs	r3, #1
 8007a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	025b      	lsls	r3, r3, #9
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	041b      	lsls	r3, r3, #16
 8007a7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a80:	431a      	orrs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	3b01      	subs	r3, #1
 8007a88:	061b      	lsls	r3, r3, #24
 8007a8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a8e:	4935      	ldr	r1, [pc, #212]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007a94:	4b33      	ldr	r3, [pc, #204]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	4a32      	ldr	r2, [pc, #200]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007aa0:	4b30      	ldr	r3, [pc, #192]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aa4:	4b32      	ldr	r3, [pc, #200]	; (8007b70 <HAL_RCC_OscConfig+0x7bc>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007aac:	00d2      	lsls	r2, r2, #3
 8007aae:	492d      	ldr	r1, [pc, #180]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ab4:	4b2b      	ldr	r3, [pc, #172]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	f023 020c 	bic.w	r2, r3, #12
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	4928      	ldr	r1, [pc, #160]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ac6:	4b27      	ldr	r3, [pc, #156]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	f023 0202 	bic.w	r2, r3, #2
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	4924      	ldr	r1, [pc, #144]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ad8:	4b22      	ldr	r3, [pc, #136]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a21      	ldr	r2, [pc, #132]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae4:	4b1f      	ldr	r3, [pc, #124]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	4a1e      	ldr	r2, [pc, #120]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007af0:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a1b      	ldr	r2, [pc, #108]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007af6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007afa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007afc:	4b19      	ldr	r3, [pc, #100]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007b02:	f043 0301 	orr.w	r3, r3, #1
 8007b06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b08:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b14:	f7f9 fb5a 	bl	80011cc <HAL_GetTick>
 8007b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b1a:	e008      	b.n	8007b2e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b1c:	f7f9 fb56 	bl	80011cc <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d901      	bls.n	8007b2e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e068      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b2e:	4b0d      	ldr	r3, [pc, #52]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0f0      	beq.n	8007b1c <HAL_RCC_OscConfig+0x768>
 8007b3a:	e060      	b.n	8007bfe <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a08      	ldr	r2, [pc, #32]	; (8007b64 <HAL_RCC_OscConfig+0x7b0>)
 8007b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b48:	f7f9 fb40 	bl	80011cc <HAL_GetTick>
 8007b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b4e:	e011      	b.n	8007b74 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b50:	f7f9 fb3c 	bl	80011cc <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d90a      	bls.n	8007b74 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e04e      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
 8007b62:	bf00      	nop
 8007b64:	58024400 	.word	0x58024400
 8007b68:	58024800 	.word	0x58024800
 8007b6c:	fffffc0c 	.word	0xfffffc0c
 8007b70:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b74:	4b24      	ldr	r3, [pc, #144]	; (8007c08 <HAL_RCC_OscConfig+0x854>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e7      	bne.n	8007b50 <HAL_RCC_OscConfig+0x79c>
 8007b80:	e03d      	b.n	8007bfe <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b82:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <HAL_RCC_OscConfig+0x854>)
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b88:	4b1f      	ldr	r3, [pc, #124]	; (8007c08 <HAL_RCC_OscConfig+0x854>)
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d031      	beq.n	8007bfa <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f003 0203 	and.w	r2, r3, #3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d12a      	bne.n	8007bfa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	091b      	lsrs	r3, r3, #4
 8007ba8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d122      	bne.n	8007bfa <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d11a      	bne.n	8007bfa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	0a5b      	lsrs	r3, r3, #9
 8007bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d111      	bne.n	8007bfa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d108      	bne.n	8007bfa <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	0e1b      	lsrs	r3, r3, #24
 8007bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d001      	beq.n	8007bfe <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3730      	adds	r7, #48	; 0x30
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	58024400 	.word	0x58024400

08007c0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e19c      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c20:	4b8a      	ldr	r3, [pc, #552]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d910      	bls.n	8007c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c2e:	4b87      	ldr	r3, [pc, #540]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f023 020f 	bic.w	r2, r3, #15
 8007c36:	4985      	ldr	r1, [pc, #532]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c3e:	4b83      	ldr	r3, [pc, #524]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 030f 	and.w	r3, r3, #15
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d001      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e184      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d010      	beq.n	8007c7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	4b7b      	ldr	r3, [pc, #492]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d908      	bls.n	8007c7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c6c:	4b78      	ldr	r3, [pc, #480]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	4975      	ldr	r1, [pc, #468]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d010      	beq.n	8007cac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	4b70      	ldr	r3, [pc, #448]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d908      	bls.n	8007cac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c9a:	4b6d      	ldr	r3, [pc, #436]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	496a      	ldr	r1, [pc, #424]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d010      	beq.n	8007cda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699a      	ldr	r2, [r3, #24]
 8007cbc:	4b64      	ldr	r3, [pc, #400]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d908      	bls.n	8007cda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007cc8:	4b61      	ldr	r3, [pc, #388]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	495e      	ldr	r1, [pc, #376]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d010      	beq.n	8007d08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	69da      	ldr	r2, [r3, #28]
 8007cea:	4b59      	ldr	r3, [pc, #356]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d908      	bls.n	8007d08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007cf6:	4b56      	ldr	r3, [pc, #344]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	4953      	ldr	r1, [pc, #332]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d010      	beq.n	8007d36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	4b4d      	ldr	r3, [pc, #308]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	f003 030f 	and.w	r3, r3, #15
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d908      	bls.n	8007d36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d24:	4b4a      	ldr	r3, [pc, #296]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d26:	699b      	ldr	r3, [r3, #24]
 8007d28:	f023 020f 	bic.w	r2, r3, #15
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4947      	ldr	r1, [pc, #284]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d32:	4313      	orrs	r3, r2
 8007d34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d055      	beq.n	8007dee <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d42:	4b43      	ldr	r3, [pc, #268]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	4940      	ldr	r1, [pc, #256]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d5c:	4b3c      	ldr	r3, [pc, #240]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d121      	bne.n	8007dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e0f6      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d107      	bne.n	8007d84 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d74:	4b36      	ldr	r3, [pc, #216]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d115      	bne.n	8007dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0ea      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007d8c:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0de      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d9c:	4b2c      	ldr	r3, [pc, #176]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e0d6      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dac:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f023 0207 	bic.w	r2, r3, #7
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	4925      	ldr	r1, [pc, #148]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbe:	f7f9 fa05 	bl	80011cc <HAL_GetTick>
 8007dc2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dc4:	e00a      	b.n	8007ddc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dc6:	f7f9 fa01 	bl	80011cc <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e0be      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d1eb      	bne.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d010      	beq.n	8007e1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	4b14      	ldr	r3, [pc, #80]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	f003 030f 	and.w	r3, r3, #15
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d208      	bcs.n	8007e1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e0a:	4b11      	ldr	r3, [pc, #68]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f023 020f 	bic.w	r2, r3, #15
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	490e      	ldr	r1, [pc, #56]	; (8007e50 <HAL_RCC_ClockConfig+0x244>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 030f 	and.w	r3, r3, #15
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d214      	bcs.n	8007e54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e2a:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f023 020f 	bic.w	r2, r3, #15
 8007e32:	4906      	ldr	r1, [pc, #24]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e3a:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <HAL_RCC_ClockConfig+0x240>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d005      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e086      	b.n	8007f5a <HAL_RCC_ClockConfig+0x34e>
 8007e4c:	52002000 	.word	0x52002000
 8007e50:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d010      	beq.n	8007e82 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d208      	bcs.n	8007e82 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e70:	4b3c      	ldr	r3, [pc, #240]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	4939      	ldr	r1, [pc, #228]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d010      	beq.n	8007eb0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695a      	ldr	r2, [r3, #20]
 8007e92:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d208      	bcs.n	8007eb0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e9e:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	492e      	ldr	r1, [pc, #184]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d010      	beq.n	8007ede <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699a      	ldr	r2, [r3, #24]
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d208      	bcs.n	8007ede <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ecc:	4b25      	ldr	r3, [pc, #148]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	4922      	ldr	r1, [pc, #136]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d010      	beq.n	8007f0c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69da      	ldr	r2, [r3, #28]
 8007eee:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d208      	bcs.n	8007f0c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007efa:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	4917      	ldr	r1, [pc, #92]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f0c:	f000 f834 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b14      	ldr	r3, [pc, #80]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	4912      	ldr	r1, [pc, #72]	; (8007f68 <HAL_RCC_ClockConfig+0x35c>)
 8007f1e:	5ccb      	ldrb	r3, [r1, r3]
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	fa22 f303 	lsr.w	r3, r2, r3
 8007f28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f2a:	4b0e      	ldr	r3, [pc, #56]	; (8007f64 <HAL_RCC_ClockConfig+0x358>)
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	f003 030f 	and.w	r3, r3, #15
 8007f32:	4a0d      	ldr	r2, [pc, #52]	; (8007f68 <HAL_RCC_ClockConfig+0x35c>)
 8007f34:	5cd3      	ldrb	r3, [r2, r3]
 8007f36:	f003 031f 	and.w	r3, r3, #31
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <HAL_RCC_ClockConfig+0x360>)
 8007f42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f44:	4a0a      	ldr	r2, [pc, #40]	; (8007f70 <HAL_RCC_ClockConfig+0x364>)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <HAL_RCC_ClockConfig+0x368>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7f9 f8f2 	bl	8001138 <HAL_InitTick>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
 8007f68:	0800ea58 	.word	0x0800ea58
 8007f6c:	24000034 	.word	0x24000034
 8007f70:	24000030 	.word	0x24000030
 8007f74:	24000038 	.word	0x24000038

08007f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b089      	sub	sp, #36	; 0x24
 8007f7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f7e:	4bb3      	ldr	r3, [pc, #716]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f86:	2b18      	cmp	r3, #24
 8007f88:	f200 8155 	bhi.w	8008236 <HAL_RCC_GetSysClockFreq+0x2be>
 8007f8c:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08007ff9 	.word	0x08007ff9
 8007f98:	08008237 	.word	0x08008237
 8007f9c:	08008237 	.word	0x08008237
 8007fa0:	08008237 	.word	0x08008237
 8007fa4:	08008237 	.word	0x08008237
 8007fa8:	08008237 	.word	0x08008237
 8007fac:	08008237 	.word	0x08008237
 8007fb0:	08008237 	.word	0x08008237
 8007fb4:	0800801f 	.word	0x0800801f
 8007fb8:	08008237 	.word	0x08008237
 8007fbc:	08008237 	.word	0x08008237
 8007fc0:	08008237 	.word	0x08008237
 8007fc4:	08008237 	.word	0x08008237
 8007fc8:	08008237 	.word	0x08008237
 8007fcc:	08008237 	.word	0x08008237
 8007fd0:	08008237 	.word	0x08008237
 8007fd4:	08008025 	.word	0x08008025
 8007fd8:	08008237 	.word	0x08008237
 8007fdc:	08008237 	.word	0x08008237
 8007fe0:	08008237 	.word	0x08008237
 8007fe4:	08008237 	.word	0x08008237
 8007fe8:	08008237 	.word	0x08008237
 8007fec:	08008237 	.word	0x08008237
 8007ff0:	08008237 	.word	0x08008237
 8007ff4:	0800802b 	.word	0x0800802b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ff8:	4b94      	ldr	r3, [pc, #592]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008004:	4b91      	ldr	r3, [pc, #580]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	08db      	lsrs	r3, r3, #3
 800800a:	f003 0303 	and.w	r3, r3, #3
 800800e:	4a90      	ldr	r2, [pc, #576]	; (8008250 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008010:	fa22 f303 	lsr.w	r3, r2, r3
 8008014:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008016:	e111      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008018:	4b8d      	ldr	r3, [pc, #564]	; (8008250 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800801a:	61bb      	str	r3, [r7, #24]
    break;
 800801c:	e10e      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800801e:	4b8d      	ldr	r3, [pc, #564]	; (8008254 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008020:	61bb      	str	r3, [r7, #24]
    break;
 8008022:	e10b      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008024:	4b8c      	ldr	r3, [pc, #560]	; (8008258 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008026:	61bb      	str	r3, [r7, #24]
    break;
 8008028:	e108      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800802a:	4b88      	ldr	r3, [pc, #544]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008034:	4b85      	ldr	r3, [pc, #532]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	091b      	lsrs	r3, r3, #4
 800803a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800803e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008040:	4b82      	ldr	r3, [pc, #520]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800804a:	4b80      	ldr	r3, [pc, #512]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800804c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804e:	08db      	lsrs	r3, r3, #3
 8008050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008062:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 80e1 	beq.w	8008230 <HAL_RCC_GetSysClockFreq+0x2b8>
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b02      	cmp	r3, #2
 8008072:	f000 8083 	beq.w	800817c <HAL_RCC_GetSysClockFreq+0x204>
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b02      	cmp	r3, #2
 800807a:	f200 80a1 	bhi.w	80081c0 <HAL_RCC_GetSysClockFreq+0x248>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_RCC_GetSysClockFreq+0x114>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d056      	beq.n	8008138 <HAL_RCC_GetSysClockFreq+0x1c0>
 800808a:	e099      	b.n	80081c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800808c:	4b6f      	ldr	r3, [pc, #444]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d02d      	beq.n	80080f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008098:	4b6c      	ldr	r3, [pc, #432]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	08db      	lsrs	r3, r3, #3
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	4a6b      	ldr	r2, [pc, #428]	; (8008250 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
 80080a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	ee07 3a90 	vmov	s15, r3
 80080b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c2:	4b62      	ldr	r3, [pc, #392]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ca:	ee07 3a90 	vmov	s15, r3
 80080ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80080d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800825c <HAL_RCC_GetSysClockFreq+0x2e4>
 80080da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80080f2:	e087      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008260 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008106:	4b51      	ldr	r3, [pc, #324]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810e:	ee07 3a90 	vmov	s15, r3
 8008112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008116:	ed97 6a02 	vldr	s12, [r7, #8]
 800811a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800825c <HAL_RCC_GetSysClockFreq+0x2e4>
 800811e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800812a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008136:	e065      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008142:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008264 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814a:	4b40      	ldr	r3, [pc, #256]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815a:	ed97 6a02 	vldr	s12, [r7, #8]
 800815e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800825c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800817a:	e043      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	ee07 3a90 	vmov	s15, r3
 8008182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008186:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008268 <HAL_RCC_GetSysClockFreq+0x2f0>
 800818a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800818e:	4b2f      	ldr	r3, [pc, #188]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008196:	ee07 3a90 	vmov	s15, r3
 800819a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800819e:	ed97 6a02 	vldr	s12, [r7, #8]
 80081a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800825c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081be:	e021      	b.n	8008204 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	ee07 3a90 	vmov	s15, r3
 80081c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008264 <HAL_RCC_GetSysClockFreq+0x2ec>
 80081ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d2:	4b1e      	ldr	r3, [pc, #120]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80081e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800825c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008202:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008204:	4b11      	ldr	r3, [pc, #68]	; (800824c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	0a5b      	lsrs	r3, r3, #9
 800820a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800820e:	3301      	adds	r3, #1
 8008210:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	ee07 3a90 	vmov	s15, r3
 8008218:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800821c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008228:	ee17 3a90 	vmov	r3, s15
 800822c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800822e:	e005      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	61bb      	str	r3, [r7, #24]
    break;
 8008234:	e002      	b.n	800823c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008238:	61bb      	str	r3, [r7, #24]
    break;
 800823a:	bf00      	nop
  }

  return sysclockfreq;
 800823c:	69bb      	ldr	r3, [r7, #24]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3724      	adds	r7, #36	; 0x24
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
 8008250:	03d09000 	.word	0x03d09000
 8008254:	003d0900 	.word	0x003d0900
 8008258:	007a1200 	.word	0x007a1200
 800825c:	46000000 	.word	0x46000000
 8008260:	4c742400 	.word	0x4c742400
 8008264:	4a742400 	.word	0x4a742400
 8008268:	4af42400 	.word	0x4af42400

0800826c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008272:	f7ff fe81 	bl	8007f78 <HAL_RCC_GetSysClockFreq>
 8008276:	4602      	mov	r2, r0
 8008278:	4b10      	ldr	r3, [pc, #64]	; (80082bc <HAL_RCC_GetHCLKFreq+0x50>)
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	0a1b      	lsrs	r3, r3, #8
 800827e:	f003 030f 	and.w	r3, r3, #15
 8008282:	490f      	ldr	r1, [pc, #60]	; (80082c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008284:	5ccb      	ldrb	r3, [r1, r3]
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	fa22 f303 	lsr.w	r3, r2, r3
 800828e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008290:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <HAL_RCC_GetHCLKFreq+0x50>)
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800829a:	5cd3      	ldrb	r3, [r2, r3]
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	fa22 f303 	lsr.w	r3, r2, r3
 80082a6:	4a07      	ldr	r2, [pc, #28]	; (80082c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80082a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082aa:	4a07      	ldr	r2, [pc, #28]	; (80082c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80082b2:	681b      	ldr	r3, [r3, #0]
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	58024400 	.word	0x58024400
 80082c0:	0800ea58 	.word	0x0800ea58
 80082c4:	24000034 	.word	0x24000034
 80082c8:	24000030 	.word	0x24000030

080082cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082d4:	2300      	movs	r3, #0
 80082d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082d8:	2300      	movs	r3, #0
 80082da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d03f      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082f0:	d02a      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80082f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082f6:	d824      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80082f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082fc:	d018      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80082fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008302:	d81e      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830c:	d007      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800830e:	e018      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008310:	4bab      	ldr	r3, [pc, #684]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	4aaa      	ldr	r2, [pc, #680]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800831a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800831c:	e015      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3304      	adds	r3, #4
 8008322:	2102      	movs	r1, #2
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fff3 	bl	800a310 <RCCEx_PLL2_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800832e:	e00c      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	3324      	adds	r3, #36	; 0x24
 8008334:	2102      	movs	r1, #2
 8008336:	4618      	mov	r0, r3
 8008338:	f002 f89c 	bl	800a474 <RCCEx_PLL3_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008340:	e003      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	75fb      	strb	r3, [r7, #23]
      break;
 8008346:	e000      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008350:	4b9b      	ldr	r3, [pc, #620]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835c:	4998      	ldr	r1, [pc, #608]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800835e:	4313      	orrs	r3, r2
 8008360:	650b      	str	r3, [r1, #80]	; 0x50
 8008362:	e001      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
 8008366:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008370:	2b00      	cmp	r3, #0
 8008372:	d03d      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008378:	2b04      	cmp	r3, #4
 800837a:	d826      	bhi.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	08008399 	.word	0x08008399
 8008388:	080083a7 	.word	0x080083a7
 800838c:	080083b9 	.word	0x080083b9
 8008390:	080083d1 	.word	0x080083d1
 8008394:	080083d1 	.word	0x080083d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008398:	4b89      	ldr	r3, [pc, #548]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	4a88      	ldr	r2, [pc, #544]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800839e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083a4:	e015      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	2100      	movs	r1, #0
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 ffaf 	bl	800a310 <RCCEx_PLL2_Config>
 80083b2:	4603      	mov	r3, r0
 80083b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083b6:	e00c      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3324      	adds	r3, #36	; 0x24
 80083bc:	2100      	movs	r1, #0
 80083be:	4618      	mov	r0, r3
 80083c0:	f002 f858 	bl	800a474 <RCCEx_PLL3_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083c8:	e003      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
      break;
 80083ce:	e000      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80083d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d109      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083d8:	4b79      	ldr	r3, [pc, #484]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	f023 0207 	bic.w	r2, r3, #7
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e4:	4976      	ldr	r1, [pc, #472]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	650b      	str	r3, [r1, #80]	; 0x50
 80083ea:	e001      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d042      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008404:	d02b      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800840a:	d825      	bhi.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800840c:	2bc0      	cmp	r3, #192	; 0xc0
 800840e:	d028      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008410:	2bc0      	cmp	r3, #192	; 0xc0
 8008412:	d821      	bhi.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008414:	2b80      	cmp	r3, #128	; 0x80
 8008416:	d016      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008418:	2b80      	cmp	r3, #128	; 0x80
 800841a:	d81d      	bhi.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	d007      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008424:	e018      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008426:	4b66      	ldr	r3, [pc, #408]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842a:	4a65      	ldr	r2, [pc, #404]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800842c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008430:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008432:	e017      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	2100      	movs	r1, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f001 ff68 	bl	800a310 <RCCEx_PLL2_Config>
 8008440:	4603      	mov	r3, r0
 8008442:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008444:	e00e      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3324      	adds	r3, #36	; 0x24
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f002 f811 	bl	800a474 <RCCEx_PLL3_Config>
 8008452:	4603      	mov	r3, r0
 8008454:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008456:	e005      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	75fb      	strb	r3, [r7, #23]
      break;
 800845c:	e002      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800845e:	bf00      	nop
 8008460:	e000      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d109      	bne.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800846a:	4b55      	ldr	r3, [pc, #340]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800846c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008476:	4952      	ldr	r1, [pc, #328]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008478:	4313      	orrs	r3, r2
 800847a:	650b      	str	r3, [r1, #80]	; 0x50
 800847c:	e001      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800848a:	2b00      	cmp	r3, #0
 800848c:	d049      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008498:	d030      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800849a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800849e:	d82a      	bhi.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80084a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084a4:	d02c      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80084a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084aa:	d824      	bhi.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80084ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b0:	d018      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80084b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b6:	d81e      	bhi.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80084bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084c0:	d007      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80084c2:	e018      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c4:	4b3e      	ldr	r3, [pc, #248]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a3d      	ldr	r2, [pc, #244]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084d0:	e017      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3304      	adds	r3, #4
 80084d6:	2100      	movs	r1, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 ff19 	bl	800a310 <RCCEx_PLL2_Config>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80084e2:	e00e      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3324      	adds	r3, #36	; 0x24
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f001 ffc2 	bl	800a474 <RCCEx_PLL3_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084f4:	e005      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	75fb      	strb	r3, [r7, #23]
      break;
 80084fa:	e002      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80084fc:	bf00      	nop
 80084fe:	e000      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10a      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008508:	4b2d      	ldr	r3, [pc, #180]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800850a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008516:	492a      	ldr	r1, [pc, #168]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008518:	4313      	orrs	r3, r2
 800851a:	658b      	str	r3, [r1, #88]	; 0x58
 800851c:	e001      	b.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800852a:	2b00      	cmp	r3, #0
 800852c:	d04c      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008534:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008538:	d030      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800853a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800853e:	d82a      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008540:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008544:	d02c      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008546:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800854a:	d824      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800854c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008550:	d018      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008556:	d81e      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d003      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800855c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008560:	d007      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008562:	e018      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008564:	4b16      	ldr	r3, [pc, #88]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008568:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800856a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800856e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008570:	e017      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3304      	adds	r3, #4
 8008576:	2100      	movs	r1, #0
 8008578:	4618      	mov	r0, r3
 800857a:	f001 fec9 	bl	800a310 <RCCEx_PLL2_Config>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008582:	e00e      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3324      	adds	r3, #36	; 0x24
 8008588:	2100      	movs	r1, #0
 800858a:	4618      	mov	r0, r3
 800858c:	f001 ff72 	bl	800a474 <RCCEx_PLL3_Config>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008594:	e005      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	75fb      	strb	r3, [r7, #23]
      break;
 800859a:	e002      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800859c:	bf00      	nop
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80085a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10d      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80085a8:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80085b6:	4902      	ldr	r1, [pc, #8]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	658b      	str	r3, [r1, #88]	; 0x58
 80085bc:	e004      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80085be:	bf00      	nop
 80085c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d032      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085d8:	2b30      	cmp	r3, #48	; 0x30
 80085da:	d01c      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80085dc:	2b30      	cmp	r3, #48	; 0x30
 80085de:	d817      	bhi.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	d00c      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d813      	bhi.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d016      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80085ec:	2b10      	cmp	r3, #16
 80085ee:	d10f      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085f0:	4baf      	ldr	r3, [pc, #700]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4aae      	ldr	r2, [pc, #696]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80085fc:	e00e      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3304      	adds	r3, #4
 8008602:	2102      	movs	r1, #2
 8008604:	4618      	mov	r0, r3
 8008606:	f001 fe83 	bl	800a310 <RCCEx_PLL2_Config>
 800860a:	4603      	mov	r3, r0
 800860c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800860e:	e005      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	75fb      	strb	r3, [r7, #23]
      break;
 8008614:	e002      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008616:	bf00      	nop
 8008618:	e000      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800861a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008622:	4ba3      	ldr	r3, [pc, #652]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008626:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800862e:	49a0      	ldr	r1, [pc, #640]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008630:	4313      	orrs	r3, r2
 8008632:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008634:	e001      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d047      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800864e:	d030      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008654:	d82a      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800865a:	d02c      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800865c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008660:	d824      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008666:	d018      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800866c:	d81e      	bhi.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d003      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008676:	d007      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008678:	e018      	b.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800867a:	4b8d      	ldr	r3, [pc, #564]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	4a8c      	ldr	r2, [pc, #560]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008684:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008686:	e017      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3304      	adds	r3, #4
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f001 fe3e 	bl	800a310 <RCCEx_PLL2_Config>
 8008694:	4603      	mov	r3, r0
 8008696:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008698:	e00e      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3324      	adds	r3, #36	; 0x24
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f001 fee7 	bl	800a474 <RCCEx_PLL3_Config>
 80086a6:	4603      	mov	r3, r0
 80086a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80086aa:	e005      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	75fb      	strb	r3, [r7, #23]
      break;
 80086b0:	e002      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80086b2:	bf00      	nop
 80086b4:	e000      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80086b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80086be:	4b7c      	ldr	r3, [pc, #496]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ca:	4979      	ldr	r1, [pc, #484]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	650b      	str	r3, [r1, #80]	; 0x50
 80086d0:	e001      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d049      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086ea:	d02e      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80086ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086f0:	d828      	bhi.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80086f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086f6:	d02a      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80086f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80086fc:	d822      	bhi.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80086fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008702:	d026      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008704:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008708:	d81c      	bhi.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800870a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800870e:	d010      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008714:	d816      	bhi.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008716:	2b00      	cmp	r3, #0
 8008718:	d01d      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800871a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800871e:	d111      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	3304      	adds	r3, #4
 8008724:	2101      	movs	r1, #1
 8008726:	4618      	mov	r0, r3
 8008728:	f001 fdf2 	bl	800a310 <RCCEx_PLL2_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008730:	e012      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3324      	adds	r3, #36	; 0x24
 8008736:	2101      	movs	r1, #1
 8008738:	4618      	mov	r0, r3
 800873a:	f001 fe9b 	bl	800a474 <RCCEx_PLL3_Config>
 800873e:	4603      	mov	r3, r0
 8008740:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008742:	e009      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	75fb      	strb	r3, [r7, #23]
      break;
 8008748:	e006      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800874a:	bf00      	nop
 800874c:	e004      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800874e:	bf00      	nop
 8008750:	e002      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008752:	bf00      	nop
 8008754:	e000      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800875e:	4b54      	ldr	r3, [pc, #336]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008762:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876a:	4951      	ldr	r1, [pc, #324]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800876c:	4313      	orrs	r3, r2
 800876e:	650b      	str	r3, [r1, #80]	; 0x50
 8008770:	e001      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d04b      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800878c:	d02e      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800878e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008792:	d828      	bhi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008798:	d02a      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879e:	d822      	bhi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087a4:	d026      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80087a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087aa:	d81c      	bhi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b0:	d010      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80087b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b6:	d816      	bhi.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01d      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80087bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087c0:	d111      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3304      	adds	r3, #4
 80087c6:	2101      	movs	r1, #1
 80087c8:	4618      	mov	r0, r3
 80087ca:	f001 fda1 	bl	800a310 <RCCEx_PLL2_Config>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087d2:	e012      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3324      	adds	r3, #36	; 0x24
 80087d8:	2101      	movs	r1, #1
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 fe4a 	bl	800a474 <RCCEx_PLL3_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80087e4:	e009      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	75fb      	strb	r3, [r7, #23]
      break;
 80087ea:	e006      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087ec:	bf00      	nop
 80087ee:	e004      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087f0:	bf00      	nop
 80087f2:	e002      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087f4:	bf00      	nop
 80087f6:	e000      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80087f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008804:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800880e:	4928      	ldr	r1, [pc, #160]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008810:	4313      	orrs	r3, r2
 8008812:	658b      	str	r3, [r1, #88]	; 0x58
 8008814:	e001      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d02f      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800882e:	d00e      	beq.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008834:	d814      	bhi.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d015      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800883a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800883e:	d10f      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008840:	4b1b      	ldr	r3, [pc, #108]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	4a1a      	ldr	r2, [pc, #104]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800884a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800884c:	e00c      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	2101      	movs	r1, #1
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fd5b 	bl	800a310 <RCCEx_PLL2_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800885e:	e003      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	75fb      	strb	r3, [r7, #23]
      break;
 8008864:	e000      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008868:	7dfb      	ldrb	r3, [r7, #23]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800886e:	4b10      	ldr	r3, [pc, #64]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008872:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887a:	490d      	ldr	r1, [pc, #52]	; (80088b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800887c:	4313      	orrs	r3, r2
 800887e:	650b      	str	r3, [r1, #80]	; 0x50
 8008880:	e001      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d033      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	2b03      	cmp	r3, #3
 8008898:	d81c      	bhi.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800889a:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	080088db 	.word	0x080088db
 80088a4:	080088b5 	.word	0x080088b5
 80088a8:	080088c3 	.word	0x080088c3
 80088ac:	080088db 	.word	0x080088db
 80088b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088b4:	4bb8      	ldr	r3, [pc, #736]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	4ab7      	ldr	r2, [pc, #732]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088c0:	e00c      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3304      	adds	r3, #4
 80088c6:	2102      	movs	r1, #2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fd21 	bl	800a310 <RCCEx_PLL2_Config>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80088d2:	e003      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	75fb      	strb	r3, [r7, #23]
      break;
 80088d8:	e000      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80088da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80088e2:	4bad      	ldr	r3, [pc, #692]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e6:	f023 0203 	bic.w	r2, r3, #3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	49aa      	ldr	r1, [pc, #680]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80088f4:	e001      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8086 	beq.w	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008908:	4ba4      	ldr	r3, [pc, #656]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4aa3      	ldr	r2, [pc, #652]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800890e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008912:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008914:	f7f8 fc5a 	bl	80011cc <HAL_GetTick>
 8008918:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800891a:	e009      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800891c:	f7f8 fc56 	bl	80011cc <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b64      	cmp	r3, #100	; 0x64
 8008928:	d902      	bls.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	75fb      	strb	r3, [r7, #23]
        break;
 800892e:	e005      	b.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008930:	4b9a      	ldr	r3, [pc, #616]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008938:	2b00      	cmp	r3, #0
 800893a:	d0ef      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800893c:	7dfb      	ldrb	r3, [r7, #23]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d166      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008942:	4b95      	ldr	r3, [pc, #596]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008944:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800894c:	4053      	eors	r3, r2
 800894e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008952:	2b00      	cmp	r3, #0
 8008954:	d013      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008956:	4b90      	ldr	r3, [pc, #576]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800895e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008960:	4b8d      	ldr	r3, [pc, #564]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008964:	4a8c      	ldr	r2, [pc, #560]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800896a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800896c:	4b8a      	ldr	r3, [pc, #552]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800896e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008970:	4a89      	ldr	r2, [pc, #548]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008976:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008978:	4a87      	ldr	r2, [pc, #540]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008988:	d115      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898a:	f7f8 fc1f 	bl	80011cc <HAL_GetTick>
 800898e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008990:	e00b      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008992:	f7f8 fc1b 	bl	80011cc <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d902      	bls.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	75fb      	strb	r3, [r7, #23]
            break;
 80089a8:	e005      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089aa:	4b7b      	ldr	r3, [pc, #492]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0ed      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d126      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089ca:	d10d      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80089cc:	4b72      	ldr	r3, [pc, #456]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089da:	0919      	lsrs	r1, r3, #4
 80089dc:	4b70      	ldr	r3, [pc, #448]	; (8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80089de:	400b      	ands	r3, r1
 80089e0:	496d      	ldr	r1, [pc, #436]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	610b      	str	r3, [r1, #16]
 80089e6:	e005      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80089e8:	4b6b      	ldr	r3, [pc, #428]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	4a6a      	ldr	r2, [pc, #424]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80089f2:	6113      	str	r3, [r2, #16]
 80089f4:	4b68      	ldr	r3, [pc, #416]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a02:	4965      	ldr	r1, [pc, #404]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	670b      	str	r3, [r1, #112]	; 0x70
 8008a08:	e004      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	75bb      	strb	r3, [r7, #22]
 8008a0e:	e001      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d07e      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a24:	2b28      	cmp	r3, #40	; 0x28
 8008a26:	d867      	bhi.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008aff 	.word	0x08008aff
 8008a34:	08008af9 	.word	0x08008af9
 8008a38:	08008af9 	.word	0x08008af9
 8008a3c:	08008af9 	.word	0x08008af9
 8008a40:	08008af9 	.word	0x08008af9
 8008a44:	08008af9 	.word	0x08008af9
 8008a48:	08008af9 	.word	0x08008af9
 8008a4c:	08008af9 	.word	0x08008af9
 8008a50:	08008ad5 	.word	0x08008ad5
 8008a54:	08008af9 	.word	0x08008af9
 8008a58:	08008af9 	.word	0x08008af9
 8008a5c:	08008af9 	.word	0x08008af9
 8008a60:	08008af9 	.word	0x08008af9
 8008a64:	08008af9 	.word	0x08008af9
 8008a68:	08008af9 	.word	0x08008af9
 8008a6c:	08008af9 	.word	0x08008af9
 8008a70:	08008ae7 	.word	0x08008ae7
 8008a74:	08008af9 	.word	0x08008af9
 8008a78:	08008af9 	.word	0x08008af9
 8008a7c:	08008af9 	.word	0x08008af9
 8008a80:	08008af9 	.word	0x08008af9
 8008a84:	08008af9 	.word	0x08008af9
 8008a88:	08008af9 	.word	0x08008af9
 8008a8c:	08008af9 	.word	0x08008af9
 8008a90:	08008aff 	.word	0x08008aff
 8008a94:	08008af9 	.word	0x08008af9
 8008a98:	08008af9 	.word	0x08008af9
 8008a9c:	08008af9 	.word	0x08008af9
 8008aa0:	08008af9 	.word	0x08008af9
 8008aa4:	08008af9 	.word	0x08008af9
 8008aa8:	08008af9 	.word	0x08008af9
 8008aac:	08008af9 	.word	0x08008af9
 8008ab0:	08008aff 	.word	0x08008aff
 8008ab4:	08008af9 	.word	0x08008af9
 8008ab8:	08008af9 	.word	0x08008af9
 8008abc:	08008af9 	.word	0x08008af9
 8008ac0:	08008af9 	.word	0x08008af9
 8008ac4:	08008af9 	.word	0x08008af9
 8008ac8:	08008af9 	.word	0x08008af9
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	08008aff 	.word	0x08008aff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	2101      	movs	r1, #1
 8008ada:	4618      	mov	r0, r3
 8008adc:	f001 fc18 	bl	800a310 <RCCEx_PLL2_Config>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008ae4:	e00c      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3324      	adds	r3, #36	; 0x24
 8008aea:	2101      	movs	r1, #1
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 fcc1 	bl	800a474 <RCCEx_PLL3_Config>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008af6:	e003      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	75fb      	strb	r3, [r7, #23]
      break;
 8008afc:	e000      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b06:	4b24      	ldr	r3, [pc, #144]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b12:	4921      	ldr	r1, [pc, #132]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	654b      	str	r3, [r1, #84]	; 0x54
 8008b18:	e001      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d03e      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d820      	bhi.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b7b 	.word	0x08008b7b
 8008b3c:	08008b51 	.word	0x08008b51
 8008b40:	08008b63 	.word	0x08008b63
 8008b44:	08008b7b 	.word	0x08008b7b
 8008b48:	08008b7b 	.word	0x08008b7b
 8008b4c:	08008b7b 	.word	0x08008b7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3304      	adds	r3, #4
 8008b54:	2101      	movs	r1, #1
 8008b56:	4618      	mov	r0, r3
 8008b58:	f001 fbda 	bl	800a310 <RCCEx_PLL2_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b60:	e00c      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3324      	adds	r3, #36	; 0x24
 8008b66:	2101      	movs	r1, #1
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fc83 	bl	800a474 <RCCEx_PLL3_Config>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008b72:	e003      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	75fb      	strb	r3, [r7, #23]
      break;
 8008b78:	e000      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d110      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008b82:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b86:	f023 0207 	bic.w	r2, r3, #7
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b8e:	4902      	ldr	r1, [pc, #8]	; (8008b98 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	654b      	str	r3, [r1, #84]	; 0x54
 8008b94:	e008      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008b96:	bf00      	nop
 8008b98:	58024400 	.word	0x58024400
 8008b9c:	58024800 	.word	0x58024800
 8008ba0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d039      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d820      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008bbe:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008c07 	.word	0x08008c07
 8008bc8:	08008bdd 	.word	0x08008bdd
 8008bcc:	08008bef 	.word	0x08008bef
 8008bd0:	08008c07 	.word	0x08008c07
 8008bd4:	08008c07 	.word	0x08008c07
 8008bd8:	08008c07 	.word	0x08008c07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3304      	adds	r3, #4
 8008be0:	2101      	movs	r1, #1
 8008be2:	4618      	mov	r0, r3
 8008be4:	f001 fb94 	bl	800a310 <RCCEx_PLL2_Config>
 8008be8:	4603      	mov	r3, r0
 8008bea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008bec:	e00c      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3324      	adds	r3, #36	; 0x24
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 fc3d 	bl	800a474 <RCCEx_PLL3_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008bfe:	e003      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	75fb      	strb	r3, [r7, #23]
      break;
 8008c04:	e000      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10a      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c0e:	4bb7      	ldr	r3, [pc, #732]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c12:	f023 0207 	bic.w	r2, r3, #7
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1c:	49b3      	ldr	r1, [pc, #716]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	658b      	str	r3, [r1, #88]	; 0x58
 8008c22:	e001      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0320 	and.w	r3, r3, #32
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d04b      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c3e:	d02e      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c44:	d828      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4a:	d02a      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c50:	d822      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c56:	d026      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c5c:	d81c      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c62:	d010      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c68:	d816      	bhi.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01d      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c72:	d111      	bne.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3304      	adds	r3, #4
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f001 fb48 	bl	800a310 <RCCEx_PLL2_Config>
 8008c80:	4603      	mov	r3, r0
 8008c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008c84:	e012      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	3324      	adds	r3, #36	; 0x24
 8008c8a:	2102      	movs	r1, #2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fbf1 	bl	800a474 <RCCEx_PLL3_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008c96:	e009      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c9c:	e006      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008c9e:	bf00      	nop
 8008ca0:	e004      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ca2:	bf00      	nop
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cb2:	4b8e      	ldr	r3, [pc, #568]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc0:	498a      	ldr	r1, [pc, #552]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8008cc6:	e001      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc8:	7dfb      	ldrb	r3, [r7, #23]
 8008cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d04b      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ce2:	d02e      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008ce4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ce8:	d828      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cee:	d02a      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf4:	d822      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cfa:	d026      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008cfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d00:	d81c      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d06:	d010      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d0c:	d816      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01d      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d16:	d111      	bne.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 faf6 	bl	800a310 <RCCEx_PLL2_Config>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d28:	e012      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	3324      	adds	r3, #36	; 0x24
 8008d2e:	2102      	movs	r1, #2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f001 fb9f 	bl	800a474 <RCCEx_PLL3_Config>
 8008d36:	4603      	mov	r3, r0
 8008d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008d3a:	e009      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d40:	e006      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d42:	bf00      	nop
 8008d44:	e004      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d46:	bf00      	nop
 8008d48:	e002      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e000      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d56:	4b65      	ldr	r3, [pc, #404]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d64:	4961      	ldr	r1, [pc, #388]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	658b      	str	r3, [r1, #88]	; 0x58
 8008d6a:	e001      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d04b      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d86:	d02e      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008d88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d8c:	d828      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d92:	d02a      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d98:	d822      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008d9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d9e:	d026      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008da0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008da4:	d81c      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008daa:	d010      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008db0:	d816      	bhi.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01d      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dba:	d111      	bne.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f001 faa4 	bl	800a310 <RCCEx_PLL2_Config>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008dcc:	e012      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	2102      	movs	r1, #2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fb4d 	bl	800a474 <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008dde:	e009      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
      break;
 8008de4:	e006      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008de6:	bf00      	nop
 8008de8:	e004      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008dea:	bf00      	nop
 8008dec:	e002      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008dee:	bf00      	nop
 8008df0:	e000      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10a      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008dfa:	4b3c      	ldr	r3, [pc, #240]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e08:	4938      	ldr	r1, [pc, #224]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	658b      	str	r3, [r1, #88]	; 0x58
 8008e0e:	e001      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
 8008e12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d01a      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e2a:	d10a      	bne.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3324      	adds	r3, #36	; 0x24
 8008e30:	2102      	movs	r1, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 fb1e 	bl	800a474 <RCCEx_PLL3_Config>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008e42:	4b2a      	ldr	r3, [pc, #168]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e50:	4926      	ldr	r1, [pc, #152]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0310 	and.w	r3, r3, #16
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d01a      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6c:	d10a      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	3324      	adds	r3, #36	; 0x24
 8008e72:	2102      	movs	r1, #2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 fafd 	bl	800a474 <RCCEx_PLL3_Config>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e84:	4b19      	ldr	r3, [pc, #100]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e92:	4916      	ldr	r1, [pc, #88]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d036      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eae:	d01f      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eb4:	d817      	bhi.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ebe:	d009      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008ec0:	e011      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fa21 	bl	800a310 <RCCEx_PLL2_Config>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ed2:	e00e      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3324      	adds	r3, #36	; 0x24
 8008ed8:	2102      	movs	r1, #2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f001 faca 	bl	800a474 <RCCEx_PLL3_Config>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008ee4:	e005      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8008eea:	e002      	b.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008eec:	58024400 	.word	0x58024400
      break;
 8008ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10a      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ef8:	4b93      	ldr	r3, [pc, #588]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f06:	4990      	ldr	r1, [pc, #576]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8008f0c:	e001      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d033      	beq.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f28:	d01c      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f2e:	d816      	bhi.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f34:	d003      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f3a:	d007      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008f3c:	e00f      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f3e:	4b82      	ldr	r3, [pc, #520]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	4a81      	ldr	r2, [pc, #516]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f4a:	e00c      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3324      	adds	r3, #36	; 0x24
 8008f50:	2101      	movs	r1, #1
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 fa8e 	bl	800a474 <RCCEx_PLL3_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008f5c:	e003      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	75fb      	strb	r3, [r7, #23]
      break;
 8008f62:	e000      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10a      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f6c:	4b76      	ldr	r3, [pc, #472]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f7a:	4973      	ldr	r1, [pc, #460]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	654b      	str	r3, [r1, #84]	; 0x54
 8008f80:	e001      	b.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
 8008f84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d029      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9e:	d007      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008fa0:	e00f      	b.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fa2:	4b69      	ldr	r3, [pc, #420]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	4a68      	ldr	r2, [pc, #416]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fae:	e00b      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	2102      	movs	r1, #2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 f9aa 	bl	800a310 <RCCEx_PLL2_Config>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d109      	bne.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008fce:	4b5e      	ldr	r3, [pc, #376]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fda:	495b      	ldr	r1, [pc, #364]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008fe0:	e001      	b.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3324      	adds	r3, #36	; 0x24
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fa3b 	bl	800a474 <RCCEx_PLL3_Config>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d030      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800901c:	d017      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800901e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009022:	d811      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009028:	d013      	beq.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800902a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800902e:	d80b      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009030:	2b00      	cmp	r3, #0
 8009032:	d010      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009038:	d106      	bne.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800903a:	4b43      	ldr	r3, [pc, #268]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	4a42      	ldr	r2, [pc, #264]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009046:	e007      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
      break;
 800904c:	e004      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800904e:	bf00      	nop
 8009050:	e002      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009052:	bf00      	nop
 8009054:	e000      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d109      	bne.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800905e:	4b3a      	ldr	r3, [pc, #232]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800906a:	4937      	ldr	r1, [pc, #220]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800906c:	4313      	orrs	r3, r2
 800906e:	654b      	str	r3, [r1, #84]	; 0x54
 8009070:	e001      	b.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d008      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009082:	4b31      	ldr	r3, [pc, #196]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009086:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908e:	492e      	ldr	r1, [pc, #184]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009090:	4313      	orrs	r3, r2
 8009092:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d009      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80090a0:	4b29      	ldr	r3, [pc, #164]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090ae:	4926      	ldr	r1, [pc, #152]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d008      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090c0:	4b21      	ldr	r3, [pc, #132]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090cc:	491e      	ldr	r1, [pc, #120]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00d      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090de:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	4a19      	ldr	r2, [pc, #100]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090e8:	6113      	str	r3, [r2, #16]
 80090ea:	4b17      	ldr	r3, [pc, #92]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090ec:	691a      	ldr	r2, [r3, #16]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80090f4:	4914      	ldr	r1, [pc, #80]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da08      	bge.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009106:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910e:	490e      	ldr	r1, [pc, #56]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009110:	4313      	orrs	r3, r2
 8009112:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d009      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009124:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800912e:	4906      	ldr	r1, [pc, #24]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009130:	4313      	orrs	r3, r2
 8009132:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009134:	7dbb      	ldrb	r3, [r7, #22]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	e000      	b.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	58024400 	.word	0x58024400

0800914c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b090      	sub	sp, #64	; 0x40
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800915a:	f040 8095 	bne.w	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800915e:	4bae      	ldr	r3, [pc, #696]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	2b04      	cmp	r3, #4
 800916c:	f200 8088 	bhi.w	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009170:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	0800918d 	.word	0x0800918d
 800917c:	080091b5 	.word	0x080091b5
 8009180:	080091dd 	.word	0x080091dd
 8009184:	08009279 	.word	0x08009279
 8009188:	08009205 	.word	0x08009205

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800918c:	4ba2      	ldr	r3, [pc, #648]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009194:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009198:	d108      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800919a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 ff64 	bl	800a06c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091a8:	f000 bc95 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091b0:	f000 bc91 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091b4:	4b98      	ldr	r3, [pc, #608]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091c0:	d108      	bne.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c2:	f107 0318 	add.w	r3, r7, #24
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fca8 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091d0:	f000 bc81 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091d4:	2300      	movs	r3, #0
 80091d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091d8:	f000 bc7d 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091dc:	4b8e      	ldr	r3, [pc, #568]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e8:	d108      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ea:	f107 030c 	add.w	r3, r7, #12
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fde8 	bl	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091f8:	f000 bc6d 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009200:	f000 bc69 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009204:	4b84      	ldr	r3, [pc, #528]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800920c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800920e:	4b82      	ldr	r3, [pc, #520]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f003 0304 	and.w	r3, r3, #4
 8009216:	2b04      	cmp	r3, #4
 8009218:	d10c      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009220:	4b7d      	ldr	r3, [pc, #500]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	08db      	lsrs	r3, r3, #3
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	4a7c      	ldr	r2, [pc, #496]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800922c:	fa22 f303 	lsr.w	r3, r2, r3
 8009230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009232:	e01f      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009234:	4b78      	ldr	r3, [pc, #480]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009240:	d106      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009248:	d102      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800924a:	4b75      	ldr	r3, [pc, #468]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800924e:	e011      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009250:	4b71      	ldr	r3, [pc, #452]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800925c:	d106      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009264:	d102      	bne.n	800926c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009266:	4b6f      	ldr	r3, [pc, #444]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800926a:	e003      	b.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800926c:	2300      	movs	r3, #0
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009270:	f000 bc31 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009274:	f000 bc2f 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009278:	4b6b      	ldr	r3, [pc, #428]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800927c:	f000 bc2b 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009284:	f000 bc27 	b.w	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800928e:	f040 8095 	bne.w	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009292:	4b61      	ldr	r3, [pc, #388]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009296:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800929a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a2:	d04d      	beq.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80092a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092aa:	f200 8084 	bhi.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	2bc0      	cmp	r3, #192	; 0xc0
 80092b2:	d07d      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	2bc0      	cmp	r3, #192	; 0xc0
 80092b8:	d87d      	bhi.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	2b80      	cmp	r3, #128	; 0x80
 80092be:	d02d      	beq.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	2b80      	cmp	r3, #128	; 0x80
 80092c4:	d877      	bhi.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80092cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ce:	2b40      	cmp	r3, #64	; 0x40
 80092d0:	d012      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80092d2:	e070      	b.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092d4:	4b50      	ldr	r3, [pc, #320]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092e0:	d107      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 fec0 	bl	800a06c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092f0:	e3f1      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092f6:	e3ee      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092f8:	4b47      	ldr	r3, [pc, #284]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009304:	d107      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009306:	f107 0318 	add.w	r3, r7, #24
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fc06 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009314:	e3df      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800931a:	e3dc      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800931c:	4b3e      	ldr	r3, [pc, #248]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009328:	d107      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800932a:	f107 030c 	add.w	r3, r7, #12
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fd48 	bl	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009338:	e3cd      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800933e:	e3ca      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009340:	4b35      	ldr	r3, [pc, #212]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009344:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009348:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934a:	4b33      	ldr	r3, [pc, #204]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b04      	cmp	r3, #4
 8009354:	d10c      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	2b00      	cmp	r3, #0
 800935a:	d109      	bne.n	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800935c:	4b2e      	ldr	r3, [pc, #184]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	08db      	lsrs	r3, r3, #3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	4a2d      	ldr	r2, [pc, #180]	; (800941c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009368:	fa22 f303 	lsr.w	r3, r2, r3
 800936c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800936e:	e01e      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009370:	4b29      	ldr	r3, [pc, #164]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800937c:	d106      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800937e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009384:	d102      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009386:	4b26      	ldr	r3, [pc, #152]	; (8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938a:	e010      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800938c:	4b22      	ldr	r3, [pc, #136]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009398:	d106      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a0:	d102      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093a2:	4b20      	ldr	r3, [pc, #128]	; (8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a6:	e002      	b.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093ac:	e393      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80093ae:	e392      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80093b0:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b4:	e38f      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093ba:	e38c      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093c2:	f040 80a7 	bne.w	8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80093c6:	4b14      	ldr	r3, [pc, #80]	; (8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ca:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80093ce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093d6:	d05f      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80093de:	f200 8096 	bhi.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093e8:	f000 808e 	beq.w	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80093f2:	f200 808c 	bhi.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093fc:	d03a      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009404:	f200 8083 	bhi.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00e      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009414:	d01c      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009416:	e07a      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009418:	58024400 	.word	0x58024400
 800941c:	03d09000 	.word	0x03d09000
 8009420:	003d0900 	.word	0x003d0900
 8009424:	007a1200 	.word	0x007a1200
 8009428:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800942c:	4baa      	ldr	r3, [pc, #680]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009434:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009438:	d107      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800943a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fe14 	bl	800a06c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009448:	e345      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944e:	e342      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009450:	4ba1      	ldr	r3, [pc, #644]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800945e:	f107 0318 	add.w	r3, r7, #24
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fb5a 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800946c:	e333      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009472:	e330      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009474:	4b98      	ldr	r3, [pc, #608]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800947c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009480:	d107      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009482:	f107 030c 	add.w	r3, r7, #12
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fc9c 	bl	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009490:	e321      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009496:	e31e      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009498:	4b8f      	ldr	r3, [pc, #572]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800949a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800949c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094a0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094a2:	4b8d      	ldr	r3, [pc, #564]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d10c      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80094ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094b4:	4b88      	ldr	r3, [pc, #544]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	08db      	lsrs	r3, r3, #3
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	4a87      	ldr	r2, [pc, #540]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c6:	e01e      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094c8:	4b83      	ldr	r3, [pc, #524]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094d4:	d106      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094dc:	d102      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094de:	4b80      	ldr	r3, [pc, #512]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80094e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e2:	e010      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094e4:	4b7c      	ldr	r3, [pc, #496]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f0:	d106      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80094f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f8:	d102      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094fa:	4b7a      	ldr	r3, [pc, #488]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80094fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094fe:	e002      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009504:	e2e7      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009506:	e2e6      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009508:	4b77      	ldr	r3, [pc, #476]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800950a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800950c:	e2e3      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009512:	e2e0      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800951a:	f040 809c 	bne.w	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800951e:	4b6e      	ldr	r3, [pc, #440]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009522:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009526:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800952e:	d054      	beq.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009536:	f200 808b 	bhi.w	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009540:	f000 8083 	beq.w	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800954a:	f200 8081 	bhi.w	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009554:	d02f      	beq.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800955c:	d878      	bhi.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800956a:	d012      	beq.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800956c:	e070      	b.n	8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800956e:	4b5a      	ldr	r3, [pc, #360]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009576:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800957a:	d107      	bne.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800957c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009580:	4618      	mov	r0, r3
 8009582:	f000 fd73 	bl	800a06c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800958a:	e2a4      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009590:	e2a1      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009592:	4b51      	ldr	r3, [pc, #324]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800959a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800959e:	d107      	bne.n	80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095a0:	f107 0318 	add.w	r3, r7, #24
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fab9 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80095ae:	e292      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095b0:	2300      	movs	r3, #0
 80095b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095b4:	e28f      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095b6:	4b48      	ldr	r3, [pc, #288]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c2:	d107      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095c4:	f107 030c 	add.w	r3, r7, #12
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fbfb 	bl	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095d2:	e280      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095d8:	e27d      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095da:	4b3f      	ldr	r3, [pc, #252]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095e4:	4b3c      	ldr	r3, [pc, #240]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b04      	cmp	r3, #4
 80095ee:	d10c      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80095f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d109      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095f6:	4b38      	ldr	r3, [pc, #224]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	4a36      	ldr	r2, [pc, #216]	; (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009602:	fa22 f303 	lsr.w	r3, r2, r3
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009608:	e01e      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800960a:	4b33      	ldr	r3, [pc, #204]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009616:	d106      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8009618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800961e:	d102      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009620:	4b2f      	ldr	r3, [pc, #188]	; (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009624:	e010      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009626:	4b2c      	ldr	r3, [pc, #176]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800962e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009632:	d106      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8009634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800963a:	d102      	bne.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800963c:	4b29      	ldr	r3, [pc, #164]	; (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800963e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009640:	e002      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009642:	2300      	movs	r3, #0
 8009644:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009646:	e246      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009648:	e245      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800964a:	4b27      	ldr	r3, [pc, #156]	; (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800964c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800964e:	e242      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009654:	e23f      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800965c:	f040 80a8 	bne.w	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009660:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009664:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009668:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800966a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800966c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009670:	d060      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009678:	f200 8097 	bhi.w	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800967c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009682:	f000 808f 	beq.w	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009688:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800968c:	f200 808d 	bhi.w	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8009690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009696:	d03b      	beq.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8009698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969e:	f200 8084 	bhi.w	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d004      	beq.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ae:	d01d      	beq.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80096b0:	e07b      	b.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096be:	d107      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 fcd1 	bl	800a06c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096ce:	e202      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d4:	e1ff      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80096d6:	bf00      	nop
 80096d8:	58024400 	.word	0x58024400
 80096dc:	03d09000 	.word	0x03d09000
 80096e0:	003d0900 	.word	0x003d0900
 80096e4:	007a1200 	.word	0x007a1200
 80096e8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096ec:	4ba3      	ldr	r3, [pc, #652]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096f8:	d107      	bne.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096fa:	f107 0318 	add.w	r3, r7, #24
 80096fe:	4618      	mov	r0, r3
 8009700:	f000 fa0c 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009708:	e1e5      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800970e:	e1e2      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009710:	4b9a      	ldr	r3, [pc, #616]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800971c:	d107      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800971e:	f107 030c 	add.w	r3, r7, #12
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fb4e 	bl	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800972c:	e1d3      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009732:	e1d0      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009734:	4b91      	ldr	r3, [pc, #580]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009738:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800973c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800973e:	4b8f      	ldr	r3, [pc, #572]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0304 	and.w	r3, r3, #4
 8009746:	2b04      	cmp	r3, #4
 8009748:	d10c      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800974a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974c:	2b00      	cmp	r3, #0
 800974e:	d109      	bne.n	8009764 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009750:	4b8a      	ldr	r3, [pc, #552]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	08db      	lsrs	r3, r3, #3
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	4a89      	ldr	r2, [pc, #548]	; (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800975c:	fa22 f303 	lsr.w	r3, r2, r3
 8009760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009762:	e01e      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009764:	4b85      	ldr	r3, [pc, #532]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009770:	d106      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8009772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009778:	d102      	bne.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800977a:	4b82      	ldr	r3, [pc, #520]	; (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800977c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800977e:	e010      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009780:	4b7e      	ldr	r3, [pc, #504]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800978c:	d106      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800978e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009794:	d102      	bne.n	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009796:	4b7c      	ldr	r3, [pc, #496]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800979a:	e002      	b.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80097a0:	e199      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097a2:	e198      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80097a4:	4b79      	ldr	r3, [pc, #484]	; (800998c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80097a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097a8:	e195      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097ae:	e192      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80097b6:	d173      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80097b8:	4b70      	ldr	r3, [pc, #448]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097c0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097c8:	d02f      	beq.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097d0:	d863      	bhi.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d004      	beq.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097de:	d012      	beq.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80097e0:	e05b      	b.n	800989a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097e2:	4b66      	ldr	r3, [pc, #408]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097ee:	d107      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097f0:	f107 0318 	add.w	r3, r7, #24
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 f991 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097fe:	e16a      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009804:	e167      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009806:	4b5d      	ldr	r3, [pc, #372]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800980e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009812:	d107      	bne.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009814:	f107 030c 	add.w	r3, r7, #12
 8009818:	4618      	mov	r0, r3
 800981a:	f000 fad3 	bl	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009822:	e158      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009828:	e155      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800982a:	4b54      	ldr	r3, [pc, #336]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800982c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800982e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009832:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009834:	4b51      	ldr	r3, [pc, #324]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b04      	cmp	r3, #4
 800983e:	d10c      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8009840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009846:	4b4d      	ldr	r3, [pc, #308]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	08db      	lsrs	r3, r3, #3
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	4a4b      	ldr	r2, [pc, #300]	; (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009852:	fa22 f303 	lsr.w	r3, r2, r3
 8009856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009858:	e01e      	b.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800985a:	4b48      	ldr	r3, [pc, #288]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009866:	d106      	bne.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800986e:	d102      	bne.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009870:	4b44      	ldr	r3, [pc, #272]	; (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009874:	e010      	b.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009876:	4b41      	ldr	r3, [pc, #260]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009882:	d106      	bne.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8009884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800988a:	d102      	bne.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800988c:	4b3e      	ldr	r3, [pc, #248]	; (8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800988e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009890:	e002      	b.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009892:	2300      	movs	r3, #0
 8009894:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009896:	e11e      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009898:	e11d      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800989e:	e11a      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a6:	d133      	bne.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80098a8:	4b34      	ldr	r3, [pc, #208]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d004      	beq.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098be:	d012      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80098c0:	e023      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098c2:	4b2e      	ldr	r3, [pc, #184]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ce:	d107      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fbc9 	bl	800a06c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80098de:	e0fa      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098e4:	e0f7      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098e6:	4b25      	ldr	r3, [pc, #148]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098f2:	d107      	bne.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f4:	f107 0318 	add.w	r3, r7, #24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 f90f 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009902:	e0e8      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009908:	e0e5      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800990e:	e0e2      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009916:	f040 808f 	bne.w	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800991a:	4b18      	ldr	r3, [pc, #96]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800991c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009922:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800992a:	d075      	beq.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009932:	d87e      	bhi.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993a:	d060      	beq.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009942:	d876      	bhi.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800994a:	d045      	beq.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009952:	d86e      	bhi.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800995a:	d02b      	beq.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 800995c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009962:	d866      	bhi.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009970:	d00e      	beq.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009972:	e05e      	b.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009974:	f000 f8bc 	bl	8009af0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009978:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800997a:	e0ac      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800997c:	58024400 	.word	0x58024400
 8009980:	03d09000 	.word	0x03d09000
 8009984:	003d0900 	.word	0x003d0900
 8009988:	007a1200 	.word	0x007a1200
 800998c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009990:	4b53      	ldr	r3, [pc, #332]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800999c:	d107      	bne.n	80099ae <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800999e:	f107 0318 	add.w	r3, r7, #24
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f8ba 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099ac:	e093      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099b2:	e090      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099b4:	4b4a      	ldr	r3, [pc, #296]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099c0:	d107      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099c2:	f107 030c 	add.w	r3, r7, #12
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f9fc 	bl	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099d0:	e081      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099d6:	e07e      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80099d8:	4b41      	ldr	r3, [pc, #260]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0304 	and.w	r3, r3, #4
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d109      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099e4:	4b3e      	ldr	r3, [pc, #248]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	08db      	lsrs	r3, r3, #3
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	4a3d      	ldr	r2, [pc, #244]	; (8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80099f0:	fa22 f303 	lsr.w	r3, r2, r3
 80099f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80099f6:	e06e      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099fc:	e06b      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80099fe:	4b38      	ldr	r3, [pc, #224]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a0a:	d102      	bne.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8009a0c:	4b36      	ldr	r3, [pc, #216]	; (8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a10:	e061      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a16:	e05e      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a18:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a24:	d102      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8009a26:	4b31      	ldr	r3, [pc, #196]	; (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009a28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a2a:	e054      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a30:	e051      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a36:	e04e      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a3e:	d148      	bne.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009a40:	4b27      	ldr	r3, [pc, #156]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a48:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a50:	d02a      	beq.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a58:	d838      	bhi.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d004      	beq.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a66:	d00d      	beq.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009a68:	e030      	b.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a6a:	4b1d      	ldr	r3, [pc, #116]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a76:	d102      	bne.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8009a78:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a7c:	e02b      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a82:	e028      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a84:	4b16      	ldr	r3, [pc, #88]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a90:	d107      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 fae8 	bl	800a06c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009aa0:	e019      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aa6:	e016      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ab4:	d107      	bne.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ab6:	f107 0318 	add.w	r3, r7, #24
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 f82e 	bl	8009b1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ac4:	e007      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aca:	e004      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8009acc:	2300      	movs	r3, #0
 8009ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ad0:	e001      	b.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3740      	adds	r7, #64	; 0x40
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	58024400 	.word	0x58024400
 8009ae4:	03d09000 	.word	0x03d09000
 8009ae8:	003d0900 	.word	0x003d0900
 8009aec:	007a1200 	.word	0x007a1200

08009af0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009af4:	f7fe fbba 	bl	800826c <HAL_RCC_GetHCLKFreq>
 8009af8:	4602      	mov	r2, r0
 8009afa:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	091b      	lsrs	r3, r3, #4
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	4904      	ldr	r1, [pc, #16]	; (8009b18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b06:	5ccb      	ldrb	r3, [r1, r3]
 8009b08:	f003 031f 	and.w	r3, r3, #31
 8009b0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	58024400 	.word	0x58024400
 8009b18:	0800ea58 	.word	0x0800ea58

08009b1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b089      	sub	sp, #36	; 0x24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b24:	4ba1      	ldr	r3, [pc, #644]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b28:	f003 0303 	and.w	r3, r3, #3
 8009b2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009b2e:	4b9f      	ldr	r3, [pc, #636]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b32:	0b1b      	lsrs	r3, r3, #12
 8009b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b3a:	4b9c      	ldr	r3, [pc, #624]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	091b      	lsrs	r3, r3, #4
 8009b40:	f003 0301 	and.w	r3, r3, #1
 8009b44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b46:	4b99      	ldr	r3, [pc, #612]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4a:	08db      	lsrs	r3, r3, #3
 8009b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	fb02 f303 	mul.w	r3, r2, r3
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f000 8111 	beq.w	8009d8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	f000 8083 	beq.w	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	f200 80a1 	bhi.w	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d003      	beq.n	8009b88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d056      	beq.n	8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b86:	e099      	b.n	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b88:	4b88      	ldr	r3, [pc, #544]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0320 	and.w	r3, r3, #32
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d02d      	beq.n	8009bf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b94:	4b85      	ldr	r3, [pc, #532]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	08db      	lsrs	r3, r3, #3
 8009b9a:	f003 0303 	and.w	r3, r3, #3
 8009b9e:	4a84      	ldr	r2, [pc, #528]	; (8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	ee07 3a90 	vmov	s15, r3
 8009bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	ee07 3a90 	vmov	s15, r3
 8009bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bbe:	4b7b      	ldr	r3, [pc, #492]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009bee:	e087      	b.n	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	ee07 3a90 	vmov	s15, r3
 8009bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009db8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c02:	4b6a      	ldr	r3, [pc, #424]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c32:	e065      	b.n	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	ee07 3a90 	vmov	s15, r3
 8009c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c46:	4b59      	ldr	r3, [pc, #356]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c76:	e043      	b.n	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8a:	4b48      	ldr	r3, [pc, #288]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cba:	e021      	b.n	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cce:	4b37      	ldr	r3, [pc, #220]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ce2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009d00:	4b2a      	ldr	r3, [pc, #168]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	0a5b      	lsrs	r3, r3, #9
 8009d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d26:	ee17 2a90 	vmov	r2, s15
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009d2e:	4b1f      	ldr	r3, [pc, #124]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d32:	0c1b      	lsrs	r3, r3, #16
 8009d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d38:	ee07 3a90 	vmov	s15, r3
 8009d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d54:	ee17 2a90 	vmov	r2, s15
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009d5c:	4b13      	ldr	r3, [pc, #76]	; (8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	0e1b      	lsrs	r3, r3, #24
 8009d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d82:	ee17 2a90 	vmov	r2, s15
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d8a:	e008      	b.n	8009d9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	609a      	str	r2, [r3, #8]
}
 8009d9e:	bf00      	nop
 8009da0:	3724      	adds	r7, #36	; 0x24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	58024400 	.word	0x58024400
 8009db0:	03d09000 	.word	0x03d09000
 8009db4:	46000000 	.word	0x46000000
 8009db8:	4c742400 	.word	0x4c742400
 8009dbc:	4a742400 	.word	0x4a742400
 8009dc0:	4af42400 	.word	0x4af42400

08009dc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b089      	sub	sp, #36	; 0x24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dcc:	4ba1      	ldr	r3, [pc, #644]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd0:	f003 0303 	and.w	r3, r3, #3
 8009dd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009dd6:	4b9f      	ldr	r3, [pc, #636]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dda:	0d1b      	lsrs	r3, r3, #20
 8009ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009de0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009de2:	4b9c      	ldr	r3, [pc, #624]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009dee:	4b99      	ldr	r3, [pc, #612]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df2:	08db      	lsrs	r3, r3, #3
 8009df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	fb02 f303 	mul.w	r3, r2, r3
 8009dfe:	ee07 3a90 	vmov	s15, r3
 8009e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8111 	beq.w	800a034 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	f000 8083 	beq.w	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	f200 80a1 	bhi.w	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d056      	beq.n	8009edc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e2e:	e099      	b.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e30:	4b88      	ldr	r3, [pc, #544]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d02d      	beq.n	8009e98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e3c:	4b85      	ldr	r3, [pc, #532]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	08db      	lsrs	r3, r3, #3
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	4a84      	ldr	r2, [pc, #528]	; (800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e48:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	ee07 3a90 	vmov	s15, r3
 8009e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e66:	4b7b      	ldr	r3, [pc, #492]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009e96:	e087      	b.n	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a060 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eaa:	4b6a      	ldr	r3, [pc, #424]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ebe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eda:	e065      	b.n	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b59      	ldr	r3, [pc, #356]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f1e:	e043      	b.n	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f32:	4b48      	ldr	r3, [pc, #288]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f62:	e021      	b.n	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f76:	4b37      	ldr	r3, [pc, #220]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009fa8:	4b2a      	ldr	r3, [pc, #168]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fac:	0a5b      	lsrs	r3, r3, #9
 8009fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fce:	ee17 2a90 	vmov	r2, s15
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009fd6:	4b1f      	ldr	r3, [pc, #124]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	0c1b      	lsrs	r3, r3, #16
 8009fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fe0:	ee07 3a90 	vmov	s15, r3
 8009fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ffc:	ee17 2a90 	vmov	r2, s15
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a004:	4b13      	ldr	r3, [pc, #76]	; (800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a008:	0e1b      	lsrs	r3, r3, #24
 800a00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a01a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a01e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a02a:	ee17 2a90 	vmov	r2, s15
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a032:	e008      	b.n	800a046 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	609a      	str	r2, [r3, #8]
}
 800a046:	bf00      	nop
 800a048:	3724      	adds	r7, #36	; 0x24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	58024400 	.word	0x58024400
 800a058:	03d09000 	.word	0x03d09000
 800a05c:	46000000 	.word	0x46000000
 800a060:	4c742400 	.word	0x4c742400
 800a064:	4a742400 	.word	0x4a742400
 800a068:	4af42400 	.word	0x4af42400

0800a06c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b089      	sub	sp, #36	; 0x24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a074:	4ba0      	ldr	r3, [pc, #640]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a078:	f003 0303 	and.w	r3, r3, #3
 800a07c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a07e:	4b9e      	ldr	r3, [pc, #632]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	091b      	lsrs	r3, r3, #4
 800a084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a088:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a08a:	4b9b      	ldr	r3, [pc, #620]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a094:	4b98      	ldr	r3, [pc, #608]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a098:	08db      	lsrs	r3, r3, #3
 800a09a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	fb02 f303 	mul.w	r3, r2, r3
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f000 8111 	beq.w	800a2da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	f000 8083 	beq.w	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	f200 80a1 	bhi.w	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d056      	beq.n	800a182 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a0d4:	e099      	b.n	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0d6:	4b88      	ldr	r3, [pc, #544]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d02d      	beq.n	800a13e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0e2:	4b85      	ldr	r3, [pc, #532]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	08db      	lsrs	r3, r3, #3
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	4a83      	ldr	r2, [pc, #524]	; (800a2fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a0ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	ee07 3a90 	vmov	s15, r3
 800a0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	ee07 3a90 	vmov	s15, r3
 800a104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10c:	4b7a      	ldr	r3, [pc, #488]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a114:	ee07 3a90 	vmov	s15, r3
 800a118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a120:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a138:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a13c:	e087      	b.n	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	ee07 3a90 	vmov	s15, r3
 800a144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a148:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a304 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a14c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a150:	4b69      	ldr	r3, [pc, #420]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a160:	ed97 6a03 	vldr	s12, [r7, #12]
 800a164:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a180:	e065      	b.n	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	ee07 3a90 	vmov	s15, r3
 800a188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a308 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a194:	4b58      	ldr	r3, [pc, #352]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1c4:	e043      	b.n	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	ee07 3a90 	vmov	s15, r3
 800a1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a30c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a1d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d8:	4b47      	ldr	r3, [pc, #284]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a204:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a208:	e021      	b.n	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	ee07 3a90 	vmov	s15, r3
 800a210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a214:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a304 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21c:	4b36      	ldr	r3, [pc, #216]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a230:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a300 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a248:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a24c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a24e:	4b2a      	ldr	r3, [pc, #168]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	0a5b      	lsrs	r3, r3, #9
 800a254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a258:	ee07 3a90 	vmov	s15, r3
 800a25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a264:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a268:	edd7 6a07 	vldr	s13, [r7, #28]
 800a26c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a274:	ee17 2a90 	vmov	r2, s15
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a27c:	4b1e      	ldr	r3, [pc, #120]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a280:	0c1b      	lsrs	r3, r3, #16
 800a282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a286:	ee07 3a90 	vmov	s15, r3
 800a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a292:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a296:	edd7 6a07 	vldr	s13, [r7, #28]
 800a29a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a29e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2a2:	ee17 2a90 	vmov	r2, s15
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a2aa:	4b13      	ldr	r3, [pc, #76]	; (800a2f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ae:	0e1b      	lsrs	r3, r3, #24
 800a2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2d0:	ee17 2a90 	vmov	r2, s15
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a2d8:	e008      	b.n	800a2ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	609a      	str	r2, [r3, #8]
}
 800a2ec:	bf00      	nop
 800a2ee:	3724      	adds	r7, #36	; 0x24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	58024400 	.word	0x58024400
 800a2fc:	03d09000 	.word	0x03d09000
 800a300:	46000000 	.word	0x46000000
 800a304:	4c742400 	.word	0x4c742400
 800a308:	4a742400 	.word	0x4a742400
 800a30c:	4af42400 	.word	0x4af42400

0800a310 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a31e:	4b53      	ldr	r3, [pc, #332]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b03      	cmp	r3, #3
 800a328:	d101      	bne.n	800a32e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e099      	b.n	800a462 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a32e:	4b4f      	ldr	r3, [pc, #316]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a4e      	ldr	r2, [pc, #312]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a334:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a33a:	f7f6 ff47 	bl	80011cc <HAL_GetTick>
 800a33e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a340:	e008      	b.n	800a354 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a342:	f7f6 ff43 	bl	80011cc <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d901      	bls.n	800a354 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a350:	2303      	movs	r3, #3
 800a352:	e086      	b.n	800a462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a354:	4b45      	ldr	r3, [pc, #276]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1f0      	bne.n	800a342 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a360:	4b42      	ldr	r3, [pc, #264]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	031b      	lsls	r3, r3, #12
 800a36e:	493f      	ldr	r1, [pc, #252]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a370:	4313      	orrs	r3, r2
 800a372:	628b      	str	r3, [r1, #40]	; 0x28
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	3b01      	subs	r3, #1
 800a37a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	3b01      	subs	r3, #1
 800a384:	025b      	lsls	r3, r3, #9
 800a386:	b29b      	uxth	r3, r3
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	3b01      	subs	r3, #1
 800a390:	041b      	lsls	r3, r3, #16
 800a392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	3b01      	subs	r3, #1
 800a39e:	061b      	lsls	r3, r3, #24
 800a3a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3a4:	4931      	ldr	r1, [pc, #196]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a3aa:	4b30      	ldr	r3, [pc, #192]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	695b      	ldr	r3, [r3, #20]
 800a3b6:	492d      	ldr	r1, [pc, #180]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a3bc:	4b2b      	ldr	r3, [pc, #172]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	f023 0220 	bic.w	r2, r3, #32
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	4928      	ldr	r1, [pc, #160]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a3ce:	4b27      	ldr	r3, [pc, #156]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d2:	4a26      	ldr	r2, [pc, #152]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3d4:	f023 0310 	bic.w	r3, r3, #16
 800a3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a3da:	4b24      	ldr	r3, [pc, #144]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3de:	4b24      	ldr	r3, [pc, #144]	; (800a470 <RCCEx_PLL2_Config+0x160>)
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	69d2      	ldr	r2, [r2, #28]
 800a3e6:	00d2      	lsls	r2, r2, #3
 800a3e8:	4920      	ldr	r1, [pc, #128]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a3ee:	4b1f      	ldr	r3, [pc, #124]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	4a1e      	ldr	r2, [pc, #120]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a3f4:	f043 0310 	orr.w	r3, r3, #16
 800a3f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d106      	bne.n	800a40e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a400:	4b1a      	ldr	r3, [pc, #104]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	4a19      	ldr	r2, [pc, #100]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a40a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a40c:	e00f      	b.n	800a42e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d106      	bne.n	800a422 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a414:	4b15      	ldr	r3, [pc, #84]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4a14      	ldr	r2, [pc, #80]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a41a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a41e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a420:	e005      	b.n	800a42e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a422:	4b12      	ldr	r3, [pc, #72]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	4a11      	ldr	r2, [pc, #68]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a42c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a42e:	4b0f      	ldr	r3, [pc, #60]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a0e      	ldr	r2, [pc, #56]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a434:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a43a:	f7f6 fec7 	bl	80011cc <HAL_GetTick>
 800a43e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a440:	e008      	b.n	800a454 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a442:	f7f6 fec3 	bl	80011cc <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d901      	bls.n	800a454 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e006      	b.n	800a462 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <RCCEx_PLL2_Config+0x15c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0f0      	beq.n	800a442 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	58024400 	.word	0x58024400
 800a470:	ffff0007 	.word	0xffff0007

0800a474 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a482:	4b53      	ldr	r3, [pc, #332]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a486:	f003 0303 	and.w	r3, r3, #3
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d101      	bne.n	800a492 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e099      	b.n	800a5c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a492:	4b4f      	ldr	r3, [pc, #316]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a4e      	ldr	r2, [pc, #312]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a49c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a49e:	f7f6 fe95 	bl	80011cc <HAL_GetTick>
 800a4a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4a4:	e008      	b.n	800a4b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a4a6:	f7f6 fe91 	bl	80011cc <HAL_GetTick>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d901      	bls.n	800a4b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e086      	b.n	800a5c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a4b8:	4b45      	ldr	r3, [pc, #276]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f0      	bne.n	800a4a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a4c4:	4b42      	ldr	r3, [pc, #264]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	051b      	lsls	r3, r3, #20
 800a4d2:	493f      	ldr	r1, [pc, #252]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	628b      	str	r3, [r1, #40]	; 0x28
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	025b      	lsls	r3, r3, #9
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	041b      	lsls	r3, r3, #16
 800a4f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4fa:	431a      	orrs	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	3b01      	subs	r3, #1
 800a502:	061b      	lsls	r3, r3, #24
 800a504:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a508:	4931      	ldr	r1, [pc, #196]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a50e:	4b30      	ldr	r3, [pc, #192]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	492d      	ldr	r1, [pc, #180]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a520:	4b2b      	ldr	r3, [pc, #172]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	4928      	ldr	r1, [pc, #160]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a532:	4b27      	ldr	r3, [pc, #156]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	4a26      	ldr	r2, [pc, #152]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a53c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a53e:	4b24      	ldr	r3, [pc, #144]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a542:	4b24      	ldr	r3, [pc, #144]	; (800a5d4 <RCCEx_PLL3_Config+0x160>)
 800a544:	4013      	ands	r3, r2
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	69d2      	ldr	r2, [r2, #28]
 800a54a:	00d2      	lsls	r2, r2, #3
 800a54c:	4920      	ldr	r1, [pc, #128]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a54e:	4313      	orrs	r3, r2
 800a550:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a552:	4b1f      	ldr	r3, [pc, #124]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a556:	4a1e      	ldr	r2, [pc, #120]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a55c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d106      	bne.n	800a572 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a564:	4b1a      	ldr	r3, [pc, #104]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	4a19      	ldr	r2, [pc, #100]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a56a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a56e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a570:	e00f      	b.n	800a592 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d106      	bne.n	800a586 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a578:	4b15      	ldr	r3, [pc, #84]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	4a14      	ldr	r2, [pc, #80]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a57e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a582:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a584:	e005      	b.n	800a592 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a586:	4b12      	ldr	r3, [pc, #72]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58a:	4a11      	ldr	r2, [pc, #68]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a58c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a590:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a592:	4b0f      	ldr	r3, [pc, #60]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a0e      	ldr	r2, [pc, #56]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a59c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a59e:	f7f6 fe15 	bl	80011cc <HAL_GetTick>
 800a5a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5a4:	e008      	b.n	800a5b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a5a6:	f7f6 fe11 	bl	80011cc <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d901      	bls.n	800a5b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e006      	b.n	800a5c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5b8:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <RCCEx_PLL3_Config+0x15c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d0f0      	beq.n	800a5a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	58024400 	.word	0x58024400
 800a5d4:	ffff0007 	.word	0xffff0007

0800a5d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d067      	beq.n	800a6ba <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d106      	bne.n	800a604 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7f6 fbea 	bl	8000dd8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2202      	movs	r2, #2
 800a608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	22ca      	movs	r2, #202	; 0xca
 800a612:	625a      	str	r2, [r3, #36]	; 0x24
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2253      	movs	r2, #83	; 0x53
 800a61a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f879 	bl	800a714 <RTC_EnterInitMode>
 800a622:	4603      	mov	r3, r0
 800a624:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d13b      	bne.n	800a6a4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6899      	ldr	r1, [r3, #8]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4b23      	ldr	r3, [pc, #140]	; (800a6c4 <HAL_RTC_Init+0xec>)
 800a638:	400b      	ands	r3, r1
 800a63a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6899      	ldr	r1, [r3, #8]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	431a      	orrs	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	431a      	orrs	r2, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	0419      	lsls	r1, r3, #16
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68da      	ldr	r2, [r3, #12]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f885 	bl	800a77c <RTC_ExitInitMode>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d113      	bne.n	800a6a4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0203 	bic.w	r2, r2, #3
 800a68a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	69da      	ldr	r2, [r3, #28]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	695b      	ldr	r3, [r3, #20]
 800a69a:	431a      	orrs	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	430a      	orrs	r2, r1
 800a6a2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	22ff      	movs	r2, #255	; 0xff
 800a6aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	ff8fffbf 	.word	0xff8fffbf

0800a6c8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a6de:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800a6e0:	f7f6 fd74 	bl	80011cc <HAL_GetTick>
 800a6e4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6e6:	e009      	b.n	800a6fc <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6e8:	f7f6 fd70 	bl	80011cc <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6f6:	d901      	bls.n	800a6fc <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e007      	b.n	800a70c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0ee      	beq.n	800a6e8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d120      	bne.n	800a770 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f04f 32ff 	mov.w	r2, #4294967295
 800a736:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a738:	f7f6 fd48 	bl	80011cc <HAL_GetTick>
 800a73c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a73e:	e00d      	b.n	800a75c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a740:	f7f6 fd44 	bl	80011cc <HAL_GetTick>
 800a744:	4602      	mov	r2, r0
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a74e:	d905      	bls.n	800a75c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2203      	movs	r2, #3
 800a758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a766:	2b00      	cmp	r3, #0
 800a768:	d102      	bne.n	800a770 <RTC_EnterInitMode+0x5c>
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d1e7      	bne.n	800a740 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a788:	4b1a      	ldr	r3, [pc, #104]	; (800a7f4 <RTC_ExitInitMode+0x78>)
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	4a19      	ldr	r2, [pc, #100]	; (800a7f4 <RTC_ExitInitMode+0x78>)
 800a78e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a792:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a794:	4b17      	ldr	r3, [pc, #92]	; (800a7f4 <RTC_ExitInitMode+0x78>)
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f003 0320 	and.w	r3, r3, #32
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10c      	bne.n	800a7ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff91 	bl	800a6c8 <HAL_RTC_WaitForSynchro>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d01e      	beq.n	800a7ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2203      	movs	r2, #3
 800a7b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	73fb      	strb	r3, [r7, #15]
 800a7b8:	e017      	b.n	800a7ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7ba:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <RTC_ExitInitMode+0x78>)
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	4a0d      	ldr	r2, [pc, #52]	; (800a7f4 <RTC_ExitInitMode+0x78>)
 800a7c0:	f023 0320 	bic.w	r3, r3, #32
 800a7c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f7ff ff7e 	bl	800a6c8 <HAL_RTC_WaitForSynchro>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d005      	beq.n	800a7de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2203      	movs	r2, #3
 800a7d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a7de:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <RTC_ExitInitMode+0x78>)
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	4a04      	ldr	r2, [pc, #16]	; (800a7f4 <RTC_ExitInitMode+0x78>)
 800a7e4:	f043 0320 	orr.w	r3, r3, #32
 800a7e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	58004000 	.word	0x58004000

0800a7f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e049      	b.n	800a89e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a810:	b2db      	uxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	d106      	bne.n	800a824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7f6 fb0a 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3304      	adds	r3, #4
 800a834:	4619      	mov	r1, r3
 800a836:	4610      	mov	r0, r2
 800a838:	f000 f9f6 	bl	800ac28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d001      	beq.n	800a8c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e054      	b.n	800a96a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68da      	ldr	r2, [r3, #12]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0201 	orr.w	r2, r2, #1
 800a8d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a26      	ldr	r2, [pc, #152]	; (800a978 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d022      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x80>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ea:	d01d      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x80>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a22      	ldr	r2, [pc, #136]	; (800a97c <HAL_TIM_Base_Start_IT+0xd4>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d018      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x80>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a21      	ldr	r2, [pc, #132]	; (800a980 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d013      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x80>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1f      	ldr	r2, [pc, #124]	; (800a984 <HAL_TIM_Base_Start_IT+0xdc>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d00e      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x80>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a1e      	ldr	r2, [pc, #120]	; (800a988 <HAL_TIM_Base_Start_IT+0xe0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d009      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x80>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a1c      	ldr	r2, [pc, #112]	; (800a98c <HAL_TIM_Base_Start_IT+0xe4>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d004      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x80>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a1b      	ldr	r2, [pc, #108]	; (800a990 <HAL_TIM_Base_Start_IT+0xe8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d115      	bne.n	800a954 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689a      	ldr	r2, [r3, #8]
 800a92e:	4b19      	ldr	r3, [pc, #100]	; (800a994 <HAL_TIM_Base_Start_IT+0xec>)
 800a930:	4013      	ands	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b06      	cmp	r3, #6
 800a938:	d015      	beq.n	800a966 <HAL_TIM_Base_Start_IT+0xbe>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a940:	d011      	beq.n	800a966 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f042 0201 	orr.w	r2, r2, #1
 800a950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a952:	e008      	b.n	800a966 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f042 0201 	orr.w	r2, r2, #1
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	e000      	b.n	800a968 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3714      	adds	r7, #20
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40010000 	.word	0x40010000
 800a97c:	40000400 	.word	0x40000400
 800a980:	40000800 	.word	0x40000800
 800a984:	40000c00 	.word	0x40000c00
 800a988:	40010400 	.word	0x40010400
 800a98c:	40001800 	.word	0x40001800
 800a990:	40014000 	.word	0x40014000
 800a994:	00010007 	.word	0x00010007

0800a998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0302 	and.w	r3, r3, #2
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d122      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d11b      	bne.n	800a9f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f06f 0202 	mvn.w	r2, #2
 800a9c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	f003 0303 	and.w	r3, r3, #3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f905 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800a9e0:	e005      	b.n	800a9ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f8f7 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f908 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	f003 0304 	and.w	r3, r3, #4
 800a9fe:	2b04      	cmp	r3, #4
 800aa00:	d122      	bne.n	800aa48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b04      	cmp	r3, #4
 800aa0e:	d11b      	bne.n	800aa48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f06f 0204 	mvn.w	r2, #4
 800aa18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f8db 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800aa34:	e005      	b.n	800aa42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 f8cd 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f8de 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	f003 0308 	and.w	r3, r3, #8
 800aa52:	2b08      	cmp	r3, #8
 800aa54:	d122      	bne.n	800aa9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0308 	and.w	r3, r3, #8
 800aa60:	2b08      	cmp	r3, #8
 800aa62:	d11b      	bne.n	800aa9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0208 	mvn.w	r2, #8
 800aa6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2204      	movs	r2, #4
 800aa72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	f003 0303 	and.w	r3, r3, #3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f8b1 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800aa88:	e005      	b.n	800aa96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f8a3 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f8b4 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	f003 0310 	and.w	r3, r3, #16
 800aaa6:	2b10      	cmp	r3, #16
 800aaa8:	d122      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	f003 0310 	and.w	r3, r3, #16
 800aab4:	2b10      	cmp	r3, #16
 800aab6:	d11b      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f06f 0210 	mvn.w	r2, #16
 800aac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2208      	movs	r2, #8
 800aac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f887 	bl	800abea <HAL_TIM_IC_CaptureCallback>
 800aadc:	e005      	b.n	800aaea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f879 	bl	800abd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f88a 	bl	800abfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d10e      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d107      	bne.n	800ab1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f06f 0201 	mvn.w	r2, #1
 800ab14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7f5 ff16 	bl	8000948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab26:	2b80      	cmp	r3, #128	; 0x80
 800ab28:	d10e      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab34:	2b80      	cmp	r3, #128	; 0x80
 800ab36:	d107      	bne.n	800ab48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f914 	bl	800ad70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab56:	d10e      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab62:	2b80      	cmp	r3, #128	; 0x80
 800ab64:	d107      	bne.n	800ab76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f907 	bl	800ad84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab80:	2b40      	cmp	r3, #64	; 0x40
 800ab82:	d10e      	bne.n	800aba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68db      	ldr	r3, [r3, #12]
 800ab8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8e:	2b40      	cmp	r3, #64	; 0x40
 800ab90:	d107      	bne.n	800aba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f838 	bl	800ac12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f003 0320 	and.w	r3, r3, #32
 800abac:	2b20      	cmp	r3, #32
 800abae:	d10e      	bne.n	800abce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	f003 0320 	and.w	r3, r3, #32
 800abba:	2b20      	cmp	r3, #32
 800abbc:	d107      	bne.n	800abce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f06f 0220 	mvn.w	r2, #32
 800abc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f8c7 	bl	800ad5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr

0800abfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b083      	sub	sp, #12
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac06:	bf00      	nop
 800ac08:	370c      	adds	r7, #12
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr

0800ac12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a40      	ldr	r2, [pc, #256]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d013      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac46:	d00f      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a3d      	ldr	r2, [pc, #244]	; (800ad40 <TIM_Base_SetConfig+0x118>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00b      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a3c      	ldr	r2, [pc, #240]	; (800ad44 <TIM_Base_SetConfig+0x11c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d007      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a3b      	ldr	r2, [pc, #236]	; (800ad48 <TIM_Base_SetConfig+0x120>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d003      	beq.n	800ac68 <TIM_Base_SetConfig+0x40>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a3a      	ldr	r2, [pc, #232]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d108      	bne.n	800ac7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a2f      	ldr	r2, [pc, #188]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d01f      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac88:	d01b      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a2c      	ldr	r2, [pc, #176]	; (800ad40 <TIM_Base_SetConfig+0x118>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d017      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a2b      	ldr	r2, [pc, #172]	; (800ad44 <TIM_Base_SetConfig+0x11c>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d013      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a2a      	ldr	r2, [pc, #168]	; (800ad48 <TIM_Base_SetConfig+0x120>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00f      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a29      	ldr	r2, [pc, #164]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d00b      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a28      	ldr	r2, [pc, #160]	; (800ad50 <TIM_Base_SetConfig+0x128>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d007      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a27      	ldr	r2, [pc, #156]	; (800ad54 <TIM_Base_SetConfig+0x12c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d003      	beq.n	800acc2 <TIM_Base_SetConfig+0x9a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a26      	ldr	r2, [pc, #152]	; (800ad58 <TIM_Base_SetConfig+0x130>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d108      	bne.n	800acd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a10      	ldr	r2, [pc, #64]	; (800ad3c <TIM_Base_SetConfig+0x114>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00f      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a12      	ldr	r2, [pc, #72]	; (800ad4c <TIM_Base_SetConfig+0x124>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00b      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a11      	ldr	r2, [pc, #68]	; (800ad50 <TIM_Base_SetConfig+0x128>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d007      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a10      	ldr	r2, [pc, #64]	; (800ad54 <TIM_Base_SetConfig+0x12c>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d003      	beq.n	800ad20 <TIM_Base_SetConfig+0xf8>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a0f      	ldr	r2, [pc, #60]	; (800ad58 <TIM_Base_SetConfig+0x130>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d103      	bne.n	800ad28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	691a      	ldr	r2, [r3, #16]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	615a      	str	r2, [r3, #20]
}
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40010000 	.word	0x40010000
 800ad40:	40000400 	.word	0x40000400
 800ad44:	40000800 	.word	0x40000800
 800ad48:	40000c00 	.word	0x40000c00
 800ad4c:	40010400 	.word	0x40010400
 800ad50:	40014000 	.word	0x40014000
 800ad54:	40014400 	.word	0x40014400
 800ad58:	40014800 	.word	0x40014800

0800ad5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad78:	bf00      	nop
 800ad7a:	370c      	adds	r7, #12
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad8c:	bf00      	nop
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad98:	b084      	sub	sp, #16
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	f107 001c 	add.w	r0, r7, #28
 800ada6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	2b01      	cmp	r3, #1
 800adae:	d120      	bne.n	800adf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68da      	ldr	r2, [r3, #12]
 800adc0:	4b2a      	ldr	r3, [pc, #168]	; (800ae6c <USB_CoreInit+0xd4>)
 800adc2:	4013      	ands	r3, r2
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800add4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800add6:	2b01      	cmp	r3, #1
 800add8:	d105      	bne.n	800ade6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 fb4e 	bl	800c488 <USB_CoreReset>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
 800adf0:	e01a      	b.n	800ae28 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f001 fb42 	bl	800c488 <USB_CoreReset>
 800ae04:	4603      	mov	r3, r0
 800ae06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ae08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	639a      	str	r2, [r3, #56]	; 0x38
 800ae1a:	e005      	b.n	800ae28 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d116      	bne.n	800ae5c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae3c:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <USB_CoreInit+0xd8>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f043 0206 	orr.w	r2, r3, #6
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f043 0220 	orr.w	r2, r3, #32
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ae5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae68:	b004      	add	sp, #16
 800ae6a:	4770      	bx	lr
 800ae6c:	ffbdffbf 	.word	0xffbdffbf
 800ae70:	03ee0000 	.word	0x03ee0000

0800ae74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d165      	bne.n	800af54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	4a41      	ldr	r2, [pc, #260]	; (800af90 <USB_SetTurnaroundTime+0x11c>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d906      	bls.n	800ae9e <USB_SetTurnaroundTime+0x2a>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4a40      	ldr	r2, [pc, #256]	; (800af94 <USB_SetTurnaroundTime+0x120>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d202      	bcs.n	800ae9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ae98:	230f      	movs	r3, #15
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e062      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	4a3c      	ldr	r2, [pc, #240]	; (800af94 <USB_SetTurnaroundTime+0x120>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d306      	bcc.n	800aeb4 <USB_SetTurnaroundTime+0x40>
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	4a3b      	ldr	r2, [pc, #236]	; (800af98 <USB_SetTurnaroundTime+0x124>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d202      	bcs.n	800aeb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aeae:	230e      	movs	r3, #14
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	e057      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	4a38      	ldr	r2, [pc, #224]	; (800af98 <USB_SetTurnaroundTime+0x124>)
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d306      	bcc.n	800aeca <USB_SetTurnaroundTime+0x56>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4a37      	ldr	r2, [pc, #220]	; (800af9c <USB_SetTurnaroundTime+0x128>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d202      	bcs.n	800aeca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aec4:	230d      	movs	r3, #13
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	e04c      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4a33      	ldr	r2, [pc, #204]	; (800af9c <USB_SetTurnaroundTime+0x128>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d306      	bcc.n	800aee0 <USB_SetTurnaroundTime+0x6c>
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	4a32      	ldr	r2, [pc, #200]	; (800afa0 <USB_SetTurnaroundTime+0x12c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d802      	bhi.n	800aee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aeda:	230c      	movs	r3, #12
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	e041      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	4a2f      	ldr	r2, [pc, #188]	; (800afa0 <USB_SetTurnaroundTime+0x12c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d906      	bls.n	800aef6 <USB_SetTurnaroundTime+0x82>
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4a2e      	ldr	r2, [pc, #184]	; (800afa4 <USB_SetTurnaroundTime+0x130>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d802      	bhi.n	800aef6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aef0:	230b      	movs	r3, #11
 800aef2:	617b      	str	r3, [r7, #20]
 800aef4:	e036      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4a2a      	ldr	r2, [pc, #168]	; (800afa4 <USB_SetTurnaroundTime+0x130>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d906      	bls.n	800af0c <USB_SetTurnaroundTime+0x98>
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	4a29      	ldr	r2, [pc, #164]	; (800afa8 <USB_SetTurnaroundTime+0x134>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d802      	bhi.n	800af0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800af06:	230a      	movs	r3, #10
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	e02b      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	4a26      	ldr	r2, [pc, #152]	; (800afa8 <USB_SetTurnaroundTime+0x134>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d906      	bls.n	800af22 <USB_SetTurnaroundTime+0xae>
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4a25      	ldr	r2, [pc, #148]	; (800afac <USB_SetTurnaroundTime+0x138>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d202      	bcs.n	800af22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800af1c:	2309      	movs	r3, #9
 800af1e:	617b      	str	r3, [r7, #20]
 800af20:	e020      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	4a21      	ldr	r2, [pc, #132]	; (800afac <USB_SetTurnaroundTime+0x138>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d306      	bcc.n	800af38 <USB_SetTurnaroundTime+0xc4>
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	4a20      	ldr	r2, [pc, #128]	; (800afb0 <USB_SetTurnaroundTime+0x13c>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d802      	bhi.n	800af38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800af32:	2308      	movs	r3, #8
 800af34:	617b      	str	r3, [r7, #20]
 800af36:	e015      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4a1d      	ldr	r2, [pc, #116]	; (800afb0 <USB_SetTurnaroundTime+0x13c>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d906      	bls.n	800af4e <USB_SetTurnaroundTime+0xda>
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	4a1c      	ldr	r2, [pc, #112]	; (800afb4 <USB_SetTurnaroundTime+0x140>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d202      	bcs.n	800af4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800af48:	2307      	movs	r3, #7
 800af4a:	617b      	str	r3, [r7, #20]
 800af4c:	e00a      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800af4e:	2306      	movs	r3, #6
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	e007      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d102      	bne.n	800af60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800af5a:	2309      	movs	r3, #9
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	e001      	b.n	800af64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800af60:	2309      	movs	r3, #9
 800af62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	68da      	ldr	r2, [r3, #12]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	029b      	lsls	r3, r3, #10
 800af78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800af7c:	431a      	orrs	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	371c      	adds	r7, #28
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	00d8acbf 	.word	0x00d8acbf
 800af94:	00e4e1c0 	.word	0x00e4e1c0
 800af98:	00f42400 	.word	0x00f42400
 800af9c:	01067380 	.word	0x01067380
 800afa0:	011a499f 	.word	0x011a499f
 800afa4:	01312cff 	.word	0x01312cff
 800afa8:	014ca43f 	.word	0x014ca43f
 800afac:	016e3600 	.word	0x016e3600
 800afb0:	01a6ab1f 	.word	0x01a6ab1f
 800afb4:	01e84800 	.word	0x01e84800

0800afb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	f043 0201 	orr.w	r2, r3, #1
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f023 0201 	bic.w	r2, r3, #1
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d115      	bne.n	800b04a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b02a:	2001      	movs	r0, #1
 800b02c:	f7f6 f8da 	bl	80011e4 <HAL_Delay>
      ms++;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 f995 	bl	800c366 <USB_GetMode>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d01e      	beq.n	800b080 <USB_SetCurrentMode+0x84>
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b31      	cmp	r3, #49	; 0x31
 800b046:	d9f0      	bls.n	800b02a <USB_SetCurrentMode+0x2e>
 800b048:	e01a      	b.n	800b080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d115      	bne.n	800b07c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b05c:	2001      	movs	r0, #1
 800b05e:	f7f6 f8c1 	bl	80011e4 <HAL_Delay>
      ms++;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3301      	adds	r3, #1
 800b066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f001 f97c 	bl	800c366 <USB_GetMode>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <USB_SetCurrentMode+0x84>
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b31      	cmp	r3, #49	; 0x31
 800b078:	d9f0      	bls.n	800b05c <USB_SetCurrentMode+0x60>
 800b07a:	e001      	b.n	800b080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e005      	b.n	800b08c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b32      	cmp	r3, #50	; 0x32
 800b084:	d101      	bne.n	800b08a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b094:	b084      	sub	sp, #16
 800b096:	b580      	push	{r7, lr}
 800b098:	b086      	sub	sp, #24
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b0a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
 800b0b2:	e009      	b.n	800b0c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	3340      	adds	r3, #64	; 0x40
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	2200      	movs	r2, #0
 800b0c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b0e      	cmp	r3, #14
 800b0cc:	d9f2      	bls.n	800b0b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d11c      	bne.n	800b10e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0e2:	f043 0302 	orr.w	r3, r3, #2
 800b0e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	601a      	str	r2, [r3, #0]
 800b10c:	e005      	b.n	800b11a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b120:	461a      	mov	r2, r3
 800b122:	2300      	movs	r3, #0
 800b124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12c:	4619      	mov	r1, r3
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b134:	461a      	mov	r2, r3
 800b136:	680b      	ldr	r3, [r1, #0]
 800b138:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d10c      	bne.n	800b15a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d104      	bne.n	800b150 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b146:	2100      	movs	r1, #0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f961 	bl	800b410 <USB_SetDevSpeed>
 800b14e:	e008      	b.n	800b162 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b150:	2101      	movs	r1, #1
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f95c 	bl	800b410 <USB_SetDevSpeed>
 800b158:	e003      	b.n	800b162 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b15a:	2103      	movs	r1, #3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f957 	bl	800b410 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b162:	2110      	movs	r1, #16
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f8f3 	bl	800b350 <USB_FlushTxFifo>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f91d 	bl	800b3b4 <USB_FlushRxFifo>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b18a:	461a      	mov	r2, r3
 800b18c:	2300      	movs	r3, #0
 800b18e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b196:	461a      	mov	r2, r3
 800b198:	2300      	movs	r3, #0
 800b19a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	613b      	str	r3, [r7, #16]
 800b1ac:	e043      	b.n	800b236 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1c4:	d118      	bne.n	800b1f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	461a      	mov	r2, r3
 800b1da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1de:	6013      	str	r3, [r2, #0]
 800b1e0:	e013      	b.n	800b20a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	015a      	lsls	r2, r3, #5
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	e008      	b.n	800b20a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	461a      	mov	r2, r3
 800b206:	2300      	movs	r3, #0
 800b208:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b216:	461a      	mov	r2, r3
 800b218:	2300      	movs	r3, #0
 800b21a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4413      	add	r3, r2
 800b224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b228:	461a      	mov	r2, r3
 800b22a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b22e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	3301      	adds	r3, #1
 800b234:	613b      	str	r3, [r7, #16]
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d3b7      	bcc.n	800b1ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	e043      	b.n	800b2cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b25a:	d118      	bne.n	800b28e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26e:	461a      	mov	r2, r3
 800b270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	e013      	b.n	800b2a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b284:	461a      	mov	r2, r3
 800b286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	e008      	b.n	800b2a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b29a:	461a      	mov	r2, r3
 800b29c:	2300      	movs	r3, #0
 800b29e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d3b7      	bcc.n	800b244 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b2f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d105      	bne.n	800b308 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	f043 0210 	orr.w	r2, r3, #16
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	699a      	ldr	r2, [r3, #24]
 800b30c:	4b0e      	ldr	r3, [pc, #56]	; (800b348 <USB_DevInit+0x2b4>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	f043 0208 	orr.w	r2, r3, #8
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d105      	bne.n	800b338 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	699a      	ldr	r2, [r3, #24]
 800b330:	4b06      	ldr	r3, [pc, #24]	; (800b34c <USB_DevInit+0x2b8>)
 800b332:	4313      	orrs	r3, r2
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b344:	b004      	add	sp, #16
 800b346:	4770      	bx	lr
 800b348:	803c3800 	.word	0x803c3800
 800b34c:	40000004 	.word	0x40000004

0800b350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b35a:	2300      	movs	r3, #0
 800b35c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	4a12      	ldr	r2, [pc, #72]	; (800b3b0 <USB_FlushTxFifo+0x60>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d901      	bls.n	800b36e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e01a      	b.n	800b3a4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	daf3      	bge.n	800b35e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	019b      	lsls	r3, r3, #6
 800b37e:	f043 0220 	orr.w	r2, r3, #32
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3301      	adds	r3, #1
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	4a08      	ldr	r2, [pc, #32]	; (800b3b0 <USB_FlushTxFifo+0x60>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d901      	bls.n	800b396 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e006      	b.n	800b3a4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	f003 0320 	and.w	r3, r3, #32
 800b39e:	2b20      	cmp	r3, #32
 800b3a0:	d0f1      	beq.n	800b386 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr
 800b3b0:	00030d40 	.word	0x00030d40

0800b3b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	60fb      	str	r3, [r7, #12]
 800b3c6:	4a11      	ldr	r2, [pc, #68]	; (800b40c <USB_FlushRxFifo+0x58>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d901      	bls.n	800b3d0 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	e017      	b.n	800b400 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	daf3      	bge.n	800b3c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2210      	movs	r2, #16
 800b3e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	4a08      	ldr	r2, [pc, #32]	; (800b40c <USB_FlushRxFifo+0x58>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d901      	bls.n	800b3f2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	e006      	b.n	800b400 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	f003 0310 	and.w	r3, r3, #16
 800b3fa:	2b10      	cmp	r3, #16
 800b3fc:	d0f1      	beq.n	800b3e2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	00030d40 	.word	0x00030d40

0800b410 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	78fb      	ldrb	r3, [r7, #3]
 800b42a:	68f9      	ldr	r1, [r7, #12]
 800b42c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b430:	4313      	orrs	r3, r2
 800b432:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b442:	b480      	push	{r7}
 800b444:	b087      	sub	sp, #28
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	f003 0306 	and.w	r3, r3, #6
 800b45a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b462:	2300      	movs	r3, #0
 800b464:	75fb      	strb	r3, [r7, #23]
 800b466:	e00a      	b.n	800b47e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d002      	beq.n	800b474 <USB_GetDevSpeed+0x32>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b06      	cmp	r3, #6
 800b472:	d102      	bne.n	800b47a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b474:	2302      	movs	r3, #2
 800b476:	75fb      	strb	r3, [r7, #23]
 800b478:	e001      	b.n	800b47e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b47a:	230f      	movs	r3, #15
 800b47c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b480:	4618      	mov	r0, r3
 800b482:	371c      	adds	r7, #28
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	785b      	ldrb	r3, [r3, #1]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d139      	bne.n	800b51c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ae:	69da      	ldr	r2, [r3, #28]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	f003 030f 	and.w	r3, r3, #15
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	68f9      	ldr	r1, [r7, #12]
 800b4c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	015a      	lsls	r2, r3, #5
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d153      	bne.n	800b588 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	78db      	ldrb	r3, [r3, #3]
 800b4fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b4fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	059b      	lsls	r3, r3, #22
 800b502:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b504:	431a      	orrs	r2, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	0159      	lsls	r1, r3, #5
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	440b      	add	r3, r1
 800b50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b512:	4619      	mov	r1, r3
 800b514:	4b20      	ldr	r3, [pc, #128]	; (800b598 <USB_ActivateEndpoint+0x10c>)
 800b516:	4313      	orrs	r3, r2
 800b518:	600b      	str	r3, [r1, #0]
 800b51a:	e035      	b.n	800b588 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b522:	69da      	ldr	r2, [r3, #28]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	2101      	movs	r1, #1
 800b52e:	fa01 f303 	lsl.w	r3, r1, r3
 800b532:	041b      	lsls	r3, r3, #16
 800b534:	68f9      	ldr	r1, [r7, #12]
 800b536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b53a:	4313      	orrs	r3, r2
 800b53c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d119      	bne.n	800b588 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	78db      	ldrb	r3, [r3, #3]
 800b56e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b570:	430b      	orrs	r3, r1
 800b572:	431a      	orrs	r2, r3
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	0159      	lsls	r1, r3, #5
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	440b      	add	r3, r1
 800b57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b580:	4619      	mov	r1, r3
 800b582:	4b05      	ldr	r3, [pc, #20]	; (800b598 <USB_ActivateEndpoint+0x10c>)
 800b584:	4313      	orrs	r3, r2
 800b586:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	10008000 	.word	0x10008000

0800b59c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	785b      	ldrb	r3, [r3, #1]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d161      	bne.n	800b67c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5ce:	d11f      	bne.n	800b610 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68ba      	ldr	r2, [r7, #8]
 800b5e0:	0151      	lsls	r1, r2, #5
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	440a      	add	r2, r1
 800b5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	015a      	lsls	r2, r3, #5
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	0151      	lsls	r1, r2, #5
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	440a      	add	r2, r1
 800b606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b60a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b60e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	f003 030f 	and.w	r3, r3, #15
 800b620:	2101      	movs	r1, #1
 800b622:	fa01 f303 	lsl.w	r3, r1, r3
 800b626:	b29b      	uxth	r3, r3
 800b628:	43db      	mvns	r3, r3
 800b62a:	68f9      	ldr	r1, [r7, #12]
 800b62c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b630:	4013      	ands	r3, r2
 800b632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b63a:	69da      	ldr	r2, [r3, #28]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f003 030f 	and.w	r3, r3, #15
 800b644:	2101      	movs	r1, #1
 800b646:	fa01 f303 	lsl.w	r3, r1, r3
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	43db      	mvns	r3, r3
 800b64e:	68f9      	ldr	r1, [r7, #12]
 800b650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b654:	4013      	ands	r3, r2
 800b656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	015a      	lsls	r2, r3, #5
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4413      	add	r3, r2
 800b660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	0159      	lsls	r1, r3, #5
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	440b      	add	r3, r1
 800b66e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b672:	4619      	mov	r1, r3
 800b674:	4b35      	ldr	r3, [pc, #212]	; (800b74c <USB_DeactivateEndpoint+0x1b0>)
 800b676:	4013      	ands	r3, r2
 800b678:	600b      	str	r3, [r1, #0]
 800b67a:	e060      	b.n	800b73e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b68e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b692:	d11f      	bne.n	800b6d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	0151      	lsls	r1, r2, #5
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	440a      	add	r2, r1
 800b6aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	0151      	lsls	r1, r2, #5
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	440a      	add	r2, r1
 800b6ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b6d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ea:	041b      	lsls	r3, r3, #16
 800b6ec:	43db      	mvns	r3, r3
 800b6ee:	68f9      	ldr	r1, [r7, #12]
 800b6f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fe:	69da      	ldr	r2, [r3, #28]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	f003 030f 	and.w	r3, r3, #15
 800b708:	2101      	movs	r1, #1
 800b70a:	fa01 f303 	lsl.w	r3, r1, r3
 800b70e:	041b      	lsls	r3, r3, #16
 800b710:	43db      	mvns	r3, r3
 800b712:	68f9      	ldr	r1, [r7, #12]
 800b714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b718:	4013      	ands	r3, r2
 800b71a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	015a      	lsls	r2, r3, #5
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4413      	add	r3, r2
 800b724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	0159      	lsls	r1, r3, #5
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	440b      	add	r3, r1
 800b732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b736:	4619      	mov	r1, r3
 800b738:	4b05      	ldr	r3, [pc, #20]	; (800b750 <USB_DeactivateEndpoint+0x1b4>)
 800b73a:	4013      	ands	r3, r2
 800b73c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr
 800b74c:	ec337800 	.word	0xec337800
 800b750:	eff37800 	.word	0xeff37800

0800b754 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08a      	sub	sp, #40	; 0x28
 800b758:	af02      	add	r7, sp, #8
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	2b01      	cmp	r3, #1
 800b772:	f040 8163 	bne.w	800ba3c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d132      	bne.n	800b7e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78a:	691a      	ldr	r2, [r3, #16]
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	0159      	lsls	r1, r3, #5
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	440b      	add	r3, r1
 800b794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b798:	4619      	mov	r1, r3
 800b79a:	4ba5      	ldr	r3, [pc, #660]	; (800ba30 <USB_EPStartXfer+0x2dc>)
 800b79c:	4013      	ands	r3, r2
 800b79e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	015a      	lsls	r2, r3, #5
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	0151      	lsls	r1, r2, #5
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	440a      	add	r2, r1
 800b7b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	015a      	lsls	r2, r3, #5
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7cc:	691a      	ldr	r2, [r3, #16]
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	0159      	lsls	r1, r3, #5
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	440b      	add	r3, r1
 800b7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7da:	4619      	mov	r1, r3
 800b7dc:	4b95      	ldr	r3, [pc, #596]	; (800ba34 <USB_EPStartXfer+0x2e0>)
 800b7de:	4013      	ands	r3, r2
 800b7e0:	610b      	str	r3, [r1, #16]
 800b7e2:	e074      	b.n	800b8ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	015a      	lsls	r2, r3, #5
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f0:	691a      	ldr	r2, [r3, #16]
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	0159      	lsls	r1, r3, #5
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	440b      	add	r3, r1
 800b7fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fe:	4619      	mov	r1, r3
 800b800:	4b8c      	ldr	r3, [pc, #560]	; (800ba34 <USB_EPStartXfer+0x2e0>)
 800b802:	4013      	ands	r3, r2
 800b804:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b812:	691a      	ldr	r2, [r3, #16]
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	0159      	lsls	r1, r3, #5
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	440b      	add	r3, r1
 800b81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b820:	4619      	mov	r1, r3
 800b822:	4b83      	ldr	r3, [pc, #524]	; (800ba30 <USB_EPStartXfer+0x2dc>)
 800b824:	4013      	ands	r3, r2
 800b826:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b834:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	6959      	ldr	r1, [r3, #20]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	440b      	add	r3, r1
 800b840:	1e59      	subs	r1, r3, #1
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	fbb1 f3f3 	udiv	r3, r1, r3
 800b84a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b84c:	4b7a      	ldr	r3, [pc, #488]	; (800ba38 <USB_EPStartXfer+0x2e4>)
 800b84e:	400b      	ands	r3, r1
 800b850:	69b9      	ldr	r1, [r7, #24]
 800b852:	0148      	lsls	r0, r1, #5
 800b854:	69f9      	ldr	r1, [r7, #28]
 800b856:	4401      	add	r1, r0
 800b858:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b85c:	4313      	orrs	r3, r2
 800b85e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	4413      	add	r3, r2
 800b868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b86c:	691a      	ldr	r2, [r3, #16]
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b876:	69b9      	ldr	r1, [r7, #24]
 800b878:	0148      	lsls	r0, r1, #5
 800b87a:	69f9      	ldr	r1, [r7, #28]
 800b87c:	4401      	add	r1, r0
 800b87e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b882:	4313      	orrs	r3, r2
 800b884:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	78db      	ldrb	r3, [r3, #3]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d11f      	bne.n	800b8ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	0151      	lsls	r1, r2, #5
 800b8a0:	69fa      	ldr	r2, [r7, #28]
 800b8a2:	440a      	add	r2, r1
 800b8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b8ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	015a      	lsls	r2, r3, #5
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	69ba      	ldr	r2, [r7, #24]
 800b8be:	0151      	lsls	r1, r2, #5
 800b8c0:	69fa      	ldr	r2, [r7, #28]
 800b8c2:	440a      	add	r2, r1
 800b8c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d14b      	bne.n	800b96c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d009      	beq.n	800b8f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	78db      	ldrb	r3, [r3, #3]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d128      	bne.n	800b94a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b904:	2b00      	cmp	r3, #0
 800b906:	d110      	bne.n	800b92a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b908:	69bb      	ldr	r3, [r7, #24]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	0151      	lsls	r1, r2, #5
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	440a      	add	r2, r1
 800b91e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	e00f      	b.n	800b94a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	69ba      	ldr	r2, [r7, #24]
 800b93a:	0151      	lsls	r1, r2, #5
 800b93c:	69fa      	ldr	r2, [r7, #28]
 800b93e:	440a      	add	r2, r1
 800b940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b948:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	015a      	lsls	r2, r3, #5
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	4413      	add	r3, r2
 800b952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	0151      	lsls	r1, r2, #5
 800b95c:	69fa      	ldr	r2, [r7, #28]
 800b95e:	440a      	add	r2, r1
 800b960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	e133      	b.n	800bbd4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	0151      	lsls	r1, r2, #5
 800b97e:	69fa      	ldr	r2, [r7, #28]
 800b980:	440a      	add	r2, r1
 800b982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b98a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	78db      	ldrb	r3, [r3, #3]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d015      	beq.n	800b9c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 811b 	beq.w	800bbd4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	f003 030f 	and.w	r3, r3, #15
 800b9ae:	2101      	movs	r1, #1
 800b9b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b4:	69f9      	ldr	r1, [r7, #28]
 800b9b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	634b      	str	r3, [r1, #52]	; 0x34
 800b9be:	e109      	b.n	800bbd4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d110      	bne.n	800b9f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	0151      	lsls	r1, r2, #5
 800b9e2:	69fa      	ldr	r2, [r7, #28]
 800b9e4:	440a      	add	r2, r1
 800b9e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	e00f      	b.n	800ba12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	015a      	lsls	r2, r3, #5
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	69ba      	ldr	r2, [r7, #24]
 800ba02:	0151      	lsls	r1, r2, #5
 800ba04:	69fa      	ldr	r2, [r7, #28]
 800ba06:	440a      	add	r2, r1
 800ba08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	68d9      	ldr	r1, [r3, #12]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	781a      	ldrb	r2, [r3, #0]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	b298      	uxth	r0, r3
 800ba20:	79fb      	ldrb	r3, [r7, #7]
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	4603      	mov	r3, r0
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fa38 	bl	800be9c <USB_WritePacket>
 800ba2c:	e0d2      	b.n	800bbd4 <USB_EPStartXfer+0x480>
 800ba2e:	bf00      	nop
 800ba30:	e007ffff 	.word	0xe007ffff
 800ba34:	fff80000 	.word	0xfff80000
 800ba38:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	015a      	lsls	r2, r3, #5
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	4413      	add	r3, r2
 800ba44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba48:	691a      	ldr	r2, [r3, #16]
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	0159      	lsls	r1, r3, #5
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	440b      	add	r3, r1
 800ba52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba56:	4619      	mov	r1, r3
 800ba58:	4b61      	ldr	r3, [pc, #388]	; (800bbe0 <USB_EPStartXfer+0x48c>)
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	015a      	lsls	r2, r3, #5
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	4413      	add	r3, r2
 800ba66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba6a:	691a      	ldr	r2, [r3, #16]
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	0159      	lsls	r1, r3, #5
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	440b      	add	r3, r1
 800ba74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4b5a      	ldr	r3, [pc, #360]	; (800bbe4 <USB_EPStartXfer+0x490>)
 800ba7c:	4013      	ands	r3, r2
 800ba7e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	695b      	ldr	r3, [r3, #20]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d123      	bne.n	800bad0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba94:	691a      	ldr	r2, [r3, #16]
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba9e:	69b9      	ldr	r1, [r7, #24]
 800baa0:	0148      	lsls	r0, r1, #5
 800baa2:	69f9      	ldr	r1, [r7, #28]
 800baa4:	4401      	add	r1, r0
 800baa6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800baaa:	4313      	orrs	r3, r2
 800baac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	0151      	lsls	r1, r2, #5
 800bac0:	69fa      	ldr	r2, [r7, #28]
 800bac2:	440a      	add	r2, r1
 800bac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bacc:	6113      	str	r3, [r2, #16]
 800bace:	e033      	b.n	800bb38 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	695a      	ldr	r2, [r3, #20]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	4413      	add	r3, r2
 800bada:	1e5a      	subs	r2, r3, #1
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bae4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	015a      	lsls	r2, r3, #5
 800baea:	69fb      	ldr	r3, [r7, #28]
 800baec:	4413      	add	r3, r2
 800baee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf2:	691a      	ldr	r2, [r3, #16]
 800baf4:	8afb      	ldrh	r3, [r7, #22]
 800baf6:	04d9      	lsls	r1, r3, #19
 800baf8:	4b3b      	ldr	r3, [pc, #236]	; (800bbe8 <USB_EPStartXfer+0x494>)
 800bafa:	400b      	ands	r3, r1
 800bafc:	69b9      	ldr	r1, [r7, #24]
 800bafe:	0148      	lsls	r0, r1, #5
 800bb00:	69f9      	ldr	r1, [r7, #28]
 800bb02:	4401      	add	r1, r0
 800bb04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	015a      	lsls	r2, r3, #5
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb18:	691a      	ldr	r2, [r3, #16]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	8af9      	ldrh	r1, [r7, #22]
 800bb20:	fb01 f303 	mul.w	r3, r1, r3
 800bb24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb28:	69b9      	ldr	r1, [r7, #24]
 800bb2a:	0148      	lsls	r0, r1, #5
 800bb2c:	69f9      	ldr	r1, [r7, #28]
 800bb2e:	4401      	add	r1, r0
 800bb30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb34:	4313      	orrs	r3, r2
 800bb36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d10d      	bne.n	800bb5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d009      	beq.n	800bb5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	68d9      	ldr	r1, [r3, #12]
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb56:	460a      	mov	r2, r1
 800bb58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	78db      	ldrb	r3, [r3, #3]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d128      	bne.n	800bbb4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d110      	bne.n	800bb94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	69ba      	ldr	r2, [r7, #24]
 800bb82:	0151      	lsls	r1, r2, #5
 800bb84:	69fa      	ldr	r2, [r7, #28]
 800bb86:	440a      	add	r2, r1
 800bb88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb90:	6013      	str	r3, [r2, #0]
 800bb92:	e00f      	b.n	800bbb4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	015a      	lsls	r2, r3, #5
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	69ba      	ldr	r2, [r7, #24]
 800bba4:	0151      	lsls	r1, r2, #5
 800bba6:	69fa      	ldr	r2, [r7, #28]
 800bba8:	440a      	add	r2, r1
 800bbaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbb4:	69bb      	ldr	r3, [r7, #24]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	69ba      	ldr	r2, [r7, #24]
 800bbc4:	0151      	lsls	r1, r2, #5
 800bbc6:	69fa      	ldr	r2, [r7, #28]
 800bbc8:	440a      	add	r2, r1
 800bbca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bbd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3720      	adds	r7, #32
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	fff80000 	.word	0xfff80000
 800bbe4:	e007ffff 	.word	0xe007ffff
 800bbe8:	1ff80000 	.word	0x1ff80000

0800bbec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	785b      	ldrb	r3, [r3, #1]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	f040 80cd 	bne.w	800bda8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	695b      	ldr	r3, [r3, #20]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d132      	bne.n	800bc7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	015a      	lsls	r2, r3, #5
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc22:	691a      	ldr	r2, [r3, #16]
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	0159      	lsls	r1, r3, #5
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	440b      	add	r3, r1
 800bc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc30:	4619      	mov	r1, r3
 800bc32:	4b98      	ldr	r3, [pc, #608]	; (800be94 <USB_EP0StartXfer+0x2a8>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	015a      	lsls	r2, r3, #5
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	4413      	add	r3, r2
 800bc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	0151      	lsls	r1, r2, #5
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	440a      	add	r2, r1
 800bc4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc64:	691a      	ldr	r2, [r3, #16]
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	0159      	lsls	r1, r3, #5
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	440b      	add	r3, r1
 800bc6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc72:	4619      	mov	r1, r3
 800bc74:	4b88      	ldr	r3, [pc, #544]	; (800be98 <USB_EP0StartXfer+0x2ac>)
 800bc76:	4013      	ands	r3, r2
 800bc78:	610b      	str	r3, [r1, #16]
 800bc7a:	e04e      	b.n	800bd1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc88:	691a      	ldr	r2, [r3, #16]
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	0159      	lsls	r1, r3, #5
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	440b      	add	r3, r1
 800bc92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc96:	4619      	mov	r1, r3
 800bc98:	4b7f      	ldr	r3, [pc, #508]	; (800be98 <USB_EP0StartXfer+0x2ac>)
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcaa:	691a      	ldr	r2, [r3, #16]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	0159      	lsls	r1, r3, #5
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	440b      	add	r3, r1
 800bcb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4b76      	ldr	r3, [pc, #472]	; (800be94 <USB_EP0StartXfer+0x2a8>)
 800bcbc:	4013      	ands	r3, r2
 800bcbe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	695a      	ldr	r2, [r3, #20]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d903      	bls.n	800bcd4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	689a      	ldr	r2, [r3, #8]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	0151      	lsls	r1, r2, #5
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	440a      	add	r2, r1
 800bcea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd00:	691a      	ldr	r2, [r3, #16]
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd0a:	6939      	ldr	r1, [r7, #16]
 800bd0c:	0148      	lsls	r0, r1, #5
 800bd0e:	6979      	ldr	r1, [r7, #20]
 800bd10:	4401      	add	r1, r0
 800bd12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd16:	4313      	orrs	r3, r2
 800bd18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d11e      	bne.n	800bd5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d009      	beq.n	800bd3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	015a      	lsls	r2, r3, #5
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	4413      	add	r3, r2
 800bd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd34:	461a      	mov	r2, r3
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	0151      	lsls	r1, r2, #5
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	440a      	add	r2, r1
 800bd52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	e092      	b.n	800be84 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	0151      	lsls	r1, r2, #5
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	440a      	add	r2, r1
 800bd74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d07e      	beq.n	800be84 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	f003 030f 	and.w	r3, r3, #15
 800bd96:	2101      	movs	r1, #1
 800bd98:	fa01 f303 	lsl.w	r3, r1, r3
 800bd9c:	6979      	ldr	r1, [r7, #20]
 800bd9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bda2:	4313      	orrs	r3, r2
 800bda4:	634b      	str	r3, [r1, #52]	; 0x34
 800bda6:	e06d      	b.n	800be84 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	015a      	lsls	r2, r3, #5
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	0159      	lsls	r1, r3, #5
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	440b      	add	r3, r1
 800bdbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4b34      	ldr	r3, [pc, #208]	; (800be98 <USB_EP0StartXfer+0x2ac>)
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	015a      	lsls	r2, r3, #5
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd6:	691a      	ldr	r2, [r3, #16]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	0159      	lsls	r1, r3, #5
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	440b      	add	r3, r1
 800bde0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde4:	4619      	mov	r1, r3
 800bde6:	4b2b      	ldr	r3, [pc, #172]	; (800be94 <USB_EP0StartXfer+0x2a8>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d003      	beq.n	800bdfc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	689a      	ldr	r2, [r3, #8]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	4413      	add	r3, r2
 800be04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	0151      	lsls	r1, r2, #5
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	440a      	add	r2, r1
 800be12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	4413      	add	r3, r2
 800be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be28:	691a      	ldr	r2, [r3, #16]
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be32:	6939      	ldr	r1, [r7, #16]
 800be34:	0148      	lsls	r0, r1, #5
 800be36:	6979      	ldr	r1, [r7, #20]
 800be38:	4401      	add	r1, r0
 800be3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be3e:	4313      	orrs	r3, r2
 800be40:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800be42:	79fb      	ldrb	r3, [r7, #7]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d10d      	bne.n	800be64 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d009      	beq.n	800be64 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	68d9      	ldr	r1, [r3, #12]
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be60:	460a      	mov	r2, r1
 800be62:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	015a      	lsls	r2, r3, #5
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	4413      	add	r3, r2
 800be6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	693a      	ldr	r2, [r7, #16]
 800be74:	0151      	lsls	r1, r2, #5
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	440a      	add	r2, r1
 800be7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	371c      	adds	r7, #28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	e007ffff 	.word	0xe007ffff
 800be98:	fff80000 	.word	0xfff80000

0800be9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b089      	sub	sp, #36	; 0x24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	4611      	mov	r1, r2
 800bea8:	461a      	mov	r2, r3
 800beaa:	460b      	mov	r3, r1
 800beac:	71fb      	strb	r3, [r7, #7]
 800beae:	4613      	mov	r3, r2
 800beb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800beba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d123      	bne.n	800bf0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bec2:	88bb      	ldrh	r3, [r7, #4]
 800bec4:	3303      	adds	r3, #3
 800bec6:	089b      	lsrs	r3, r3, #2
 800bec8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800beca:	2300      	movs	r3, #0
 800becc:	61bb      	str	r3, [r7, #24]
 800bece:	e018      	b.n	800bf02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bed0:	79fb      	ldrb	r3, [r7, #7]
 800bed2:	031a      	lsls	r2, r3, #12
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bedc:	461a      	mov	r2, r3
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	3301      	adds	r3, #1
 800bee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	3301      	adds	r3, #1
 800beee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	3301      	adds	r3, #1
 800bef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	3301      	adds	r3, #1
 800befa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	3301      	adds	r3, #1
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d3e2      	bcc.n	800bed0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3724      	adds	r7, #36	; 0x24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b08b      	sub	sp, #44	; 0x2c
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	4613      	mov	r3, r2
 800bf24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf2e:	88fb      	ldrh	r3, [r7, #6]
 800bf30:	089b      	lsrs	r3, r3, #2
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf36:	88fb      	ldrh	r3, [r7, #6]
 800bf38:	f003 0303 	and.w	r3, r3, #3
 800bf3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf3e:	2300      	movs	r3, #0
 800bf40:	623b      	str	r3, [r7, #32]
 800bf42:	e014      	b.n	800bf6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	3301      	adds	r3, #1
 800bf54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	3301      	adds	r3, #1
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	3301      	adds	r3, #1
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	3301      	adds	r3, #1
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	623b      	str	r3, [r7, #32]
 800bf6e:	6a3a      	ldr	r2, [r7, #32]
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d3e6      	bcc.n	800bf44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bf76:	8bfb      	ldrh	r3, [r7, #30]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d01e      	beq.n	800bfba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf86:	461a      	mov	r2, r3
 800bf88:	f107 0310 	add.w	r3, r7, #16
 800bf8c:	6812      	ldr	r2, [r2, #0]
 800bf8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	6a3b      	ldr	r3, [r7, #32]
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	00db      	lsls	r3, r3, #3
 800bf98:	fa22 f303 	lsr.w	r3, r2, r3
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	701a      	strb	r2, [r3, #0]
      i++;
 800bfa2:	6a3b      	ldr	r3, [r7, #32]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	623b      	str	r3, [r7, #32]
      pDest++;
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	3301      	adds	r3, #1
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bfae:	8bfb      	ldrh	r3, [r7, #30]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bfb4:	8bfb      	ldrh	r3, [r7, #30]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1ea      	bne.n	800bf90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	372c      	adds	r7, #44	; 0x2c
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	785b      	ldrb	r3, [r3, #1]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d12c      	bne.n	800c03e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	015a      	lsls	r2, r3, #5
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4413      	add	r3, r2
 800bfec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	db12      	blt.n	800c01c <USB_EPSetStall+0x54>
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00f      	beq.n	800c01c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	0151      	lsls	r1, r2, #5
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	440a      	add	r2, r1
 800c012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c01a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	0151      	lsls	r1, r2, #5
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	440a      	add	r2, r1
 800c032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	e02b      	b.n	800c096 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	015a      	lsls	r2, r3, #5
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	4413      	add	r3, r2
 800c046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	db12      	blt.n	800c076 <USB_EPSetStall+0xae>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00f      	beq.n	800c076 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c070:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c074:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	015a      	lsls	r2, r3, #5
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	4413      	add	r3, r2
 800c07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	0151      	lsls	r1, r2, #5
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	440a      	add	r2, r1
 800c08c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	785b      	ldrb	r3, [r3, #1]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d128      	bne.n	800c112 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	0151      	lsls	r1, r2, #5
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	440a      	add	r2, r1
 800c0d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	78db      	ldrb	r3, [r3, #3]
 800c0e4:	2b03      	cmp	r3, #3
 800c0e6:	d003      	beq.n	800c0f0 <USB_EPClearStall+0x4c>
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	78db      	ldrb	r3, [r3, #3]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d138      	bne.n	800c162 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	0151      	lsls	r1, r2, #5
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	440a      	add	r2, r1
 800c106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c10a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	e027      	b.n	800c162 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	0151      	lsls	r1, r2, #5
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	440a      	add	r2, r1
 800c128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c12c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c130:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	78db      	ldrb	r3, [r3, #3]
 800c136:	2b03      	cmp	r3, #3
 800c138:	d003      	beq.n	800c142 <USB_EPClearStall+0x9e>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	78db      	ldrb	r3, [r3, #3]
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d10f      	bne.n	800c162 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	0151      	lsls	r1, r2, #5
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	440a      	add	r2, r1
 800c158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c15c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c160:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c18e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c192:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	011b      	lsls	r3, r3, #4
 800c1a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c1a4:	68f9      	ldr	r1, [r7, #12]
 800c1a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1d6:	f023 0303 	bic.w	r3, r3, #3
 800c1da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1ea:	f023 0302 	bic.w	r3, r3, #2
 800c1ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1fe:	b480      	push	{r7}
 800c200:	b085      	sub	sp, #20
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c218:	f023 0303 	bic.w	r3, r3, #3
 800c21c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c22c:	f043 0302 	orr.w	r3, r3, #2
 800c230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c240:	b480      	push	{r7}
 800c242:	b085      	sub	sp, #20
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	695b      	ldr	r3, [r3, #20]
 800c24c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	699b      	ldr	r3, [r3, #24]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4013      	ands	r3, r2
 800c256:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c258:	68fb      	ldr	r3, [r7, #12]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c266:	b480      	push	{r7}
 800c268:	b085      	sub	sp, #20
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c282:	69db      	ldr	r3, [r3, #28]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	4013      	ands	r3, r2
 800c288:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	0c1b      	lsrs	r3, r3, #16
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3714      	adds	r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c29a:	b480      	push	{r7}
 800c29c:	b085      	sub	sp, #20
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b6:	69db      	ldr	r3, [r3, #28]
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	b29b      	uxth	r3, r3
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3714      	adds	r7, #20
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c2fc:	68bb      	ldr	r3, [r7, #8]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b087      	sub	sp, #28
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	460b      	mov	r3, r1
 800c314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c32c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c32e:	78fb      	ldrb	r3, [r7, #3]
 800c330:	f003 030f 	and.w	r3, r3, #15
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	fa22 f303 	lsr.w	r3, r2, r3
 800c33a:	01db      	lsls	r3, r3, #7
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	4313      	orrs	r3, r2
 800c342:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c344:	78fb      	ldrb	r3, [r7, #3]
 800c346:	015a      	lsls	r2, r3, #5
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	4413      	add	r3, r2
 800c34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	4013      	ands	r3, r2
 800c356:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c358:	68bb      	ldr	r3, [r7, #8]
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	371c      	adds	r7, #28
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr

0800c366 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c366:	b480      	push	{r7}
 800c368:	b083      	sub	sp, #12
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	695b      	ldr	r3, [r3, #20]
 800c372:	f003 0301 	and.w	r3, r3, #1
}
 800c376:	4618      	mov	r0, r3
 800c378:	370c      	adds	r7, #12
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
	...

0800c384 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <USB_ActivateSetup+0x44>)
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	fffff800 	.word	0xfffff800

0800c3cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	333c      	adds	r3, #60	; 0x3c
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	4a26      	ldr	r2, [pc, #152]	; (800c484 <USB_EP0_OutStart+0xb8>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d90a      	bls.n	800c406 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c400:	d101      	bne.n	800c406 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	e037      	b.n	800c476 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c40c:	461a      	mov	r2, r3
 800c40e:	2300      	movs	r3, #0
 800c410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c42c:	691b      	ldr	r3, [r3, #16]
 800c42e:	697a      	ldr	r2, [r7, #20]
 800c430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c434:	f043 0318 	orr.w	r3, r3, #24
 800c438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c448:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c44c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c44e:	7afb      	ldrb	r3, [r7, #11]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d10f      	bne.n	800c474 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c45a:	461a      	mov	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c46e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	4f54300a 	.word	0x4f54300a

0800c488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3301      	adds	r3, #1
 800c498:	60fb      	str	r3, [r7, #12]
 800c49a:	4a13      	ldr	r2, [pc, #76]	; (800c4e8 <USB_CoreReset+0x60>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d901      	bls.n	800c4a4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e01a      	b.n	800c4da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	daf3      	bge.n	800c494 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	f043 0201 	orr.w	r2, r3, #1
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	4a09      	ldr	r2, [pc, #36]	; (800c4e8 <USB_CoreReset+0x60>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d901      	bls.n	800c4cc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e006      	b.n	800c4da <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d0f1      	beq.n	800c4bc <USB_CoreReset+0x34>

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	00030d40 	.word	0x00030d40

0800c4ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c4fc:	f002 f9f0 	bl	800e8e0 <USBD_static_malloc>
 800c500:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d105      	bne.n	800c514 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c510:	2302      	movs	r3, #2
 800c512:	e066      	b.n	800c5e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7c1b      	ldrb	r3, [r3, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d119      	bne.n	800c558 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c524:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c528:	2202      	movs	r2, #2
 800c52a:	2181      	movs	r1, #129	; 0x81
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f002 f8b4 	bl	800e69a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c53c:	2202      	movs	r2, #2
 800c53e:	2101      	movs	r1, #1
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f002 f8aa 	bl	800e69a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2210      	movs	r2, #16
 800c552:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c556:	e016      	b.n	800c586 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c558:	2340      	movs	r3, #64	; 0x40
 800c55a:	2202      	movs	r2, #2
 800c55c:	2181      	movs	r1, #129	; 0x81
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f002 f89b 	bl	800e69a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c56a:	2340      	movs	r3, #64	; 0x40
 800c56c:	2202      	movs	r2, #2
 800c56e:	2101      	movs	r1, #1
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f002 f892 	bl	800e69a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2210      	movs	r2, #16
 800c582:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c586:	2308      	movs	r3, #8
 800c588:	2203      	movs	r2, #3
 800c58a:	2182      	movs	r1, #130	; 0x82
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f002 f884 	bl	800e69a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2201      	movs	r2, #1
 800c596:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	7c1b      	ldrb	r3, [r3, #16]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d109      	bne.n	800c5d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f002 f955 	bl	800e878 <USBD_LL_PrepareReceive>
 800c5ce:	e007      	b.n	800c5e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5d6:	2340      	movs	r3, #64	; 0x40
 800c5d8:	2101      	movs	r1, #1
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f002 f94c 	bl	800e878 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b082      	sub	sp, #8
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c5f6:	2181      	movs	r1, #129	; 0x81
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f002 f874 	bl	800e6e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c604:	2101      	movs	r1, #1
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f002 f86d 	bl	800e6e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c614:	2182      	movs	r1, #130	; 0x82
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f002 f865 	bl	800e6e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00e      	beq.n	800c654 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c646:	4618      	mov	r0, r3
 800c648:	f002 f958 	bl	800e8fc <USBD_static_free>
    pdev->pClassData = NULL;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3708      	adds	r7, #8
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c670:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c676:	2300      	movs	r3, #0
 800c678:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c67a:	2300      	movs	r3, #0
 800c67c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c684:	2303      	movs	r3, #3
 800c686:	e0af      	b.n	800c7e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c690:	2b00      	cmp	r3, #0
 800c692:	d03f      	beq.n	800c714 <USBD_CDC_Setup+0xb4>
 800c694:	2b20      	cmp	r3, #32
 800c696:	f040 809f 	bne.w	800c7d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	88db      	ldrh	r3, [r3, #6]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d02e      	beq.n	800c700 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	b25b      	sxtb	r3, r3
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	da16      	bge.n	800c6da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c6b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	88d2      	ldrh	r2, [r2, #6]
 800c6be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	88db      	ldrh	r3, [r3, #6]
 800c6c4:	2b07      	cmp	r3, #7
 800c6c6:	bf28      	it	cs
 800c6c8:	2307      	movcs	r3, #7
 800c6ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	89fa      	ldrh	r2, [r7, #14]
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f001 fb19 	bl	800dd0a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c6d8:	e085      	b.n	800c7e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	785a      	ldrb	r2, [r3, #1]
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	88db      	ldrh	r3, [r3, #6]
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c6f0:	6939      	ldr	r1, [r7, #16]
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	88db      	ldrh	r3, [r3, #6]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 fb32 	bl	800dd62 <USBD_CtlPrepareRx>
      break;
 800c6fe:	e072      	b.n	800c7e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	7850      	ldrb	r0, [r2, #1]
 800c70c:	2200      	movs	r2, #0
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	4798      	blx	r3
      break;
 800c712:	e068      	b.n	800c7e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	785b      	ldrb	r3, [r3, #1]
 800c718:	2b0b      	cmp	r3, #11
 800c71a:	d852      	bhi.n	800c7c2 <USBD_CDC_Setup+0x162>
 800c71c:	a201      	add	r2, pc, #4	; (adr r2, 800c724 <USBD_CDC_Setup+0xc4>)
 800c71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c722:	bf00      	nop
 800c724:	0800c755 	.word	0x0800c755
 800c728:	0800c7d1 	.word	0x0800c7d1
 800c72c:	0800c7c3 	.word	0x0800c7c3
 800c730:	0800c7c3 	.word	0x0800c7c3
 800c734:	0800c7c3 	.word	0x0800c7c3
 800c738:	0800c7c3 	.word	0x0800c7c3
 800c73c:	0800c7c3 	.word	0x0800c7c3
 800c740:	0800c7c3 	.word	0x0800c7c3
 800c744:	0800c7c3 	.word	0x0800c7c3
 800c748:	0800c7c3 	.word	0x0800c7c3
 800c74c:	0800c77f 	.word	0x0800c77f
 800c750:	0800c7a9 	.word	0x0800c7a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2b03      	cmp	r3, #3
 800c75e:	d107      	bne.n	800c770 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c760:	f107 030a 	add.w	r3, r7, #10
 800c764:	2202      	movs	r2, #2
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f001 face 	bl	800dd0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c76e:	e032      	b.n	800c7d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 fa58 	bl	800dc28 <USBD_CtlError>
            ret = USBD_FAIL;
 800c778:	2303      	movs	r3, #3
 800c77a:	75fb      	strb	r3, [r7, #23]
          break;
 800c77c:	e02b      	b.n	800c7d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b03      	cmp	r3, #3
 800c788:	d107      	bne.n	800c79a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c78a:	f107 030d 	add.w	r3, r7, #13
 800c78e:	2201      	movs	r2, #1
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f001 fab9 	bl	800dd0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c798:	e01d      	b.n	800c7d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f001 fa43 	bl	800dc28 <USBD_CtlError>
            ret = USBD_FAIL;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	75fb      	strb	r3, [r7, #23]
          break;
 800c7a6:	e016      	b.n	800c7d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d00f      	beq.n	800c7d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f001 fa36 	bl	800dc28 <USBD_CtlError>
            ret = USBD_FAIL;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c7c0:	e008      	b.n	800c7d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c7c2:	6839      	ldr	r1, [r7, #0]
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 fa2f 	bl	800dc28 <USBD_CtlError>
          ret = USBD_FAIL;
 800c7ca:	2303      	movs	r3, #3
 800c7cc:	75fb      	strb	r3, [r7, #23]
          break;
 800c7ce:	e002      	b.n	800c7d6 <USBD_CDC_Setup+0x176>
          break;
 800c7d0:	bf00      	nop
 800c7d2:	e008      	b.n	800c7e6 <USBD_CDC_Setup+0x186>
          break;
 800c7d4:	bf00      	nop
      }
      break;
 800c7d6:	e006      	b.n	800c7e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f001 fa24 	bl	800dc28 <USBD_CtlError>
      ret = USBD_FAIL;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c802:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c80e:	2303      	movs	r3, #3
 800c810:	e04f      	b.n	800c8b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c818:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c81a:	78fa      	ldrb	r2, [r7, #3]
 800c81c:	6879      	ldr	r1, [r7, #4]
 800c81e:	4613      	mov	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	440b      	add	r3, r1
 800c828:	3318      	adds	r3, #24
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d029      	beq.n	800c884 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c830:	78fa      	ldrb	r2, [r7, #3]
 800c832:	6879      	ldr	r1, [r7, #4]
 800c834:	4613      	mov	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4413      	add	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	440b      	add	r3, r1
 800c83e:	3318      	adds	r3, #24
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	78f9      	ldrb	r1, [r7, #3]
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	460b      	mov	r3, r1
 800c848:	00db      	lsls	r3, r3, #3
 800c84a:	1a5b      	subs	r3, r3, r1
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	4403      	add	r3, r0
 800c850:	3344      	adds	r3, #68	; 0x44
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	fbb2 f1f3 	udiv	r1, r2, r3
 800c858:	fb03 f301 	mul.w	r3, r3, r1
 800c85c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d110      	bne.n	800c884 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c862:	78fa      	ldrb	r2, [r7, #3]
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	4613      	mov	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4413      	add	r3, r2
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	440b      	add	r3, r1
 800c870:	3318      	adds	r3, #24
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c876:	78f9      	ldrb	r1, [r7, #3]
 800c878:	2300      	movs	r3, #0
 800c87a:	2200      	movs	r2, #0
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f001 ffda 	bl	800e836 <USBD_LL_Transmit>
 800c882:	e015      	b.n	800c8b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2200      	movs	r2, #0
 800c888:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00b      	beq.n	800c8b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c89e:	691b      	ldr	r3, [r3, #16]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c8ac:	78fa      	ldrb	r2, [r7, #3]
 800c8ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b084      	sub	sp, #16
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e015      	b.n	800c908 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f001 ffea 	bl	800e8ba <USBD_LL_GetRxDataSize>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c902:	4611      	mov	r1, r2
 800c904:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c91e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c926:	2303      	movs	r3, #3
 800c928:	e01b      	b.n	800c962 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d015      	beq.n	800c960 <USBD_CDC_EP0_RxReady+0x50>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c93a:	2bff      	cmp	r3, #255	; 0xff
 800c93c:	d010      	beq.n	800c960 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c94c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c954:	b292      	uxth	r2, r2
 800c956:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	22ff      	movs	r2, #255	; 0xff
 800c95c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
	...

0800c96c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2243      	movs	r2, #67	; 0x43
 800c978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c97a:	4b03      	ldr	r3, [pc, #12]	; (800c988 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	370c      	adds	r7, #12
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	240000c8 	.word	0x240000c8

0800c98c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2243      	movs	r2, #67	; 0x43
 800c998:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c99a:	4b03      	ldr	r3, [pc, #12]	; (800c9a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr
 800c9a8:	24000084 	.word	0x24000084

0800c9ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2243      	movs	r2, #67	; 0x43
 800c9b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c9ba:	4b03      	ldr	r3, [pc, #12]	; (800c9c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	2400010c 	.word	0x2400010c

0800c9cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	220a      	movs	r2, #10
 800c9d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c9da:	4b03      	ldr	r3, [pc, #12]	; (800c9e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr
 800c9e8:	24000040 	.word	0x24000040

0800c9ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b083      	sub	sp, #12
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	e004      	b.n	800ca0a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b087      	sub	sp, #28
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	60b9      	str	r1, [r7, #8]
 800ca20:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca28:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d101      	bne.n	800ca34 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ca30:	2303      	movs	r3, #3
 800ca32:	e008      	b.n	800ca46 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	371c      	adds	r7, #28
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ca52:	b480      	push	{r7}
 800ca54:	b085      	sub	sp, #20
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
 800ca5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	e004      	b.n	800ca78 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3714      	adds	r7, #20
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ca94:	2301      	movs	r3, #1
 800ca96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e01a      	b.n	800cadc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800caac:	2b00      	cmp	r3, #0
 800caae:	d114      	bne.n	800cada <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cace:	2181      	movs	r1, #129	; 0x81
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f001 feb0 	bl	800e836 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cada:	7bfb      	ldrb	r3, [r7, #15]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800caf2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cafe:	2303      	movs	r3, #3
 800cb00:	e016      	b.n	800cb30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7c1b      	ldrb	r3, [r3, #16]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb14:	2101      	movs	r1, #1
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 feae 	bl	800e878 <USBD_LL_PrepareReceive>
 800cb1c:	e007      	b.n	800cb2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb24:	2340      	movs	r3, #64	; 0x40
 800cb26:	2101      	movs	r1, #1
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f001 fea5 	bl	800e878 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	4613      	mov	r3, r2
 800cb44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d101      	bne.n	800cb50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e01f      	b.n	800cb90 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d003      	beq.n	800cb76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	79fa      	ldrb	r2, [r7, #7]
 800cb82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f001 fd1d 	bl	800e5c4 <USBD_LL_Init>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3718      	adds	r7, #24
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d101      	bne.n	800cbb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cbac:	2303      	movs	r3, #3
 800cbae:	e016      	b.n	800cbde <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbcc:	f107 020e 	add.w	r2, r7, #14
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4798      	blx	r3
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b082      	sub	sp, #8
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f001 fd38 	bl	800e664 <USBD_LL_Start>
 800cbf4:	4603      	mov	r3, r0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cbfe:	b480      	push	{r7}
 800cc00:	b083      	sub	sp, #12
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cc20:	2303      	movs	r3, #3
 800cc22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d009      	beq.n	800cc42 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	78fa      	ldrb	r2, [r7, #3]
 800cc38:	4611      	mov	r1, r2
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	4798      	blx	r3
 800cc3e:	4603      	mov	r3, r0
 800cc40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3710      	adds	r7, #16
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}

0800cc4c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d007      	beq.n	800cc72 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	78fa      	ldrb	r2, [r7, #3]
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
  }

  return USBD_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 ff90 	bl	800dbb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cca2:	461a      	mov	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ccb0:	f003 031f 	and.w	r3, r3, #31
 800ccb4:	2b02      	cmp	r3, #2
 800ccb6:	d01a      	beq.n	800ccee <USBD_LL_SetupStage+0x72>
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d822      	bhi.n	800cd02 <USBD_LL_SetupStage+0x86>
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <USBD_LL_SetupStage+0x4a>
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d00a      	beq.n	800ccda <USBD_LL_SetupStage+0x5e>
 800ccc4:	e01d      	b.n	800cd02 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fa62 	bl	800d198 <USBD_StdDevReq>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	73fb      	strb	r3, [r7, #15]
      break;
 800ccd8:	e020      	b.n	800cd1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cce0:	4619      	mov	r1, r3
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fac6 	bl	800d274 <USBD_StdItfReq>
 800cce8:	4603      	mov	r3, r0
 800ccea:	73fb      	strb	r3, [r7, #15]
      break;
 800ccec:	e016      	b.n	800cd1c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fb05 	bl	800d306 <USBD_StdEPReq>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	73fb      	strb	r3, [r7, #15]
      break;
 800cd00:	e00c      	b.n	800cd1c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cd08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	4619      	mov	r1, r3
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f001 fd07 	bl	800e724 <USBD_LL_StallEP>
 800cd16:	4603      	mov	r3, r0
 800cd18:	73fb      	strb	r3, [r7, #15]
      break;
 800cd1a:	bf00      	nop
  }

  return ret;
 800cd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}

0800cd26 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b086      	sub	sp, #24
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	60f8      	str	r0, [r7, #12]
 800cd2e:	460b      	mov	r3, r1
 800cd30:	607a      	str	r2, [r7, #4]
 800cd32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cd34:	7afb      	ldrb	r3, [r7, #11]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d138      	bne.n	800cdac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cd40:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd48:	2b03      	cmp	r3, #3
 800cd4a:	d14a      	bne.n	800cde2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	689a      	ldr	r2, [r3, #8]
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d913      	bls.n	800cd80 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	689a      	ldr	r2, [r3, #8]
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	1ad2      	subs	r2, r2, r3
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	68da      	ldr	r2, [r3, #12]
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	bf28      	it	cs
 800cd72:	4613      	movcs	r3, r2
 800cd74:	461a      	mov	r2, r3
 800cd76:	6879      	ldr	r1, [r7, #4]
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f001 f80f 	bl	800dd9c <USBD_CtlContinueRx>
 800cd7e:	e030      	b.n	800cde2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	2b03      	cmp	r3, #3
 800cd8a:	d10b      	bne.n	800cda4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d005      	beq.n	800cda4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd9e:	691b      	ldr	r3, [r3, #16]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f001 f80a 	bl	800ddbe <USBD_CtlSendStatus>
 800cdaa:	e01a      	b.n	800cde2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d114      	bne.n	800cde2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00e      	beq.n	800cde2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	7afa      	ldrb	r2, [r7, #11]
 800cdce:	4611      	mov	r1, r2
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	4798      	blx	r3
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d001      	beq.n	800cde2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cdde:	7dfb      	ldrb	r3, [r7, #23]
 800cde0:	e000      	b.n	800cde4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cdfa:	7afb      	ldrb	r3, [r7, #11]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d16b      	bne.n	800ced8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	3314      	adds	r3, #20
 800ce04:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d156      	bne.n	800cebe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	689a      	ldr	r2, [r3, #8]
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d914      	bls.n	800ce46 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	689a      	ldr	r2, [r3, #8]
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	1ad2      	subs	r2, r2, r3
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	6879      	ldr	r1, [r7, #4]
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 ff84 	bl	800dd40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce38:	2300      	movs	r3, #0
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f001 fd1a 	bl	800e878 <USBD_LL_PrepareReceive>
 800ce44:	e03b      	b.n	800cebe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	68da      	ldr	r2, [r3, #12]
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d11c      	bne.n	800ce8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d316      	bcc.n	800ce8c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	685a      	ldr	r2, [r3, #4]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d20f      	bcs.n	800ce8c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	2100      	movs	r1, #0
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f000 ff65 	bl	800dd40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce7e:	2300      	movs	r3, #0
 800ce80:	2200      	movs	r2, #0
 800ce82:	2100      	movs	r1, #0
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f001 fcf7 	bl	800e878 <USBD_LL_PrepareReceive>
 800ce8a:	e018      	b.n	800cebe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	d10b      	bne.n	800ceb0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d005      	beq.n	800ceb0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ceb0:	2180      	movs	r1, #128	; 0x80
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f001 fc36 	bl	800e724 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ceb8:	68f8      	ldr	r0, [r7, #12]
 800ceba:	f000 ff93 	bl	800dde4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d122      	bne.n	800cf0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f7ff fe98 	bl	800cbfe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ced6:	e01a      	b.n	800cf0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d114      	bne.n	800cf0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00e      	beq.n	800cf0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	7afa      	ldrb	r2, [r7, #11]
 800cefa:	4611      	mov	r1, r2
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	4798      	blx	r3
 800cf00:	4603      	mov	r3, r0
 800cf02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cf04:	7dfb      	ldrb	r3, [r7, #23]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	e000      	b.n	800cf10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d101      	bne.n	800cf4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cf48:	2303      	movs	r3, #3
 800cf4a:	e02f      	b.n	800cfac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d00f      	beq.n	800cf76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d009      	beq.n	800cf76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	6852      	ldr	r2, [r2, #4]
 800cf6e:	b2d2      	uxtb	r2, r2
 800cf70:	4611      	mov	r1, r2
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf76:	2340      	movs	r3, #64	; 0x40
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f001 fb8c 	bl	800e69a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2201      	movs	r2, #1
 800cf86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2240      	movs	r2, #64	; 0x40
 800cf8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cf92:	2340      	movs	r3, #64	; 0x40
 800cf94:	2200      	movs	r2, #0
 800cf96:	2180      	movs	r1, #128	; 0x80
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f001 fb7e 	bl	800e69a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2201      	movs	r2, #1
 800cfa2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2240      	movs	r2, #64	; 0x40
 800cfa8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2204      	movs	r2, #4
 800cfee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr

0800d000 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b04      	cmp	r3, #4
 800d012:	d106      	bne.n	800d022 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d022:	2300      	movs	r3, #0
}
 800d024:	4618      	mov	r0, r3
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d101      	bne.n	800d046 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d042:	2303      	movs	r3, #3
 800d044:	e012      	b.n	800d06c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	2b03      	cmp	r3, #3
 800d050:	d10b      	bne.n	800d06a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d058:	69db      	ldr	r3, [r3, #28]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d064:	69db      	ldr	r3, [r3, #28]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d06a:	2300      	movs	r3, #0
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d086:	2b00      	cmp	r3, #0
 800d088:	d101      	bne.n	800d08e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d08a:	2303      	movs	r3, #3
 800d08c:	e014      	b.n	800d0b8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b03      	cmp	r3, #3
 800d098:	d10d      	bne.n	800d0b6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d007      	beq.n	800d0b6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	78fa      	ldrb	r2, [r7, #3]
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	e014      	b.n	800d104 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d10d      	bne.n	800d102 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d007      	beq.n	800d102 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	78fa      	ldrb	r2, [r7, #3]
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d102:	2300      	movs	r3, #0
}
 800d104:	4618      	mov	r0, r3
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	370c      	adds	r7, #12
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d009      	beq.n	800d150 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	6852      	ldr	r2, [r2, #4]
 800d148:	b2d2      	uxtb	r2, r2
 800d14a:	4611      	mov	r1, r2
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	4798      	blx	r3
  }

  return USBD_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b087      	sub	sp, #28
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	3301      	adds	r3, #1
 800d170:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d178:	8a3b      	ldrh	r3, [r7, #16]
 800d17a:	021b      	lsls	r3, r3, #8
 800d17c:	b21a      	sxth	r2, r3
 800d17e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d182:	4313      	orrs	r3, r2
 800d184:	b21b      	sxth	r3, r3
 800d186:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d188:	89fb      	ldrh	r3, [r7, #14]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	371c      	adds	r7, #28
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
	...

0800d198 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1ae:	2b40      	cmp	r3, #64	; 0x40
 800d1b0:	d005      	beq.n	800d1be <USBD_StdDevReq+0x26>
 800d1b2:	2b40      	cmp	r3, #64	; 0x40
 800d1b4:	d853      	bhi.n	800d25e <USBD_StdDevReq+0xc6>
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00b      	beq.n	800d1d2 <USBD_StdDevReq+0x3a>
 800d1ba:	2b20      	cmp	r3, #32
 800d1bc:	d14f      	bne.n	800d25e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1c4:	689b      	ldr	r3, [r3, #8]
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	4798      	blx	r3
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d1d0:	e04a      	b.n	800d268 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	785b      	ldrb	r3, [r3, #1]
 800d1d6:	2b09      	cmp	r3, #9
 800d1d8:	d83b      	bhi.n	800d252 <USBD_StdDevReq+0xba>
 800d1da:	a201      	add	r2, pc, #4	; (adr r2, 800d1e0 <USBD_StdDevReq+0x48>)
 800d1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e0:	0800d235 	.word	0x0800d235
 800d1e4:	0800d249 	.word	0x0800d249
 800d1e8:	0800d253 	.word	0x0800d253
 800d1ec:	0800d23f 	.word	0x0800d23f
 800d1f0:	0800d253 	.word	0x0800d253
 800d1f4:	0800d213 	.word	0x0800d213
 800d1f8:	0800d209 	.word	0x0800d209
 800d1fc:	0800d253 	.word	0x0800d253
 800d200:	0800d22b 	.word	0x0800d22b
 800d204:	0800d21d 	.word	0x0800d21d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f9de 	bl	800d5cc <USBD_GetDescriptor>
          break;
 800d210:	e024      	b.n	800d25c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fb43 	bl	800d8a0 <USBD_SetAddress>
          break;
 800d21a:	e01f      	b.n	800d25c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d21c:	6839      	ldr	r1, [r7, #0]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fb82 	bl	800d928 <USBD_SetConfig>
 800d224:	4603      	mov	r3, r0
 800d226:	73fb      	strb	r3, [r7, #15]
          break;
 800d228:	e018      	b.n	800d25c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d22a:	6839      	ldr	r1, [r7, #0]
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 fc21 	bl	800da74 <USBD_GetConfig>
          break;
 800d232:	e013      	b.n	800d25c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fc52 	bl	800dae0 <USBD_GetStatus>
          break;
 800d23c:	e00e      	b.n	800d25c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fc81 	bl	800db48 <USBD_SetFeature>
          break;
 800d246:	e009      	b.n	800d25c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fc90 	bl	800db70 <USBD_ClrFeature>
          break;
 800d250:	e004      	b.n	800d25c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fce7 	bl	800dc28 <USBD_CtlError>
          break;
 800d25a:	bf00      	nop
      }
      break;
 800d25c:	e004      	b.n	800d268 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fce1 	bl	800dc28 <USBD_CtlError>
      break;
 800d266:	bf00      	nop
  }

  return ret;
 800d268:	7bfb      	ldrb	r3, [r7, #15]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop

0800d274 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d28a:	2b40      	cmp	r3, #64	; 0x40
 800d28c:	d005      	beq.n	800d29a <USBD_StdItfReq+0x26>
 800d28e:	2b40      	cmp	r3, #64	; 0x40
 800d290:	d82f      	bhi.n	800d2f2 <USBD_StdItfReq+0x7e>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <USBD_StdItfReq+0x26>
 800d296:	2b20      	cmp	r3, #32
 800d298:	d12b      	bne.n	800d2f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d81d      	bhi.n	800d2e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	889b      	ldrh	r3, [r3, #4]
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d813      	bhi.n	800d2da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	6839      	ldr	r1, [r7, #0]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	4798      	blx	r3
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	88db      	ldrh	r3, [r3, #6]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d110      	bne.n	800d2ee <USBD_StdItfReq+0x7a>
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d10d      	bne.n	800d2ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 fd73 	bl	800ddbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d2d8:	e009      	b.n	800d2ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 fca3 	bl	800dc28 <USBD_CtlError>
          break;
 800d2e2:	e004      	b.n	800d2ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fc9e 	bl	800dc28 <USBD_CtlError>
          break;
 800d2ec:	e000      	b.n	800d2f0 <USBD_StdItfReq+0x7c>
          break;
 800d2ee:	bf00      	nop
      }
      break;
 800d2f0:	e004      	b.n	800d2fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 fc97 	bl	800dc28 <USBD_CtlError>
      break;
 800d2fa:	bf00      	nop
  }

  return ret;
 800d2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	889b      	ldrh	r3, [r3, #4]
 800d318:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d322:	2b40      	cmp	r3, #64	; 0x40
 800d324:	d007      	beq.n	800d336 <USBD_StdEPReq+0x30>
 800d326:	2b40      	cmp	r3, #64	; 0x40
 800d328:	f200 8145 	bhi.w	800d5b6 <USBD_StdEPReq+0x2b0>
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00c      	beq.n	800d34a <USBD_StdEPReq+0x44>
 800d330:	2b20      	cmp	r3, #32
 800d332:	f040 8140 	bne.w	800d5b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	4798      	blx	r3
 800d344:	4603      	mov	r3, r0
 800d346:	73fb      	strb	r3, [r7, #15]
      break;
 800d348:	e13a      	b.n	800d5c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	785b      	ldrb	r3, [r3, #1]
 800d34e:	2b03      	cmp	r3, #3
 800d350:	d007      	beq.n	800d362 <USBD_StdEPReq+0x5c>
 800d352:	2b03      	cmp	r3, #3
 800d354:	f300 8129 	bgt.w	800d5aa <USBD_StdEPReq+0x2a4>
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d07f      	beq.n	800d45c <USBD_StdEPReq+0x156>
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d03c      	beq.n	800d3da <USBD_StdEPReq+0xd4>
 800d360:	e123      	b.n	800d5aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d002      	beq.n	800d374 <USBD_StdEPReq+0x6e>
 800d36e:	2b03      	cmp	r3, #3
 800d370:	d016      	beq.n	800d3a0 <USBD_StdEPReq+0x9a>
 800d372:	e02c      	b.n	800d3ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d374:	7bbb      	ldrb	r3, [r7, #14]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00d      	beq.n	800d396 <USBD_StdEPReq+0x90>
 800d37a:	7bbb      	ldrb	r3, [r7, #14]
 800d37c:	2b80      	cmp	r3, #128	; 0x80
 800d37e:	d00a      	beq.n	800d396 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d380:	7bbb      	ldrb	r3, [r7, #14]
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f001 f9cd 	bl	800e724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d38a:	2180      	movs	r1, #128	; 0x80
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f001 f9c9 	bl	800e724 <USBD_LL_StallEP>
 800d392:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d394:	e020      	b.n	800d3d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 fc45 	bl	800dc28 <USBD_CtlError>
              break;
 800d39e:	e01b      	b.n	800d3d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	885b      	ldrh	r3, [r3, #2]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10e      	bne.n	800d3c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d3a8:	7bbb      	ldrb	r3, [r7, #14]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00b      	beq.n	800d3c6 <USBD_StdEPReq+0xc0>
 800d3ae:	7bbb      	ldrb	r3, [r7, #14]
 800d3b0:	2b80      	cmp	r3, #128	; 0x80
 800d3b2:	d008      	beq.n	800d3c6 <USBD_StdEPReq+0xc0>
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	88db      	ldrh	r3, [r3, #6]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d104      	bne.n	800d3c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	4619      	mov	r1, r3
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f001 f9af 	bl	800e724 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fcf9 	bl	800ddbe <USBD_CtlSendStatus>

              break;
 800d3cc:	e004      	b.n	800d3d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 fc29 	bl	800dc28 <USBD_CtlError>
              break;
 800d3d6:	bf00      	nop
          }
          break;
 800d3d8:	e0ec      	b.n	800d5b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	d002      	beq.n	800d3ec <USBD_StdEPReq+0xe6>
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d016      	beq.n	800d418 <USBD_StdEPReq+0x112>
 800d3ea:	e030      	b.n	800d44e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00d      	beq.n	800d40e <USBD_StdEPReq+0x108>
 800d3f2:	7bbb      	ldrb	r3, [r7, #14]
 800d3f4:	2b80      	cmp	r3, #128	; 0x80
 800d3f6:	d00a      	beq.n	800d40e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d3f8:	7bbb      	ldrb	r3, [r7, #14]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f001 f991 	bl	800e724 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d402:	2180      	movs	r1, #128	; 0x80
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f001 f98d 	bl	800e724 <USBD_LL_StallEP>
 800d40a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d40c:	e025      	b.n	800d45a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d40e:	6839      	ldr	r1, [r7, #0]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fc09 	bl	800dc28 <USBD_CtlError>
              break;
 800d416:	e020      	b.n	800d45a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	885b      	ldrh	r3, [r3, #2]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d11b      	bne.n	800d458 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d426:	2b00      	cmp	r3, #0
 800d428:	d004      	beq.n	800d434 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d42a:	7bbb      	ldrb	r3, [r7, #14]
 800d42c:	4619      	mov	r1, r3
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f001 f997 	bl	800e762 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 fcc2 	bl	800ddbe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	4798      	blx	r3
 800d448:	4603      	mov	r3, r0
 800d44a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d44c:	e004      	b.n	800d458 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fbe9 	bl	800dc28 <USBD_CtlError>
              break;
 800d456:	e000      	b.n	800d45a <USBD_StdEPReq+0x154>
              break;
 800d458:	bf00      	nop
          }
          break;
 800d45a:	e0ab      	b.n	800d5b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b02      	cmp	r3, #2
 800d466:	d002      	beq.n	800d46e <USBD_StdEPReq+0x168>
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d032      	beq.n	800d4d2 <USBD_StdEPReq+0x1cc>
 800d46c:	e097      	b.n	800d59e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d46e:	7bbb      	ldrb	r3, [r7, #14]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d007      	beq.n	800d484 <USBD_StdEPReq+0x17e>
 800d474:	7bbb      	ldrb	r3, [r7, #14]
 800d476:	2b80      	cmp	r3, #128	; 0x80
 800d478:	d004      	beq.n	800d484 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fbd3 	bl	800dc28 <USBD_CtlError>
                break;
 800d482:	e091      	b.n	800d5a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	da0b      	bge.n	800d4a4 <USBD_StdEPReq+0x19e>
 800d48c:	7bbb      	ldrb	r3, [r7, #14]
 800d48e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	3310      	adds	r3, #16
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	4413      	add	r3, r2
 800d4a0:	3304      	adds	r3, #4
 800d4a2:	e00b      	b.n	800d4bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
 800d4a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	4413      	add	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2202      	movs	r2, #2
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fc1d 	bl	800dd0a <USBD_CtlSendData>
              break;
 800d4d0:	e06a      	b.n	800d5a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d4d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da11      	bge.n	800d4fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4da:	7bbb      	ldrb	r3, [r7, #14]
 800d4dc:	f003 020f 	and.w	r2, r3, #15
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4413      	add	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	440b      	add	r3, r1
 800d4ec:	3324      	adds	r3, #36	; 0x24
 800d4ee:	881b      	ldrh	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d117      	bne.n	800d524 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fb96 	bl	800dc28 <USBD_CtlError>
                  break;
 800d4fc:	e054      	b.n	800d5a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
 800d500:	f003 020f 	and.w	r2, r3, #15
 800d504:	6879      	ldr	r1, [r7, #4]
 800d506:	4613      	mov	r3, r2
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	4413      	add	r3, r2
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	440b      	add	r3, r1
 800d510:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d514:	881b      	ldrh	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d104      	bne.n	800d524 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fb83 	bl	800dc28 <USBD_CtlError>
                  break;
 800d522:	e041      	b.n	800d5a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	da0b      	bge.n	800d544 <USBD_StdEPReq+0x23e>
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d532:	4613      	mov	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	3310      	adds	r3, #16
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	4413      	add	r3, r2
 800d540:	3304      	adds	r3, #4
 800d542:	e00b      	b.n	800d55c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	4413      	add	r3, r2
 800d55a:	3304      	adds	r3, #4
 800d55c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d55e:	7bbb      	ldrb	r3, [r7, #14]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <USBD_StdEPReq+0x264>
 800d564:	7bbb      	ldrb	r3, [r7, #14]
 800d566:	2b80      	cmp	r3, #128	; 0x80
 800d568:	d103      	bne.n	800d572 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	e00e      	b.n	800d590 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d572:	7bbb      	ldrb	r3, [r7, #14]
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f001 f912 	bl	800e7a0 <USBD_LL_IsStallEP>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	2201      	movs	r2, #1
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	e002      	b.n	800d590 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2200      	movs	r2, #0
 800d58e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	2202      	movs	r2, #2
 800d594:	4619      	mov	r1, r3
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fbb7 	bl	800dd0a <USBD_CtlSendData>
              break;
 800d59c:	e004      	b.n	800d5a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d59e:	6839      	ldr	r1, [r7, #0]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fb41 	bl	800dc28 <USBD_CtlError>
              break;
 800d5a6:	bf00      	nop
          }
          break;
 800d5a8:	e004      	b.n	800d5b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 fb3b 	bl	800dc28 <USBD_CtlError>
          break;
 800d5b2:	bf00      	nop
      }
      break;
 800d5b4:	e004      	b.n	800d5c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fb35 	bl	800dc28 <USBD_CtlError>
      break;
 800d5be:	bf00      	nop
  }

  return ret;
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
	...

0800d5cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	885b      	ldrh	r3, [r3, #2]
 800d5e6:	0a1b      	lsrs	r3, r3, #8
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	2b06      	cmp	r3, #6
 800d5ee:	f200 8128 	bhi.w	800d842 <USBD_GetDescriptor+0x276>
 800d5f2:	a201      	add	r2, pc, #4	; (adr r2, 800d5f8 <USBD_GetDescriptor+0x2c>)
 800d5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f8:	0800d615 	.word	0x0800d615
 800d5fc:	0800d62d 	.word	0x0800d62d
 800d600:	0800d66d 	.word	0x0800d66d
 800d604:	0800d843 	.word	0x0800d843
 800d608:	0800d843 	.word	0x0800d843
 800d60c:	0800d7e3 	.word	0x0800d7e3
 800d610:	0800d80f 	.word	0x0800d80f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	7c12      	ldrb	r2, [r2, #16]
 800d620:	f107 0108 	add.w	r1, r7, #8
 800d624:	4610      	mov	r0, r2
 800d626:	4798      	blx	r3
 800d628:	60f8      	str	r0, [r7, #12]
      break;
 800d62a:	e112      	b.n	800d852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	7c1b      	ldrb	r3, [r3, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10d      	bne.n	800d650 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63c:	f107 0208 	add.w	r2, r7, #8
 800d640:	4610      	mov	r0, r2
 800d642:	4798      	blx	r3
 800d644:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3301      	adds	r3, #1
 800d64a:	2202      	movs	r2, #2
 800d64c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d64e:	e100      	b.n	800d852 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d658:	f107 0208 	add.w	r2, r7, #8
 800d65c:	4610      	mov	r0, r2
 800d65e:	4798      	blx	r3
 800d660:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3301      	adds	r3, #1
 800d666:	2202      	movs	r2, #2
 800d668:	701a      	strb	r2, [r3, #0]
      break;
 800d66a:	e0f2      	b.n	800d852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	885b      	ldrh	r3, [r3, #2]
 800d670:	b2db      	uxtb	r3, r3
 800d672:	2b05      	cmp	r3, #5
 800d674:	f200 80ac 	bhi.w	800d7d0 <USBD_GetDescriptor+0x204>
 800d678:	a201      	add	r2, pc, #4	; (adr r2, 800d680 <USBD_GetDescriptor+0xb4>)
 800d67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67e:	bf00      	nop
 800d680:	0800d699 	.word	0x0800d699
 800d684:	0800d6cd 	.word	0x0800d6cd
 800d688:	0800d701 	.word	0x0800d701
 800d68c:	0800d735 	.word	0x0800d735
 800d690:	0800d769 	.word	0x0800d769
 800d694:	0800d79d 	.word	0x0800d79d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d00b      	beq.n	800d6bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	7c12      	ldrb	r2, [r2, #16]
 800d6b0:	f107 0108 	add.w	r1, r7, #8
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	4798      	blx	r3
 800d6b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ba:	e091      	b.n	800d7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 fab2 	bl	800dc28 <USBD_CtlError>
            err++;
 800d6c4:	7afb      	ldrb	r3, [r7, #11]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6ca:	e089      	b.n	800d7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00b      	beq.n	800d6f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	7c12      	ldrb	r2, [r2, #16]
 800d6e4:	f107 0108 	add.w	r1, r7, #8
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	4798      	blx	r3
 800d6ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6ee:	e077      	b.n	800d7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fa98 	bl	800dc28 <USBD_CtlError>
            err++;
 800d6f8:	7afb      	ldrb	r3, [r7, #11]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d6fe:	e06f      	b.n	800d7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00b      	beq.n	800d724 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	7c12      	ldrb	r2, [r2, #16]
 800d718:	f107 0108 	add.w	r1, r7, #8
 800d71c:	4610      	mov	r0, r2
 800d71e:	4798      	blx	r3
 800d720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d722:	e05d      	b.n	800d7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d724:	6839      	ldr	r1, [r7, #0]
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 fa7e 	bl	800dc28 <USBD_CtlError>
            err++;
 800d72c:	7afb      	ldrb	r3, [r7, #11]
 800d72e:	3301      	adds	r3, #1
 800d730:	72fb      	strb	r3, [r7, #11]
          break;
 800d732:	e055      	b.n	800d7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00b      	beq.n	800d758 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	7c12      	ldrb	r2, [r2, #16]
 800d74c:	f107 0108 	add.w	r1, r7, #8
 800d750:	4610      	mov	r0, r2
 800d752:	4798      	blx	r3
 800d754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d756:	e043      	b.n	800d7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fa64 	bl	800dc28 <USBD_CtlError>
            err++;
 800d760:	7afb      	ldrb	r3, [r7, #11]
 800d762:	3301      	adds	r3, #1
 800d764:	72fb      	strb	r3, [r7, #11]
          break;
 800d766:	e03b      	b.n	800d7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d76e:	695b      	ldr	r3, [r3, #20]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00b      	beq.n	800d78c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d77a:	695b      	ldr	r3, [r3, #20]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	7c12      	ldrb	r2, [r2, #16]
 800d780:	f107 0108 	add.w	r1, r7, #8
 800d784:	4610      	mov	r0, r2
 800d786:	4798      	blx	r3
 800d788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d78a:	e029      	b.n	800d7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fa4a 	bl	800dc28 <USBD_CtlError>
            err++;
 800d794:	7afb      	ldrb	r3, [r7, #11]
 800d796:	3301      	adds	r3, #1
 800d798:	72fb      	strb	r3, [r7, #11]
          break;
 800d79a:	e021      	b.n	800d7e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00b      	beq.n	800d7c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7ae:	699b      	ldr	r3, [r3, #24]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	7c12      	ldrb	r2, [r2, #16]
 800d7b4:	f107 0108 	add.w	r1, r7, #8
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	4798      	blx	r3
 800d7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7be:	e00f      	b.n	800d7e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7c0:	6839      	ldr	r1, [r7, #0]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fa30 	bl	800dc28 <USBD_CtlError>
            err++;
 800d7c8:	7afb      	ldrb	r3, [r7, #11]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ce:	e007      	b.n	800d7e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fa28 	bl	800dc28 <USBD_CtlError>
          err++;
 800d7d8:	7afb      	ldrb	r3, [r7, #11]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d7de:	bf00      	nop
      }
      break;
 800d7e0:	e037      	b.n	800d852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	7c1b      	ldrb	r3, [r3, #16]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d109      	bne.n	800d7fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f2:	f107 0208 	add.w	r2, r7, #8
 800d7f6:	4610      	mov	r0, r2
 800d7f8:	4798      	blx	r3
 800d7fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d7fc:	e029      	b.n	800d852 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 fa11 	bl	800dc28 <USBD_CtlError>
        err++;
 800d806:	7afb      	ldrb	r3, [r7, #11]
 800d808:	3301      	adds	r3, #1
 800d80a:	72fb      	strb	r3, [r7, #11]
      break;
 800d80c:	e021      	b.n	800d852 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	7c1b      	ldrb	r3, [r3, #16]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10d      	bne.n	800d832 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d81e:	f107 0208 	add.w	r2, r7, #8
 800d822:	4610      	mov	r0, r2
 800d824:	4798      	blx	r3
 800d826:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3301      	adds	r3, #1
 800d82c:	2207      	movs	r2, #7
 800d82e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d830:	e00f      	b.n	800d852 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f9f7 	bl	800dc28 <USBD_CtlError>
        err++;
 800d83a:	7afb      	ldrb	r3, [r7, #11]
 800d83c:	3301      	adds	r3, #1
 800d83e:	72fb      	strb	r3, [r7, #11]
      break;
 800d840:	e007      	b.n	800d852 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f9ef 	bl	800dc28 <USBD_CtlError>
      err++;
 800d84a:	7afb      	ldrb	r3, [r7, #11]
 800d84c:	3301      	adds	r3, #1
 800d84e:	72fb      	strb	r3, [r7, #11]
      break;
 800d850:	bf00      	nop
  }

  if (err != 0U)
 800d852:	7afb      	ldrb	r3, [r7, #11]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d11e      	bne.n	800d896 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	88db      	ldrh	r3, [r3, #6]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d016      	beq.n	800d88e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d860:	893b      	ldrh	r3, [r7, #8]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00e      	beq.n	800d884 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	88da      	ldrh	r2, [r3, #6]
 800d86a:	893b      	ldrh	r3, [r7, #8]
 800d86c:	4293      	cmp	r3, r2
 800d86e:	bf28      	it	cs
 800d870:	4613      	movcs	r3, r2
 800d872:	b29b      	uxth	r3, r3
 800d874:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d876:	893b      	ldrh	r3, [r7, #8]
 800d878:	461a      	mov	r2, r3
 800d87a:	68f9      	ldr	r1, [r7, #12]
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fa44 	bl	800dd0a <USBD_CtlSendData>
 800d882:	e009      	b.n	800d898 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f9ce 	bl	800dc28 <USBD_CtlError>
 800d88c:	e004      	b.n	800d898 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fa95 	bl	800ddbe <USBD_CtlSendStatus>
 800d894:	e000      	b.n	800d898 <USBD_GetDescriptor+0x2cc>
    return;
 800d896:	bf00      	nop
  }
}
 800d898:	3710      	adds	r7, #16
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop

0800d8a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	889b      	ldrh	r3, [r3, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d131      	bne.n	800d916 <USBD_SetAddress+0x76>
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	88db      	ldrh	r3, [r3, #6]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d12d      	bne.n	800d916 <USBD_SetAddress+0x76>
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	885b      	ldrh	r3, [r3, #2]
 800d8be:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c0:	d829      	bhi.n	800d916 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	885b      	ldrh	r3, [r3, #2]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	2b03      	cmp	r3, #3
 800d8d8:	d104      	bne.n	800d8e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f9a3 	bl	800dc28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8e2:	e01d      	b.n	800d920 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7bfa      	ldrb	r2, [r7, #15]
 800d8e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 ff81 	bl	800e7f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fa61 	bl	800ddbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d004      	beq.n	800d90c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2202      	movs	r2, #2
 800d906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d90a:	e009      	b.n	800d920 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d914:	e004      	b.n	800d920 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f985 	bl	800dc28 <USBD_CtlError>
  }
}
 800d91e:	bf00      	nop
 800d920:	bf00      	nop
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	885b      	ldrh	r3, [r3, #2]
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	4b4c      	ldr	r3, [pc, #304]	; (800da70 <USBD_SetConfig+0x148>)
 800d93e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d940:	4b4b      	ldr	r3, [pc, #300]	; (800da70 <USBD_SetConfig+0x148>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d905      	bls.n	800d954 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d948:	6839      	ldr	r1, [r7, #0]
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f96c 	bl	800dc28 <USBD_CtlError>
    return USBD_FAIL;
 800d950:	2303      	movs	r3, #3
 800d952:	e088      	b.n	800da66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d002      	beq.n	800d966 <USBD_SetConfig+0x3e>
 800d960:	2b03      	cmp	r3, #3
 800d962:	d025      	beq.n	800d9b0 <USBD_SetConfig+0x88>
 800d964:	e071      	b.n	800da4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d966:	4b42      	ldr	r3, [pc, #264]	; (800da70 <USBD_SetConfig+0x148>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d01c      	beq.n	800d9a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d96e:	4b40      	ldr	r3, [pc, #256]	; (800da70 <USBD_SetConfig+0x148>)
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d978:	4b3d      	ldr	r3, [pc, #244]	; (800da70 <USBD_SetConfig+0x148>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	4619      	mov	r1, r3
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff f948 	bl	800cc14 <USBD_SetClassConfig>
 800d984:	4603      	mov	r3, r0
 800d986:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d988:	7bfb      	ldrb	r3, [r7, #15]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d004      	beq.n	800d998 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f949 	bl	800dc28 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d996:	e065      	b.n	800da64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fa10 	bl	800ddbe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2203      	movs	r2, #3
 800d9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d9a6:	e05d      	b.n	800da64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 fa08 	bl	800ddbe <USBD_CtlSendStatus>
      break;
 800d9ae:	e059      	b.n	800da64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d9b0:	4b2f      	ldr	r3, [pc, #188]	; (800da70 <USBD_SetConfig+0x148>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d112      	bne.n	800d9de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2202      	movs	r2, #2
 800d9bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d9c0:	4b2b      	ldr	r3, [pc, #172]	; (800da70 <USBD_SetConfig+0x148>)
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d9ca:	4b29      	ldr	r3, [pc, #164]	; (800da70 <USBD_SetConfig+0x148>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7ff f93b 	bl	800cc4c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f9f1 	bl	800ddbe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d9dc:	e042      	b.n	800da64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d9de:	4b24      	ldr	r3, [pc, #144]	; (800da70 <USBD_SetConfig+0x148>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d02a      	beq.n	800da42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7ff f929 	bl	800cc4c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d9fa:	4b1d      	ldr	r3, [pc, #116]	; (800da70 <USBD_SetConfig+0x148>)
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da04:	4b1a      	ldr	r3, [pc, #104]	; (800da70 <USBD_SetConfig+0x148>)
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff f902 	bl	800cc14 <USBD_SetClassConfig>
 800da10:	4603      	mov	r3, r0
 800da12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00f      	beq.n	800da3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f903 	bl	800dc28 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	b2db      	uxtb	r3, r3
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff f90e 	bl	800cc4c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2202      	movs	r2, #2
 800da34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800da38:	e014      	b.n	800da64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f9bf 	bl	800ddbe <USBD_CtlSendStatus>
      break;
 800da40:	e010      	b.n	800da64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f9bb 	bl	800ddbe <USBD_CtlSendStatus>
      break;
 800da48:	e00c      	b.n	800da64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f8eb 	bl	800dc28 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800da52:	4b07      	ldr	r3, [pc, #28]	; (800da70 <USBD_SetConfig+0x148>)
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	4619      	mov	r1, r3
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff f8f7 	bl	800cc4c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800da5e:	2303      	movs	r3, #3
 800da60:	73fb      	strb	r3, [r7, #15]
      break;
 800da62:	bf00      	nop
  }

  return ret;
 800da64:	7bfb      	ldrb	r3, [r7, #15]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	240022ba 	.word	0x240022ba

0800da74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	88db      	ldrh	r3, [r3, #6]
 800da82:	2b01      	cmp	r3, #1
 800da84:	d004      	beq.n	800da90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f8cd 	bl	800dc28 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da8e:	e023      	b.n	800dad8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b02      	cmp	r3, #2
 800da9a:	dc02      	bgt.n	800daa2 <USBD_GetConfig+0x2e>
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dc03      	bgt.n	800daa8 <USBD_GetConfig+0x34>
 800daa0:	e015      	b.n	800dace <USBD_GetConfig+0x5a>
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d00b      	beq.n	800dabe <USBD_GetConfig+0x4a>
 800daa6:	e012      	b.n	800dace <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3308      	adds	r3, #8
 800dab2:	2201      	movs	r2, #1
 800dab4:	4619      	mov	r1, r3
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f927 	bl	800dd0a <USBD_CtlSendData>
        break;
 800dabc:	e00c      	b.n	800dad8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3304      	adds	r3, #4
 800dac2:	2201      	movs	r2, #1
 800dac4:	4619      	mov	r1, r3
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 f91f 	bl	800dd0a <USBD_CtlSendData>
        break;
 800dacc:	e004      	b.n	800dad8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dace:	6839      	ldr	r1, [r7, #0]
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 f8a9 	bl	800dc28 <USBD_CtlError>
        break;
 800dad6:	bf00      	nop
}
 800dad8:	bf00      	nop
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	3b01      	subs	r3, #1
 800daf4:	2b02      	cmp	r3, #2
 800daf6:	d81e      	bhi.n	800db36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	88db      	ldrh	r3, [r3, #6]
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	d004      	beq.n	800db0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800db00:	6839      	ldr	r1, [r7, #0]
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 f890 	bl	800dc28 <USBD_CtlError>
        break;
 800db08:	e01a      	b.n	800db40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800db16:	2b00      	cmp	r3, #0
 800db18:	d005      	beq.n	800db26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	f043 0202 	orr.w	r2, r3, #2
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	330c      	adds	r3, #12
 800db2a:	2202      	movs	r2, #2
 800db2c:	4619      	mov	r1, r3
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f000 f8eb 	bl	800dd0a <USBD_CtlSendData>
      break;
 800db34:	e004      	b.n	800db40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800db36:	6839      	ldr	r1, [r7, #0]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f875 	bl	800dc28 <USBD_CtlError>
      break;
 800db3e:	bf00      	nop
  }
}
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	885b      	ldrh	r3, [r3, #2]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d106      	bne.n	800db68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 f92b 	bl	800ddbe <USBD_CtlSendStatus>
  }
}
 800db68:	bf00      	nop
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db80:	b2db      	uxtb	r3, r3
 800db82:	3b01      	subs	r3, #1
 800db84:	2b02      	cmp	r3, #2
 800db86:	d80b      	bhi.n	800dba0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	885b      	ldrh	r3, [r3, #2]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d10c      	bne.n	800dbaa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f910 	bl	800ddbe <USBD_CtlSendStatus>
      }
      break;
 800db9e:	e004      	b.n	800dbaa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 f840 	bl	800dc28 <USBD_CtlError>
      break;
 800dba8:	e000      	b.n	800dbac <USBD_ClrFeature+0x3c>
      break;
 800dbaa:	bf00      	nop
  }
}
 800dbac:	bf00      	nop
 800dbae:	3708      	adds	r7, #8
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	781a      	ldrb	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	781a      	ldrb	r2, [r3, #0]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff fabb 	bl	800d15a <SWAPBYTE>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7ff faae 	bl	800d15a <SWAPBYTE>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	461a      	mov	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	3301      	adds	r3, #1
 800dc0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7ff faa1 	bl	800d15a <SWAPBYTE>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	80da      	strh	r2, [r3, #6]
}
 800dc20:	bf00      	nop
 800dc22:	3710      	adds	r7, #16
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc32:	2180      	movs	r1, #128	; 0x80
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 fd75 	bl	800e724 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fd71 	bl	800e724 <USBD_LL_StallEP>
}
 800dc42:	bf00      	nop
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b086      	sub	sp, #24
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	60f8      	str	r0, [r7, #12]
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc56:	2300      	movs	r3, #0
 800dc58:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d036      	beq.n	800dcce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800dc64:	6938      	ldr	r0, [r7, #16]
 800dc66:	f000 f836 	bl	800dcd6 <USBD_GetLen>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
 800dc7a:	68ba      	ldr	r2, [r7, #8]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	7812      	ldrb	r2, [r2, #0]
 800dc82:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	3301      	adds	r3, #1
 800dc88:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dc8a:	7dfb      	ldrb	r3, [r7, #23]
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	4413      	add	r3, r2
 800dc90:	2203      	movs	r2, #3
 800dc92:	701a      	strb	r2, [r3, #0]
  idx++;
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
 800dc96:	3301      	adds	r3, #1
 800dc98:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dc9a:	e013      	b.n	800dcc4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dc9c:	7dfb      	ldrb	r3, [r7, #23]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	4413      	add	r3, r2
 800dca2:	693a      	ldr	r2, [r7, #16]
 800dca4:	7812      	ldrb	r2, [r2, #0]
 800dca6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	613b      	str	r3, [r7, #16]
    idx++;
 800dcae:	7dfb      	ldrb	r3, [r7, #23]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
 800dcb6:	68ba      	ldr	r2, [r7, #8]
 800dcb8:	4413      	add	r3, r2
 800dcba:	2200      	movs	r2, #0
 800dcbc:	701a      	strb	r2, [r3, #0]
    idx++;
 800dcbe:	7dfb      	ldrb	r3, [r7, #23]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1e7      	bne.n	800dc9c <USBD_GetString+0x52>
 800dccc:	e000      	b.n	800dcd0 <USBD_GetString+0x86>
    return;
 800dcce:	bf00      	nop
  }
}
 800dcd0:	3718      	adds	r7, #24
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dcd6:	b480      	push	{r7}
 800dcd8:	b085      	sub	sp, #20
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dcde:	2300      	movs	r3, #0
 800dce0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dce6:	e005      	b.n	800dcf4 <USBD_GetLen+0x1e>
  {
    len++;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
 800dcea:	3301      	adds	r3, #1
 800dcec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d1f5      	bne.n	800dce8 <USBD_GetLen+0x12>
  }

  return len;
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3714      	adds	r7, #20
 800dd02:	46bd      	mov	sp, r7
 800dd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd08:	4770      	bx	lr

0800dd0a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b084      	sub	sp, #16
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	60f8      	str	r0, [r7, #12]
 800dd12:	60b9      	str	r1, [r7, #8]
 800dd14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2202      	movs	r2, #2
 800dd1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68ba      	ldr	r2, [r7, #8]
 800dd2e:	2100      	movs	r1, #0
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 fd80 	bl	800e836 <USBD_LL_Transmit>

  return USBD_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	2100      	movs	r1, #0
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 fd6f 	bl	800e836 <USBD_LL_Transmit>

  return USBD_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b084      	sub	sp, #16
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	60f8      	str	r0, [r7, #12]
 800dd6a:	60b9      	str	r1, [r7, #8]
 800dd6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2203      	movs	r2, #3
 800dd72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	687a      	ldr	r2, [r7, #4]
 800dd82:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	68ba      	ldr	r2, [r7, #8]
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	f000 fd73 	bl	800e878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd92:	2300      	movs	r3, #0
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3710      	adds	r7, #16
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}

0800dd9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	2100      	movs	r1, #0
 800ddae:	68f8      	ldr	r0, [r7, #12]
 800ddb0:	f000 fd62 	bl	800e878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b082      	sub	sp, #8
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2204      	movs	r2, #4
 800ddca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ddce:	2300      	movs	r3, #0
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fd2e 	bl	800e836 <USBD_LL_Transmit>

  return USBD_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2205      	movs	r2, #5
 800ddf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fd3c 	bl	800e878 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
	...

0800de0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800de10:	2200      	movs	r2, #0
 800de12:	4913      	ldr	r1, [pc, #76]	; (800de60 <MX_USB_DEVICE_Init+0x54>)
 800de14:	4813      	ldr	r0, [pc, #76]	; (800de64 <MX_USB_DEVICE_Init+0x58>)
 800de16:	f7fe fe8f 	bl	800cb38 <USBD_Init>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d001      	beq.n	800de24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800de20:	f7f2 fe3e 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800de24:	4910      	ldr	r1, [pc, #64]	; (800de68 <MX_USB_DEVICE_Init+0x5c>)
 800de26:	480f      	ldr	r0, [pc, #60]	; (800de64 <MX_USB_DEVICE_Init+0x58>)
 800de28:	f7fe feb6 	bl	800cb98 <USBD_RegisterClass>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800de32:	f7f2 fe35 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800de36:	490d      	ldr	r1, [pc, #52]	; (800de6c <MX_USB_DEVICE_Init+0x60>)
 800de38:	480a      	ldr	r0, [pc, #40]	; (800de64 <MX_USB_DEVICE_Init+0x58>)
 800de3a:	f7fe fdd7 	bl	800c9ec <USBD_CDC_RegisterInterface>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d001      	beq.n	800de48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de44:	f7f2 fe2c 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de48:	4806      	ldr	r0, [pc, #24]	; (800de64 <MX_USB_DEVICE_Init+0x58>)
 800de4a:	f7fe fecc 	bl	800cbe6 <USBD_Start>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d001      	beq.n	800de58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de54:	f7f2 fe24 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800de58:	f7f9 fa9c 	bl	8007394 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de5c:	bf00      	nop
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	24000164 	.word	0x24000164
 800de64:	240026e8 	.word	0x240026e8
 800de68:	2400004c 	.word	0x2400004c
 800de6c:	24000150 	.word	0x24000150

0800de70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de76:	2200      	movs	r2, #0
 800de78:	4915      	ldr	r1, [pc, #84]	; (800ded0 <CDC_Init_FS+0x60>)
 800de7a:	4816      	ldr	r0, [pc, #88]	; (800ded4 <CDC_Init_FS+0x64>)
 800de7c:	f7fe fdcb 	bl	800ca16 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de80:	4915      	ldr	r1, [pc, #84]	; (800ded8 <CDC_Init_FS+0x68>)
 800de82:	4814      	ldr	r0, [pc, #80]	; (800ded4 <CDC_Init_FS+0x64>)
 800de84:	f7fe fde5 	bl	800ca52 <USBD_CDC_SetRxBuffer>

  // https://stackoverflow.com/a/26925578
  uint32_t baudrate = 115200;
 800de88:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800de8c:	607b      	str	r3, [r7, #4]
  ctrl_param_buff[0] = (uint8_t)(baudrate);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	b2da      	uxtb	r2, r3
 800de92:	4b12      	ldr	r3, [pc, #72]	; (800dedc <CDC_Init_FS+0x6c>)
 800de94:	701a      	strb	r2, [r3, #0]
  ctrl_param_buff[1] = (uint8_t)(baudrate >> 8);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	0a1b      	lsrs	r3, r3, #8
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	4b0f      	ldr	r3, [pc, #60]	; (800dedc <CDC_Init_FS+0x6c>)
 800de9e:	705a      	strb	r2, [r3, #1]
  ctrl_param_buff[2] = (uint8_t)(baudrate >> 16);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	0c1b      	lsrs	r3, r3, #16
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <CDC_Init_FS+0x6c>)
 800dea8:	709a      	strb	r2, [r3, #2]
  ctrl_param_buff[3] = (uint8_t)(baudrate >> 24);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	0e1b      	lsrs	r3, r3, #24
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <CDC_Init_FS+0x6c>)
 800deb2:	70da      	strb	r2, [r3, #3]
  ctrl_param_buff[4] = 0; // 1 Stop bit
 800deb4:	4b09      	ldr	r3, [pc, #36]	; (800dedc <CDC_Init_FS+0x6c>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	711a      	strb	r2, [r3, #4]
  ctrl_param_buff[5] = 0; // No parity
 800deba:	4b08      	ldr	r3, [pc, #32]	; (800dedc <CDC_Init_FS+0x6c>)
 800debc:	2200      	movs	r2, #0
 800debe:	715a      	strb	r2, [r3, #5]
  ctrl_param_buff[6] = 8; // 8 data bits
 800dec0:	4b06      	ldr	r3, [pc, #24]	; (800dedc <CDC_Init_FS+0x6c>)
 800dec2:	2208      	movs	r2, #8
 800dec4:	719a      	strb	r2, [r3, #6]

  return (USBD_OK);
 800dec6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	240031c0 	.word	0x240031c0
 800ded4:	240026e8 	.word	0x240026e8
 800ded8:	240029c0 	.word	0x240029c0
 800dedc:	240029b8 	.word	0x240029b8

0800dee0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dee0:	b480      	push	{r7}
 800dee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dee4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	4603      	mov	r3, r0
 800def8:	6039      	str	r1, [r7, #0]
 800defa:	71fb      	strb	r3, [r7, #7]
 800defc:	4613      	mov	r3, r2
 800defe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800df00:	79fb      	ldrb	r3, [r7, #7]
 800df02:	2b23      	cmp	r3, #35	; 0x23
 800df04:	f200 808c 	bhi.w	800e020 <CDC_Control_FS+0x130>
 800df08:	a201      	add	r2, pc, #4	; (adr r2, 800df10 <CDC_Control_FS+0x20>)
 800df0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0e:	bf00      	nop
 800df10:	0800e021 	.word	0x0800e021
 800df14:	0800e021 	.word	0x0800e021
 800df18:	0800e021 	.word	0x0800e021
 800df1c:	0800e021 	.word	0x0800e021
 800df20:	0800e021 	.word	0x0800e021
 800df24:	0800e021 	.word	0x0800e021
 800df28:	0800e021 	.word	0x0800e021
 800df2c:	0800e021 	.word	0x0800e021
 800df30:	0800e021 	.word	0x0800e021
 800df34:	0800e021 	.word	0x0800e021
 800df38:	0800e021 	.word	0x0800e021
 800df3c:	0800e021 	.word	0x0800e021
 800df40:	0800e021 	.word	0x0800e021
 800df44:	0800e021 	.word	0x0800e021
 800df48:	0800e021 	.word	0x0800e021
 800df4c:	0800e021 	.word	0x0800e021
 800df50:	0800e021 	.word	0x0800e021
 800df54:	0800e021 	.word	0x0800e021
 800df58:	0800e021 	.word	0x0800e021
 800df5c:	0800e021 	.word	0x0800e021
 800df60:	0800e021 	.word	0x0800e021
 800df64:	0800e021 	.word	0x0800e021
 800df68:	0800e021 	.word	0x0800e021
 800df6c:	0800e021 	.word	0x0800e021
 800df70:	0800e021 	.word	0x0800e021
 800df74:	0800e021 	.word	0x0800e021
 800df78:	0800e021 	.word	0x0800e021
 800df7c:	0800e021 	.word	0x0800e021
 800df80:	0800e021 	.word	0x0800e021
 800df84:	0800e021 	.word	0x0800e021
 800df88:	0800e021 	.word	0x0800e021
 800df8c:	0800e021 	.word	0x0800e021
 800df90:	0800dfa1 	.word	0x0800dfa1
 800df94:	0800dfdb 	.word	0x0800dfdb
 800df98:	0800e021 	.word	0x0800e021
 800df9c:	0800e021 	.word	0x0800e021
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	ctrl_param_buff[0]=pbuf[0];
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	781a      	ldrb	r2, [r3, #0]
 800dfa4:	4b22      	ldr	r3, [pc, #136]	; (800e030 <CDC_Control_FS+0x140>)
 800dfa6:	701a      	strb	r2, [r3, #0]
    	ctrl_param_buff[1]=pbuf[1];
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	785a      	ldrb	r2, [r3, #1]
 800dfac:	4b20      	ldr	r3, [pc, #128]	; (800e030 <CDC_Control_FS+0x140>)
 800dfae:	705a      	strb	r2, [r3, #1]
    	ctrl_param_buff[2]=pbuf[2];
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	789a      	ldrb	r2, [r3, #2]
 800dfb4:	4b1e      	ldr	r3, [pc, #120]	; (800e030 <CDC_Control_FS+0x140>)
 800dfb6:	709a      	strb	r2, [r3, #2]
    	ctrl_param_buff[3]=pbuf[3];
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	78da      	ldrb	r2, [r3, #3]
 800dfbc:	4b1c      	ldr	r3, [pc, #112]	; (800e030 <CDC_Control_FS+0x140>)
 800dfbe:	70da      	strb	r2, [r3, #3]
    	ctrl_param_buff[4]=pbuf[4];
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	791a      	ldrb	r2, [r3, #4]
 800dfc4:	4b1a      	ldr	r3, [pc, #104]	; (800e030 <CDC_Control_FS+0x140>)
 800dfc6:	711a      	strb	r2, [r3, #4]
    	ctrl_param_buff[5]=pbuf[5];
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	795a      	ldrb	r2, [r3, #5]
 800dfcc:	4b18      	ldr	r3, [pc, #96]	; (800e030 <CDC_Control_FS+0x140>)
 800dfce:	715a      	strb	r2, [r3, #5]
    	ctrl_param_buff[6]=pbuf[6];
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	799a      	ldrb	r2, [r3, #6]
 800dfd4:	4b16      	ldr	r3, [pc, #88]	; (800e030 <CDC_Control_FS+0x140>)
 800dfd6:	719a      	strb	r2, [r3, #6]
    break;
 800dfd8:	e023      	b.n	800e022 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = ctrl_param_buff[0];
 800dfda:	4b15      	ldr	r3, [pc, #84]	; (800e030 <CDC_Control_FS+0x140>)
 800dfdc:	781a      	ldrb	r2, [r3, #0]
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = ctrl_param_buff[1];
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	4a12      	ldr	r2, [pc, #72]	; (800e030 <CDC_Control_FS+0x140>)
 800dfe8:	7852      	ldrb	r2, [r2, #1]
 800dfea:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = ctrl_param_buff[2];
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	3302      	adds	r3, #2
 800dff0:	4a0f      	ldr	r2, [pc, #60]	; (800e030 <CDC_Control_FS+0x140>)
 800dff2:	7892      	ldrb	r2, [r2, #2]
 800dff4:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = ctrl_param_buff[3];
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	3303      	adds	r3, #3
 800dffa:	4a0d      	ldr	r2, [pc, #52]	; (800e030 <CDC_Control_FS+0x140>)
 800dffc:	78d2      	ldrb	r2, [r2, #3]
 800dffe:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = ctrl_param_buff[4];
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	3304      	adds	r3, #4
 800e004:	4a0a      	ldr	r2, [pc, #40]	; (800e030 <CDC_Control_FS+0x140>)
 800e006:	7912      	ldrb	r2, [r2, #4]
 800e008:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = ctrl_param_buff[5];
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	3305      	adds	r3, #5
 800e00e:	4a08      	ldr	r2, [pc, #32]	; (800e030 <CDC_Control_FS+0x140>)
 800e010:	7952      	ldrb	r2, [r2, #5]
 800e012:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = ctrl_param_buff[6];
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	3306      	adds	r3, #6
 800e018:	4a05      	ldr	r2, [pc, #20]	; (800e030 <CDC_Control_FS+0x140>)
 800e01a:	7992      	ldrb	r2, [r2, #6]
 800e01c:	701a      	strb	r2, [r3, #0]
    break;
 800e01e:	e000      	b.n	800e022 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e020:	bf00      	nop
  }

  return (USBD_OK);
 800e022:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e024:	4618      	mov	r0, r3
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr
 800e030:	240029b8 	.word	0x240029b8

0800e034 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e03e:	6879      	ldr	r1, [r7, #4]
 800e040:	4805      	ldr	r0, [pc, #20]	; (800e058 <CDC_Receive_FS+0x24>)
 800e042:	f7fe fd06 	bl	800ca52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e046:	4804      	ldr	r0, [pc, #16]	; (800e058 <CDC_Receive_FS+0x24>)
 800e048:	f7fe fd4c 	bl	800cae4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e04c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	240026e8 	.word	0x240026e8

0800e05c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e06c:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <CDC_Transmit_FS+0x54>)
 800e06e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e072:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d001      	beq.n	800e082 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e07e:	2301      	movs	r3, #1
 800e080:	e011      	b.n	800e0a6 <CDC_Transmit_FS+0x4a>
  }
  memcpy(UserTxBufferFS, Buf, sizeof(char) * Len);
 800e082:	887b      	ldrh	r3, [r7, #2]
 800e084:	461a      	mov	r2, r3
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	480a      	ldr	r0, [pc, #40]	; (800e0b4 <CDC_Transmit_FS+0x58>)
 800e08a:	f000 fc91 	bl	800e9b0 <memcpy>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e08e:	887b      	ldrh	r3, [r7, #2]
 800e090:	461a      	mov	r2, r3
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	4806      	ldr	r0, [pc, #24]	; (800e0b0 <CDC_Transmit_FS+0x54>)
 800e096:	f7fe fcbe 	bl	800ca16 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e09a:	4805      	ldr	r0, [pc, #20]	; (800e0b0 <CDC_Transmit_FS+0x54>)
 800e09c:	f7fe fcf2 	bl	800ca84 <USBD_CDC_TransmitPacket>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	240026e8 	.word	0x240026e8
 800e0b4:	240031c0 	.word	0x240031c0

0800e0b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b087      	sub	sp, #28
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	371c      	adds	r7, #28
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
	...

0800e0dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	6039      	str	r1, [r7, #0]
 800e0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2212      	movs	r2, #18
 800e0ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e0ee:	4b03      	ldr	r3, [pc, #12]	; (800e0fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr
 800e0fc:	24000180 	.word	0x24000180

0800e100 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	4603      	mov	r3, r0
 800e108:	6039      	str	r1, [r7, #0]
 800e10a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2204      	movs	r2, #4
 800e110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e112:	4b03      	ldr	r3, [pc, #12]	; (800e120 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e114:	4618      	mov	r0, r3
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr
 800e120:	24000194 	.word	0x24000194

0800e124 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	4603      	mov	r3, r0
 800e12c:	6039      	str	r1, [r7, #0]
 800e12e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d105      	bne.n	800e142 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	4907      	ldr	r1, [pc, #28]	; (800e158 <USBD_FS_ProductStrDescriptor+0x34>)
 800e13a:	4808      	ldr	r0, [pc, #32]	; (800e15c <USBD_FS_ProductStrDescriptor+0x38>)
 800e13c:	f7ff fd85 	bl	800dc4a <USBD_GetString>
 800e140:	e004      	b.n	800e14c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	4904      	ldr	r1, [pc, #16]	; (800e158 <USBD_FS_ProductStrDescriptor+0x34>)
 800e146:	4805      	ldr	r0, [pc, #20]	; (800e15c <USBD_FS_ProductStrDescriptor+0x38>)
 800e148:	f7ff fd7f 	bl	800dc4a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e14c:	4b02      	ldr	r3, [pc, #8]	; (800e158 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e14e:	4618      	mov	r0, r3
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	240039c0 	.word	0x240039c0
 800e15c:	0800ea10 	.word	0x0800ea10

0800e160 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	4603      	mov	r3, r0
 800e168:	6039      	str	r1, [r7, #0]
 800e16a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e16c:	683a      	ldr	r2, [r7, #0]
 800e16e:	4904      	ldr	r1, [pc, #16]	; (800e180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e170:	4804      	ldr	r0, [pc, #16]	; (800e184 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e172:	f7ff fd6a 	bl	800dc4a <USBD_GetString>
  return USBD_StrDesc;
 800e176:	4b02      	ldr	r3, [pc, #8]	; (800e180 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	240039c0 	.word	0x240039c0
 800e184:	0800ea28 	.word	0x0800ea28

0800e188 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	4603      	mov	r3, r0
 800e190:	6039      	str	r1, [r7, #0]
 800e192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	221a      	movs	r2, #26
 800e198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e19a:	f000 f843 	bl	800e224 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e19e:	4b02      	ldr	r3, [pc, #8]	; (800e1a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	24000198 	.word	0x24000198

0800e1ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	6039      	str	r1, [r7, #0]
 800e1b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e1b8:	79fb      	ldrb	r3, [r7, #7]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d105      	bne.n	800e1ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	4907      	ldr	r1, [pc, #28]	; (800e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1c2:	4808      	ldr	r0, [pc, #32]	; (800e1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1c4:	f7ff fd41 	bl	800dc4a <USBD_GetString>
 800e1c8:	e004      	b.n	800e1d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	4904      	ldr	r1, [pc, #16]	; (800e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e1ce:	4805      	ldr	r0, [pc, #20]	; (800e1e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e1d0:	f7ff fd3b 	bl	800dc4a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e1d4:	4b02      	ldr	r3, [pc, #8]	; (800e1e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	240039c0 	.word	0x240039c0
 800e1e4:	0800ea3c 	.word	0x0800ea3c

0800e1e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	6039      	str	r1, [r7, #0]
 800e1f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d105      	bne.n	800e206 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e1fa:	683a      	ldr	r2, [r7, #0]
 800e1fc:	4907      	ldr	r1, [pc, #28]	; (800e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e1fe:	4808      	ldr	r0, [pc, #32]	; (800e220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e200:	f7ff fd23 	bl	800dc4a <USBD_GetString>
 800e204:	e004      	b.n	800e210 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	4904      	ldr	r1, [pc, #16]	; (800e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e20a:	4805      	ldr	r0, [pc, #20]	; (800e220 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e20c:	f7ff fd1d 	bl	800dc4a <USBD_GetString>
  }
  return USBD_StrDesc;
 800e210:	4b02      	ldr	r3, [pc, #8]	; (800e21c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	240039c0 	.word	0x240039c0
 800e220:	0800ea48 	.word	0x0800ea48

0800e224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e22a:	4b0f      	ldr	r3, [pc, #60]	; (800e268 <Get_SerialNum+0x44>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e230:	4b0e      	ldr	r3, [pc, #56]	; (800e26c <Get_SerialNum+0x48>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e236:	4b0e      	ldr	r3, [pc, #56]	; (800e270 <Get_SerialNum+0x4c>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4413      	add	r3, r2
 800e242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d009      	beq.n	800e25e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e24a:	2208      	movs	r2, #8
 800e24c:	4909      	ldr	r1, [pc, #36]	; (800e274 <Get_SerialNum+0x50>)
 800e24e:	68f8      	ldr	r0, [r7, #12]
 800e250:	f000 f814 	bl	800e27c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e254:	2204      	movs	r2, #4
 800e256:	4908      	ldr	r1, [pc, #32]	; (800e278 <Get_SerialNum+0x54>)
 800e258:	68b8      	ldr	r0, [r7, #8]
 800e25a:	f000 f80f 	bl	800e27c <IntToUnicode>
  }
}
 800e25e:	bf00      	nop
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	1ff1e800 	.word	0x1ff1e800
 800e26c:	1ff1e804 	.word	0x1ff1e804
 800e270:	1ff1e808 	.word	0x1ff1e808
 800e274:	2400019a 	.word	0x2400019a
 800e278:	240001aa 	.word	0x240001aa

0800e27c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b087      	sub	sp, #28
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	4613      	mov	r3, r2
 800e288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e28e:	2300      	movs	r3, #0
 800e290:	75fb      	strb	r3, [r7, #23]
 800e292:	e027      	b.n	800e2e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	0f1b      	lsrs	r3, r3, #28
 800e298:	2b09      	cmp	r3, #9
 800e29a:	d80b      	bhi.n	800e2b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	0f1b      	lsrs	r3, r3, #28
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	7dfb      	ldrb	r3, [r7, #23]
 800e2a4:	005b      	lsls	r3, r3, #1
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	440b      	add	r3, r1
 800e2ac:	3230      	adds	r2, #48	; 0x30
 800e2ae:	b2d2      	uxtb	r2, r2
 800e2b0:	701a      	strb	r2, [r3, #0]
 800e2b2:	e00a      	b.n	800e2ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	0f1b      	lsrs	r3, r3, #28
 800e2b8:	b2da      	uxtb	r2, r3
 800e2ba:	7dfb      	ldrb	r3, [r7, #23]
 800e2bc:	005b      	lsls	r3, r3, #1
 800e2be:	4619      	mov	r1, r3
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	440b      	add	r3, r1
 800e2c4:	3237      	adds	r2, #55	; 0x37
 800e2c6:	b2d2      	uxtb	r2, r2
 800e2c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	011b      	lsls	r3, r3, #4
 800e2ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	4413      	add	r3, r2
 800e2da:	2200      	movs	r2, #0
 800e2dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	75fb      	strb	r3, [r7, #23]
 800e2e4:	7dfa      	ldrb	r2, [r7, #23]
 800e2e6:	79fb      	ldrb	r3, [r7, #7]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d3d3      	bcc.n	800e294 <IntToUnicode+0x18>
  }
}
 800e2ec:	bf00      	nop
 800e2ee:	bf00      	nop
 800e2f0:	371c      	adds	r7, #28
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr
	...

0800e2fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b0b8      	sub	sp, #224	; 0xe0
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e304:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e308:	2200      	movs	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	605a      	str	r2, [r3, #4]
 800e30e:	609a      	str	r2, [r3, #8]
 800e310:	60da      	str	r2, [r3, #12]
 800e312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e314:	f107 0310 	add.w	r3, r7, #16
 800e318:	22bc      	movs	r2, #188	; 0xbc
 800e31a:	2100      	movs	r1, #0
 800e31c:	4618      	mov	r0, r3
 800e31e:	f000 fb55 	bl	800e9cc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a2b      	ldr	r2, [pc, #172]	; (800e3d4 <HAL_PCD_MspInit+0xd8>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d14e      	bne.n	800e3ca <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e32c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e330:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e332:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800e336:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e33a:	f107 0310 	add.w	r3, r7, #16
 800e33e:	4618      	mov	r0, r3
 800e340:	f7f9 ffc4 	bl	80082cc <HAL_RCCEx_PeriphCLKConfig>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800e34a:	f7f2 fba9 	bl	8000aa0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e34e:	f7f9 f821 	bl	8007394 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e352:	4b21      	ldr	r3, [pc, #132]	; (800e3d8 <HAL_PCD_MspInit+0xdc>)
 800e354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e358:	4a1f      	ldr	r2, [pc, #124]	; (800e3d8 <HAL_PCD_MspInit+0xdc>)
 800e35a:	f043 0301 	orr.w	r3, r3, #1
 800e35e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e362:	4b1d      	ldr	r3, [pc, #116]	; (800e3d8 <HAL_PCD_MspInit+0xdc>)
 800e364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	60fb      	str	r3, [r7, #12]
 800e36e:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800e370:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800e374:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e378:	2302      	movs	r3, #2
 800e37a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e384:	2300      	movs	r3, #0
 800e386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e38a:	230a      	movs	r3, #10
 800e38c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e390:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e394:	4619      	mov	r1, r3
 800e396:	4811      	ldr	r0, [pc, #68]	; (800e3dc <HAL_PCD_MspInit+0xe0>)
 800e398:	f7f7 fbf6 	bl	8005b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e39c:	4b0e      	ldr	r3, [pc, #56]	; (800e3d8 <HAL_PCD_MspInit+0xdc>)
 800e39e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e3a2:	4a0d      	ldr	r2, [pc, #52]	; (800e3d8 <HAL_PCD_MspInit+0xdc>)
 800e3a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e3a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	; (800e3d8 <HAL_PCD_MspInit+0xdc>)
 800e3ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e3b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e3b6:	60bb      	str	r3, [r7, #8]
 800e3b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2100      	movs	r1, #0
 800e3be:	2065      	movs	r0, #101	; 0x65
 800e3c0:	f7f4 febf 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e3c4:	2065      	movs	r0, #101	; 0x65
 800e3c6:	f7f4 fed6 	bl	8003176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e3ca:	bf00      	nop
 800e3cc:	37e0      	adds	r7, #224	; 0xe0
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	40080000 	.word	0x40080000
 800e3d8:	58024400 	.word	0x58024400
 800e3dc:	58020000 	.word	0x58020000

0800e3e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	f7fe fc40 	bl	800cc7c <USBD_LL_SetupStage>
}
 800e3fc:	bf00      	nop
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e416:	78fa      	ldrb	r2, [r7, #3]
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	4613      	mov	r3, r2
 800e41c:	00db      	lsls	r3, r3, #3
 800e41e:	1a9b      	subs	r3, r3, r2
 800e420:	009b      	lsls	r3, r3, #2
 800e422:	440b      	add	r3, r1
 800e424:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	78fb      	ldrb	r3, [r7, #3]
 800e42c:	4619      	mov	r1, r3
 800e42e:	f7fe fc7a 	bl	800cd26 <USBD_LL_DataOutStage>
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e43a:	b580      	push	{r7, lr}
 800e43c:	b082      	sub	sp, #8
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	460b      	mov	r3, r1
 800e444:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e44c:	78fa      	ldrb	r2, [r7, #3]
 800e44e:	6879      	ldr	r1, [r7, #4]
 800e450:	4613      	mov	r3, r2
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	1a9b      	subs	r3, r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	440b      	add	r3, r1
 800e45a:	3348      	adds	r3, #72	; 0x48
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	78fb      	ldrb	r3, [r7, #3]
 800e460:	4619      	mov	r1, r3
 800e462:	f7fe fcc3 	bl	800cdec <USBD_LL_DataInStage>
}
 800e466:	bf00      	nop
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b082      	sub	sp, #8
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7fe fdd7 	bl	800d030 <USBD_LL_SOF>
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b084      	sub	sp, #16
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e492:	2301      	movs	r3, #1
 800e494:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d102      	bne.n	800e4a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	73fb      	strb	r3, [r7, #15]
 800e4a2:	e008      	b.n	800e4b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d102      	bne.n	800e4b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	73fb      	strb	r3, [r7, #15]
 800e4b0:	e001      	b.n	800e4b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e4b2:	f7f2 faf5 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4bc:	7bfa      	ldrb	r2, [r7, #15]
 800e4be:	4611      	mov	r1, r2
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fe fd77 	bl	800cfb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe fd23 	bl	800cf18 <USBD_LL_Reset>
}
 800e4d2:	bf00      	nop
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe fd72 	bl	800cfd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	6812      	ldr	r2, [r2, #0]
 800e4fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e502:	f043 0301 	orr.w	r3, r3, #1
 800e506:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6a1b      	ldr	r3, [r3, #32]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d005      	beq.n	800e51c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e510:	4b04      	ldr	r3, [pc, #16]	; (800e524 <HAL_PCD_SuspendCallback+0x48>)
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	4a03      	ldr	r2, [pc, #12]	; (800e524 <HAL_PCD_SuspendCallback+0x48>)
 800e516:	f043 0306 	orr.w	r3, r3, #6
 800e51a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e51c:	bf00      	nop
 800e51e:	3708      	adds	r7, #8
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	e000ed00 	.word	0xe000ed00

0800e528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e536:	4618      	mov	r0, r3
 800e538:	f7fe fd62 	bl	800d000 <USBD_LL_Resume>
}
 800e53c:	bf00      	nop
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	460b      	mov	r3, r1
 800e54e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e556:	78fa      	ldrb	r2, [r7, #3]
 800e558:	4611      	mov	r1, r2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fdb0 	bl	800d0c0 <USBD_LL_IsoOUTIncomplete>
}
 800e560:	bf00      	nop
 800e562:	3708      	adds	r7, #8
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e57a:	78fa      	ldrb	r2, [r7, #3]
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fd78 	bl	800d074 <USBD_LL_IsoINIncomplete>
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7fe fdb6 	bl	800d10c <USBD_LL_DevConnected>
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fe fdb3 	bl	800d122 <USBD_LL_DevDisconnected>
}
 800e5bc:	bf00      	nop
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d13e      	bne.n	800e652 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e5d4:	4a21      	ldr	r2, [pc, #132]	; (800e65c <USBD_LL_Init+0x98>)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	4a1f      	ldr	r2, [pc, #124]	; (800e65c <USBD_LL_Init+0x98>)
 800e5e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e5e4:	4b1d      	ldr	r3, [pc, #116]	; (800e65c <USBD_LL_Init+0x98>)
 800e5e6:	4a1e      	ldr	r2, [pc, #120]	; (800e660 <USBD_LL_Init+0x9c>)
 800e5e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800e5ea:	4b1c      	ldr	r3, [pc, #112]	; (800e65c <USBD_LL_Init+0x98>)
 800e5ec:	2209      	movs	r2, #9
 800e5ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e5f0:	4b1a      	ldr	r3, [pc, #104]	; (800e65c <USBD_LL_Init+0x98>)
 800e5f2:	2202      	movs	r2, #2
 800e5f4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e5f6:	4b19      	ldr	r3, [pc, #100]	; (800e65c <USBD_LL_Init+0x98>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e5fc:	4b17      	ldr	r3, [pc, #92]	; (800e65c <USBD_LL_Init+0x98>)
 800e5fe:	2202      	movs	r2, #2
 800e600:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e602:	4b16      	ldr	r3, [pc, #88]	; (800e65c <USBD_LL_Init+0x98>)
 800e604:	2200      	movs	r2, #0
 800e606:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e608:	4b14      	ldr	r3, [pc, #80]	; (800e65c <USBD_LL_Init+0x98>)
 800e60a:	2200      	movs	r2, #0
 800e60c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e60e:	4b13      	ldr	r3, [pc, #76]	; (800e65c <USBD_LL_Init+0x98>)
 800e610:	2200      	movs	r2, #0
 800e612:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e614:	4b11      	ldr	r3, [pc, #68]	; (800e65c <USBD_LL_Init+0x98>)
 800e616:	2200      	movs	r2, #0
 800e618:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e61a:	4b10      	ldr	r3, [pc, #64]	; (800e65c <USBD_LL_Init+0x98>)
 800e61c:	2200      	movs	r2, #0
 800e61e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e620:	4b0e      	ldr	r3, [pc, #56]	; (800e65c <USBD_LL_Init+0x98>)
 800e622:	2200      	movs	r2, #0
 800e624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e626:	480d      	ldr	r0, [pc, #52]	; (800e65c <USBD_LL_Init+0x98>)
 800e628:	f7f7 fcab 	bl	8005f82 <HAL_PCD_Init>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e632:	f7f2 fa35 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e636:	2180      	movs	r1, #128	; 0x80
 800e638:	4808      	ldr	r0, [pc, #32]	; (800e65c <USBD_LL_Init+0x98>)
 800e63a:	f7f8 fe30 	bl	800729e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e63e:	2240      	movs	r2, #64	; 0x40
 800e640:	2100      	movs	r1, #0
 800e642:	4806      	ldr	r0, [pc, #24]	; (800e65c <USBD_LL_Init+0x98>)
 800e644:	f7f8 fde4 	bl	8007210 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e648:	2280      	movs	r2, #128	; 0x80
 800e64a:	2101      	movs	r1, #1
 800e64c:	4803      	ldr	r0, [pc, #12]	; (800e65c <USBD_LL_Init+0x98>)
 800e64e:	f7f8 fddf 	bl	8007210 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}
 800e65c:	24003bc0 	.word	0x24003bc0
 800e660:	40080000 	.word	0x40080000

0800e664 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b084      	sub	sp, #16
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e66c:	2300      	movs	r3, #0
 800e66e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7f7 fda5 	bl	80061ca <HAL_PCD_Start>
 800e680:	4603      	mov	r3, r0
 800e682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e684:	7bfb      	ldrb	r3, [r7, #15]
 800e686:	4618      	mov	r0, r3
 800e688:	f000 f942 	bl	800e910 <USBD_Get_USB_Status>
 800e68c:	4603      	mov	r3, r0
 800e68e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e690:	7bbb      	ldrb	r3, [r7, #14]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b084      	sub	sp, #16
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	4608      	mov	r0, r1
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	70fb      	strb	r3, [r7, #3]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	70bb      	strb	r3, [r7, #2]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e6c2:	78bb      	ldrb	r3, [r7, #2]
 800e6c4:	883a      	ldrh	r2, [r7, #0]
 800e6c6:	78f9      	ldrb	r1, [r7, #3]
 800e6c8:	f7f8 f9aa 	bl	8006a20 <HAL_PCD_EP_Open>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 f91c 	bl	800e910 <USBD_Get_USB_Status>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b084      	sub	sp, #16
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e700:	78fa      	ldrb	r2, [r7, #3]
 800e702:	4611      	mov	r1, r2
 800e704:	4618      	mov	r0, r3
 800e706:	f7f8 f9f3 	bl	8006af0 <HAL_PCD_EP_Close>
 800e70a:	4603      	mov	r3, r0
 800e70c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e70e:	7bfb      	ldrb	r3, [r7, #15]
 800e710:	4618      	mov	r0, r3
 800e712:	f000 f8fd 	bl	800e910 <USBD_Get_USB_Status>
 800e716:	4603      	mov	r3, r0
 800e718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	460b      	mov	r3, r1
 800e72e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e734:	2300      	movs	r3, #0
 800e736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e73e:	78fa      	ldrb	r2, [r7, #3]
 800e740:	4611      	mov	r1, r2
 800e742:	4618      	mov	r0, r3
 800e744:	f7f8 facb 	bl	8006cde <HAL_PCD_EP_SetStall>
 800e748:	4603      	mov	r3, r0
 800e74a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e74c:	7bfb      	ldrb	r3, [r7, #15]
 800e74e:	4618      	mov	r0, r3
 800e750:	f000 f8de 	bl	800e910 <USBD_Get_USB_Status>
 800e754:	4603      	mov	r3, r0
 800e756:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e758:	7bbb      	ldrb	r3, [r7, #14]
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}

0800e762 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b084      	sub	sp, #16
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	460b      	mov	r3, r1
 800e76c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e772:	2300      	movs	r3, #0
 800e774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e77c:	78fa      	ldrb	r2, [r7, #3]
 800e77e:	4611      	mov	r1, r2
 800e780:	4618      	mov	r0, r3
 800e782:	f7f8 fb10 	bl	8006da6 <HAL_PCD_EP_ClrStall>
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 f8bf 	bl	800e910 <USBD_Get_USB_Status>
 800e792:	4603      	mov	r3, r0
 800e794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e796:	7bbb      	ldrb	r3, [r7, #14]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3710      	adds	r7, #16
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b085      	sub	sp, #20
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e7b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	da0b      	bge.n	800e7d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7c2:	68f9      	ldr	r1, [r7, #12]
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	00db      	lsls	r3, r3, #3
 800e7c8:	1a9b      	subs	r3, r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	440b      	add	r3, r1
 800e7ce:	333e      	adds	r3, #62	; 0x3e
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	e00b      	b.n	800e7ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e7d4:	78fb      	ldrb	r3, [r7, #3]
 800e7d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7da:	68f9      	ldr	r1, [r7, #12]
 800e7dc:	4613      	mov	r3, r2
 800e7de:	00db      	lsls	r3, r3, #3
 800e7e0:	1a9b      	subs	r3, r3, r2
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	440b      	add	r3, r1
 800e7e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3714      	adds	r7, #20
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	460b      	mov	r3, r1
 800e802:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e804:	2300      	movs	r3, #0
 800e806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e808:	2300      	movs	r3, #0
 800e80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e812:	78fa      	ldrb	r2, [r7, #3]
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f7f8 f8dd 	bl	80069d6 <HAL_PCD_SetAddress>
 800e81c:	4603      	mov	r3, r0
 800e81e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e820:	7bfb      	ldrb	r3, [r7, #15]
 800e822:	4618      	mov	r0, r3
 800e824:	f000 f874 	bl	800e910 <USBD_Get_USB_Status>
 800e828:	4603      	mov	r3, r0
 800e82a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e82c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b086      	sub	sp, #24
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	60f8      	str	r0, [r7, #12]
 800e83e:	607a      	str	r2, [r7, #4]
 800e840:	603b      	str	r3, [r7, #0]
 800e842:	460b      	mov	r3, r1
 800e844:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e846:	2300      	movs	r3, #0
 800e848:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e854:	7af9      	ldrb	r1, [r7, #11]
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	f7f8 f9f6 	bl	8006c4a <HAL_PCD_EP_Transmit>
 800e85e:	4603      	mov	r3, r0
 800e860:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e862:	7dfb      	ldrb	r3, [r7, #23]
 800e864:	4618      	mov	r0, r3
 800e866:	f000 f853 	bl	800e910 <USBD_Get_USB_Status>
 800e86a:	4603      	mov	r3, r0
 800e86c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e86e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e870:	4618      	mov	r0, r3
 800e872:	3718      	adds	r7, #24
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	607a      	str	r2, [r7, #4]
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	460b      	mov	r3, r1
 800e886:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e888:	2300      	movs	r3, #0
 800e88a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e88c:	2300      	movs	r3, #0
 800e88e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e896:	7af9      	ldrb	r1, [r7, #11]
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	f7f8 f972 	bl	8006b84 <HAL_PCD_EP_Receive>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8a4:	7dfb      	ldrb	r3, [r7, #23]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f000 f832 	bl	800e910 <USBD_Get_USB_Status>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3718      	adds	r7, #24
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b082      	sub	sp, #8
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e8cc:	78fa      	ldrb	r2, [r7, #3]
 800e8ce:	4611      	mov	r1, r2
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7f8 f9a2 	bl	8006c1a <HAL_PCD_EP_GetRxCount>
 800e8d6:	4603      	mov	r3, r0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e8e8:	4b03      	ldr	r3, [pc, #12]	; (800e8f8 <USBD_static_malloc+0x18>)
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	370c      	adds	r7, #12
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	240022bc 	.word	0x240022bc

0800e8fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]

}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e910:	b480      	push	{r7}
 800e912:	b085      	sub	sp, #20
 800e914:	af00      	add	r7, sp, #0
 800e916:	4603      	mov	r3, r0
 800e918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e91a:	2300      	movs	r3, #0
 800e91c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e91e:	79fb      	ldrb	r3, [r7, #7]
 800e920:	2b03      	cmp	r3, #3
 800e922:	d817      	bhi.n	800e954 <USBD_Get_USB_Status+0x44>
 800e924:	a201      	add	r2, pc, #4	; (adr r2, 800e92c <USBD_Get_USB_Status+0x1c>)
 800e926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e92a:	bf00      	nop
 800e92c:	0800e93d 	.word	0x0800e93d
 800e930:	0800e943 	.word	0x0800e943
 800e934:	0800e949 	.word	0x0800e949
 800e938:	0800e94f 	.word	0x0800e94f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e93c:	2300      	movs	r3, #0
 800e93e:	73fb      	strb	r3, [r7, #15]
    break;
 800e940:	e00b      	b.n	800e95a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e942:	2303      	movs	r3, #3
 800e944:	73fb      	strb	r3, [r7, #15]
    break;
 800e946:	e008      	b.n	800e95a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e948:	2301      	movs	r3, #1
 800e94a:	73fb      	strb	r3, [r7, #15]
    break;
 800e94c:	e005      	b.n	800e95a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e94e:	2303      	movs	r3, #3
 800e950:	73fb      	strb	r3, [r7, #15]
    break;
 800e952:	e002      	b.n	800e95a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e954:	2303      	movs	r3, #3
 800e956:	73fb      	strb	r3, [r7, #15]
    break;
 800e958:	bf00      	nop
  }
  return usb_status;
 800e95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3714      	adds	r7, #20
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <__libc_init_array>:
 800e968:	b570      	push	{r4, r5, r6, lr}
 800e96a:	4d0d      	ldr	r5, [pc, #52]	; (800e9a0 <__libc_init_array+0x38>)
 800e96c:	4c0d      	ldr	r4, [pc, #52]	; (800e9a4 <__libc_init_array+0x3c>)
 800e96e:	1b64      	subs	r4, r4, r5
 800e970:	10a4      	asrs	r4, r4, #2
 800e972:	2600      	movs	r6, #0
 800e974:	42a6      	cmp	r6, r4
 800e976:	d109      	bne.n	800e98c <__libc_init_array+0x24>
 800e978:	4d0b      	ldr	r5, [pc, #44]	; (800e9a8 <__libc_init_array+0x40>)
 800e97a:	4c0c      	ldr	r4, [pc, #48]	; (800e9ac <__libc_init_array+0x44>)
 800e97c:	f000 f82e 	bl	800e9dc <_init>
 800e980:	1b64      	subs	r4, r4, r5
 800e982:	10a4      	asrs	r4, r4, #2
 800e984:	2600      	movs	r6, #0
 800e986:	42a6      	cmp	r6, r4
 800e988:	d105      	bne.n	800e996 <__libc_init_array+0x2e>
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e990:	4798      	blx	r3
 800e992:	3601      	adds	r6, #1
 800e994:	e7ee      	b.n	800e974 <__libc_init_array+0xc>
 800e996:	f855 3b04 	ldr.w	r3, [r5], #4
 800e99a:	4798      	blx	r3
 800e99c:	3601      	adds	r6, #1
 800e99e:	e7f2      	b.n	800e986 <__libc_init_array+0x1e>
 800e9a0:	0800ea70 	.word	0x0800ea70
 800e9a4:	0800ea70 	.word	0x0800ea70
 800e9a8:	0800ea70 	.word	0x0800ea70
 800e9ac:	0800ea74 	.word	0x0800ea74

0800e9b0 <memcpy>:
 800e9b0:	440a      	add	r2, r1
 800e9b2:	4291      	cmp	r1, r2
 800e9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9b8:	d100      	bne.n	800e9bc <memcpy+0xc>
 800e9ba:	4770      	bx	lr
 800e9bc:	b510      	push	{r4, lr}
 800e9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9c6:	4291      	cmp	r1, r2
 800e9c8:	d1f9      	bne.n	800e9be <memcpy+0xe>
 800e9ca:	bd10      	pop	{r4, pc}

0800e9cc <memset>:
 800e9cc:	4402      	add	r2, r0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d100      	bne.n	800e9d6 <memset+0xa>
 800e9d4:	4770      	bx	lr
 800e9d6:	f803 1b01 	strb.w	r1, [r3], #1
 800e9da:	e7f9      	b.n	800e9d0 <memset+0x4>

0800e9dc <_init>:
 800e9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9de:	bf00      	nop
 800e9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9e2:	bc08      	pop	{r3}
 800e9e4:	469e      	mov	lr, r3
 800e9e6:	4770      	bx	lr

0800e9e8 <_fini>:
 800e9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ea:	bf00      	nop
 800e9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ee:	bc08      	pop	{r3}
 800e9f0:	469e      	mov	lr, r3
 800e9f2:	4770      	bx	lr
